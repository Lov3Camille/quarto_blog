{"title":"6 Lessons that I learned from teaching R to non-programmers","markdown":{"yaml":{"title":"6 Lessons that I learned from teaching R to non-programmers","date":"2022-04-15","categories":["Opinion"],"description":"I held a short workshop teaching R to Economics students. Here are six things that I wish I had known in advance.","execute":{"message":false,"warning":false,"collapse":false,"eval":false},"editor_options":{"chunk_output_type":"console"}},"headingText":"| echo: false","containsRefs":false,"markdown":"\n\n```{r}\n#| results: 'hide'\nrenv::use(lockfile = \"renv.lock\")\n```\n\nLast week, I gave a short workshop teaching R to Economics students without prior programming experience. [On Twitter](https://twitter.com/rappa753/status/1516497080201904129), I shared six lessons that I wish I had learnt before. This blog post is a more detailed account of my experience. Additionally, I incorporated many excellent suggestions from others on Twitter into this blog post.\n\n## Do less \n\nThe first and most important lesson is that I have to plan to do less.\nThis is probably the trickiest part for me. \nUsually, I like to create an ambitious curriculum for my students.\nFor example, in my semester-long [YARDS course](https://yards.albert-rapp.de/) for mathematicians, I introduce many topics like \n\n- data viz and wrangling with `ggplot2` and `dplyr`, \n- if-conditions and for-loops (yes, I think everyone should be familiar with for-loops),\n- model building with `tidymodels`, \n- functional programming with `purrr`,\n- creating and sharing content with `Rmarkdown` and\n- interactive web apps with `shiny`.\n\nIn that course, students already came with at least a basic understanding of programming.\nMost of the time, I only had to lay out a few code examples.\nThen, I quickly made students work on assignments.\nAs students already knew how to read code and debug, they knew how to get themselves unstuck.\nThis was nice as it enabled my ambitious curriculum.\nThough, I never fully appreciated how much easier this made teaching.\n\n### Scaling down for the workshop\n\nOf course, I knew that I needed to scale down in a 4x3h workshop.\nAnd I thought I did that.\nBut I was in for a surprise because there was a crucial issue:\n\n> Things that are obvious to someone with programming experience are not obvious to non-programmers at all.\n\nLet's go through an example. \nImagine students already had seen the following fictitious code chunks.\n\n```{r}\nfilter(dat, year > 1995)\n```\n\n```{r}\nggplot(data = dat) + \n\tgeom_point(mapping = aes(x = x, y = y))\n```\n\nIn one exercise, the students were supposed to plot not the whole data set `dat` but a filtered version of it.\nSo, I thought that - having seen the code chunks and heard explanations - students would \"intuitively\" know to combine the chunks like so\n\n```{r}\nggplot(data = filter(dat, year > 1994)) + \n\tgeom_point(mapping = aes(x = x, y = y))\n```\n\n\nBut this was not the case.\nStudents were so unfamiliar with code that they were hesitant to \"stick together\" the two building blocks.\nUnfortunately, I did not anticipate this.\nAnd without any programming experience, students will get stuck in even more unexpected places. \nTherefore, be sure to have time for detours.\nAnd the only way I see how that's possible is to plan to do less.\n\n\n## Teach through typing\n\nSo, providing students with building blocks was not enough.\nAt least in their learning stage it wasn't.\nStudents were just too unfamiliar with code.\nFortunately, it turns out that it does not take a huge effort to familiarize students with code.\nThink: What's the fastest way to learn to write code?\nWell, write a lot of code.\n\nAnd that's exactly what I tried with them.\nInstead of doing demos where only I typed code, I made students type along.\nAnd I know this sounds silly.\nBut to my surprise, it helped.\nIt helped a lot!\n\nIn the end, students had the same building block as if I had done the demo alone.\nYet, students were more willing to experiment with the code they have written themselves.\nIn my book, that's a huge step on anyone's programming journey.\n\n### Make time for typing\n\nOn Twitter, [Trader Vix](https://twitter.com/kotton_king/status/1516540525050056705) disagreed with this typing along approach.\nIt is a fair point to say that not everyone can type \"sufficiently\" fast.\nSubsequently, some students may fall behind.\nIn this case, I argued that even more students struggled without this typing approach.\nThis way though, students were not falling behind.\nInstead, they didn't know how to get started.\n\nOf course, you will have to make time for students to type.\nOnce again: Plan to do less as students will be slower than you are.\nAlso, make sure to ask students if they can execute the code.\nThis can even have additional benefits.\nIn one case, the students couldn't execute the code we typed.\nFrom their description, I could tell that they forgot quotes as in `x == 'text'`.\nThus, typing together can also generate teachable moments.\n\n\n## Start with ggplot\n\nSome say vector manipulation should be the first thing to teach. \nI didn't and this was one of the few things I wouldn't change. \nMy non-statistically inclined students seemed to find visual results more engaging than number/vector crunching.\nAnd once students can create graphics, the nice thing is that you can always refer back to that for motivation.\nLet me elaborate.\n\nShockingly, data wrangling does not have value in itself.\nI know that as mathematicians/statisticians/number crunchers it is hard to imagine that.\nHowever, incorporating a calculated value in a visualizations can generate insights.\nAnd many people find that more valuable.\nTake a look at two examples that use this idea.\nBoth consider the `ames` data from `{modeldata}`.\n\n```{r}\n#| eval: true\n#| warning: false\n#| message: false\n#| collapse: true\nlibrary(tidyverse)\ndata(ames, package = 'modeldata')\ndat <- ames %>% \n  janitor::clean_names() %>% \n  select(lot_area, sale_price, neighborhood)\ndat\n```\n\n\n### Slice for highlighting \n\nWhy would you want to extract specific rows from a data set?\nHere, we use it to highlight specific houses.\n\nHow do we do that?\nWe extract the rows and throw that into another point layer.\n\nNow, come up with an artificial story why house 1, 5, 7 and 10 may be important.\nBam!\nYou now have a visual motivation for why slicing data is a neat technique to master.\n\n```{r}\n#| eval: true\nggplot(dat, aes(lot_area, sale_price)) +\n  geom_point(col = 'grey80') +\n  geom_point(data = slice(dat, 1, 5, 7, 10), col = 'red', size = 2) +\n  scale_x_log10() +\n  scale_y_log10() + \n  theme_minimal()\n```\n\n\n### Summaries for context\n\nThe same can be done to motivate vector calculations.\nWhy is it good to extract a vector and compute its median?\nTo put your other data into context.\nLet's try that out for the sale prices in `dat`.\n\n```{r}\n#| eval: true\nx <- dat$sale_price\nmed <- median(x)\n\nggplot() +\n  geom_jitter(aes(x = x, y = 1), alpha = 0.25) +\n  geom_point(aes(x = med, y = 1), col = 'red', size = 5) +\n  scale_x_log10() +\n  labs(x = 'Sale price') +\n  theme_minimal()\n```\n\n\nFor a more elaborate case, you can do the same for each neighborhood.\n\n```{r}\n#| eval: true\nsummaries <- dat %>% \n  group_by(neighborhood) %>% \n  summarise(med = median(sale_price))\n\nggplot(dat, aes(x = sale_price, y = neighborhood)) +\n  geom_point(alpha = 0.2) +\n  geom_point(data = summaries, aes(x = med), col = 'red', size = 3) +\n  scale_x_log10() + \n  theme_minimal()\n```\n\n\n## Is ggplot too hard?\n\nSo, why didn't I use the `plot()` function instead of ggplot?\nThat's because most people (including myself) would agree that ggplot's defaults are visually more pleasing. \nBut the more pressing question is:\nWas ggplot too hard for the students? \nLet's take a step back on this one.\n\n### Every new syntax is confusing\n\nTake a look at the following quote.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">When teaching, be careful not to mix up &quot;I learned this a long time ago&quot; with &quot;This is simple&quot;<a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a></p>&mdash; David Robinson (@drob) <a href=\"https://twitter.com/drob/status/722806375005302785?ref_src=twsrc%5Etfw\">April 20, 2016</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nIn the same spirit, let me say:\n\n> When teaching, be careful not to mix up \"I learned this only fairly recently\" with \"This is pretty advanced stuff and better not taught early on\".\n\nPersonally, I have encountered ggplot and the tidyverse only late in my programming game.\nTherefore, I have refrained from teaching it to students for some time.\nHonestly though, this was also due to my own lack of wanting to learn new \"complicated\" syntax.\nAs David Robinson states in his insightful [\"Teach the tidyverse to beginners\"](http://varianceexplained.org/r/teach-tidyverse/) essay:\n\n*\"...all programming syntax is confusing for non-programmers.\"*\n\nIn my case, I was not a non-programmer.\nBut ggplot has its own ecosystem with its own syntax.\nThus, it is easy to say that ggplot is way too hard for beginners.\nBut the truth is: \n\n> Every syntax is confusing to the uninitiated.\n\n### So, did students cope with ggplot or not?\n\nComing back to my students, this long-winded detour explains why they did surprisingly well with ggplot.\nSure, the intricacies of `aes()` are probably not fully understood after this workshop.\nBut having no prior experience in programming whatsoever, they were surprisingly willing to accept that `aes()` is just a necessary fact of ~~life~~ ggplot.\n\nAs a mathematician, I like to compare this to integral notation $ \\\\int_0^1 f(x)\\\\, \\\\mathrm{d}x $.\nIn high school, I did not fully grasp the meaning of $ \\\\mathrm{d}x $.\nBut I accepted its presence and treated it like a delimiter for what's inside and outside the integral.\nClearly, this is far from understanding the meaning of this notation.\nYet, it enabled me to do what I needed to do.\n\nOverall, students would sometimes forget to put e.g. `col = ` into the correct place.\nFor most parts, though, the students accepted the syntax just the way it is and understood that within `aes()` we refer to the columns in `data`.\nAnd what may sound even more surprising:\n\n*Students fared better with `ggplot()` than with other functions like `filter()`,  `slice()` or `mutate()`.*\n\nI suspect that is because ggplot is its own ecosystem and each plot follows the same template.\nBut `filter()`, `slice()` and `mutate()` each work differently.\nOne wants a conditional statement, one wants row indices and one wants a new column name plus its \"formula\". \n\n\n## Stress to save variables before using them \n\nThis was another surprising moments for me.\nApparently, if you have never programmed, it is not obvious to save results.\nTherefore, make sure that students understand that calculations can only be used later if they are saved into a variable.\nBut this variable-saving line has to be executed for the actual saving to happen.\nOften, students would have a code chunk like this\n\n```{r}\ndat <- filter(ames, Sale_Price > 200000)\nggplot(data = dat) +\n\tgeom_point(mapping = aes(x = Lot_Area, Sale_Price))\n```\n\n\nBut then, they would only execute the second line.\nMore often than not, there was no previous `dat` variable in the environment and students would get an error.\nThis was confusing because the `dat <-` line is right there.\nOf course, that does not mean the line was executed.\nUnfortunately, you will likely have to mention this multiple times before it sticks.\n\n## Teach named functions\n\nThe symbols`$`, `[` and `]` all have their rightful place in R. \nHowever, students unanimously found using memorable function names like `pull()` or `select()` easier to learn.\nBut remember: Do less. \nI tried to show students multiple ways to get a job done using e.g. `$` or `pull()`. \nThis only caused confusion.\nSo, use only one approach. \n\nThough, in this specific case I would likely go with `$` instead of `pull()`.\nOf course, `pull()` is nice but chances are that students will encounter `$` at some point. \nThus, see this as an investment into enabling students to read more code.\nFor the same reason, [Nikita Telkar suggested](https://twitter.com/nikita_telkar/status/1516726552213426181) to teach the full name notation, e.g. `dplyr::select()`.\n\nPersonally, I would not use full names all the time though.\nBut one particular use case comes to mind.\nAfter experiencing a few errors due to not using capital letters in column names, the students were more than willing to use `clean_names()` from [{janitor}](https://albert-rapp.de/posts/07_janitor_showcase/07_janitor_showcase.html).\nSo, `janitor::clean_names()` may be a good showcase for the full name notation. \n\n## Use pipes \n\nAs mentioned, saving variables felt foreign to students at first. \nThe same was true for nesting functions. \nConsequently, two step processes like selecting and filtering were hard. \nHere, pipes helped. \n\nThough I've had Math students complain that pipes feel wrong, for the Economics students it was just the right thing.\nIn fact, the pipe often mimicked what students wanted to do anyway.\nFrequently, students knew that they want to e.g. filter data.\nSo they typed `filter(year > 1999)`.\nOf course, this misses the data.\nIt seems like students were so caught up in what they wanted to **do** that they forgot to tell R what data to use.\nBut chaining multiple function calls circumvented that (modulo at the beginning of the chain).\n\nAdditionally, let me mention that there were great contributions on Twitter by [Deidre Toher](https://twitter.com/dtoher/status/1516501635706597381) and [Fran Barton](https://twitter.com/ludictech/status/1516523771573776395).\nDeidre Toher suggested reading pipes as 'then' and Fran Barton pronounced conditions like  `x[x > 5]` as 'such that'.\nThis kind of reading code aloud, could go a long way to make code feel more natural for beginners.\n\n## Other reactions\n\nThese were my six lessons.\nAll of them were enhanced by a lot of great suggestions from Twitter.\nBut not all suggestions fit into the previous text.\nSo, let me mention a few more contributors.\n\n### TidyverseSkeptic\n\nI don't want to give the impression that I filtered out \"negative\" comments.\nSo, let me point out that [Prof. Norm Matloff](https://twitter.com/matloff/status/1516531433539399681) chimed in and advocated against using pipes. \nFor his elaborate reasons see the [TidyverseSkeptic essay](https://github.com/matloff/TidyverseSkeptic). \nThat being said, I do not agree with many statements in his tweet or his essay (though I agree that for-loops should not be a reason to feel ashamed).\n\nHaving gotten this off my chest, I really do not want to comment more on the artificial fight between base-R and the tidyverse.\nTo me, a lot of this dispute feels like a **highly subjective** back-and-forth between both sides anyway.\nI do like parts of both worlds and I don't want to throw my own subjective two cents into the mix.\n\n### Miscellaneous tips\n\nSo, let me close this post on a lighter note with the remaining contributions.\n\n- [Remington Moll](https://twitter.com/remington_moll/status/1516764933601460224) suggested to use data sets that students care about. \nThis could encompass letting students choose a data set from five prepared data sets. \nOf course, this could potentially take up a huge amount of preparation time.\nBut maybe skimming a few data sets in advance could be enough for demos.\n\n\n- [Fadel Megahed](https://twitter.com/FadelMegahed/status/1516784428109901826) shared some of his own course material.\nIn his slides, he uses timers and I like the idea.\nThis way, in-class time management may become easier.\nI always struggle with sticking to the allotted time during a set of exercises.\n\n- [Dr. Robert M Flight](https://twitter.com/rmflight/status/1516763348343398406) shared the datacarpentry lessons. \nI have only skimmed them but I've heard people praise these lessons multiple times already.\n\n## Closing\n\nThis concludes my blog post.\nThanks to everyone on Twitter for contributing.\nIt pleased me to see that many people in the R community are passionate about teaching.\nIf you liked this essay, then consider following me on [Twitter](https://twitter.com/rappa753) and/or subscribing to my [RSS feed](https://albert-rapp.de/blog.xml). \nSee you next time!"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"collapse":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["code-filename"],"toc":true,"toc-depth":3,"include-after-body":["../../footer.html"],"output-file":"10_lessons_learned_teaching_nonprogrammers.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.35","editor":"source","theme":{"light":"../../theme.scss"},"title-block-banner":false,"author":"Albert Rapp","page-layout":"article","comments":{"utterances":{"repo":"AlbertRapp/blogComments"}},"title":"6 Lessons that I learned from teaching R to non-programmers","date":"2022-04-15","categories":["Opinion"],"description":"I held a short workshop teaching R to Economics students. Here are six things that I wish I had known in advance.","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}}}