{"title":"How to use Fonts and Icons in ggplot","markdown":{"yaml":{"title":"How to use Fonts and Icons in ggplot","date":"2022-03-04","categories":["Visualization"],"description":"This is a short tutorial on how to import fonts and icons in R using the showtext package.","execute":{"message":false,"warning":false,"collapse":false},"editor_options":{"chunk_output_type":"console"}},"headingText":"| echo: false","containsRefs":false,"markdown":"\n\n```{r}\n#| results: 'hide'\nrenv::use(lockfile = \"renv.lock\")\n```\n\nFor some reason, using other than the default font in plots has been a major problem for me in R.\nSupposedly, one can use the `extrafont` package to manage all of that but I found it too cumbersome.\nInstead, I found out that the `showtext` package can make my life easier.\n\nEven though working with text in plot is not yet completely free of troubles, `showtext` has made many things easier.\nNow, I can finally choose fonts freely and even use icons.\nThis blogposts gives you a how-to so that you can do that too.\n\n## Import and Use Fonts with showtext\n\nA great source for fonts is [Google's font page](https://fonts.google.com/).\nWhat is great abut this page is that it can display texts in many different fonts.\n\n```{r, echo = F, fig.cap='Screenshot from fonts.google.com'}\nknitr::include_graphics('google-fonts.png')\n```\n\nOnce we found a nice font, we can use its name to make it available within R.\nThis is done with `showtext`'s helpful `font_add_google()` function.\nLet's import a couple of random fonts.\n\n```{r, message=F, warning=F}\n# Packages that we will use in this post\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(gghighlight)\n\n# Import fonts\n# First argument = google name, \n# Secont name = font name in R\nfont_add_google('Lora', 'lora')\nfont_add_google('Lobster', 'lobster')\nfont_add_google('Anton', 'anton')\nfont_add_google('Fira Sans', 'firasans')\nfont_add_google('Syne Mono', 'syne')\n\n# Important step to enable showtext font rendering!\nshowtext_auto()\n```\n\nNotice that we have also used `showtext_auto()`.\nThis is necessary for `showtext` to take over the show. \nOtherwise, the new fonts would not be usable.\nNow, let's take a look at our new fonts.\n\n```{r, fig.height = 4}\ntib <- tibble(\n  family = c('firasans', 'lora', 'lobster', 'anton', 'syne'),\n  x = 0,\n  y = seq(0.0, 1, length.out = 5),\n  label = 'Showtext shows text. Wow. What an insight.'\n)\n\ntib %>%\n  ggplot(aes(x, y, label = label)) +\n  geom_text(family = tib$family, size = 13, hjust = 0, col = 'dodgerblue4') +\n  coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +\n  theme_void()\n```\n\nYou may wonder why we have used `coord_cartesian()` here. \nWe did this in order to ensure that the x-axis is not centered at 0 and our example texts won't be outside of the plot.\nPersonally, I find this somewhat tedious but this can't be helped, I guess.\nWith text elements we always run at the risk of writing outside of the plot area.\n\n\nNext, let's make our use of fonts somewhat more practical.\nIn my [last blog post](https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/), I stressed the use of highlighting a few important things instead of using many colors.\nCombine this with direct labels instead of a legend and you get this plot I created using the Fira Sans font.\n\n```{r, message = F, warning=F, echo = F}\n# Some data wrangling\ntime_data <- read_csv(\"time-spent-with-relationships-by-age-us.csv\") %>% \n  rename_with(\n    ~c('Entitity', 'Code', 'Age', 'alone', 'friends', 'children', 'parents', \n       'partner', 'coworkers')\n  ) %>% \n  pivot_longer(\n    cols = alone:coworkers, \n    names_to = 'person',\n    values_to = 'minutes'\n  ) %>% \n  janitor::clean_names() %>% \n  filter(age <= 80) \n\n# Color-blind safe colors\ncolors <- thematic::okabe_ito(8)[-6]\n\n# Line plot\np <- time_data %>% \n  ggplot(aes(x = age, y = minutes, col = person)) +\n  geom_line(size = 1.5) +\n  scale_color_manual(values = colors) +\n  coord_cartesian(xlim = c(15, 81), ylim = c(0, 525), expand = F) +\n  scale_y_continuous(minor_breaks = NULL) +\n  labs(x = 'Age (in years)', y = 'Minutes', col = 'Time spent')\n\nage_40_plt <- p + \n  gghighlight(\n    person %in% c('alone', 'children'), \n    age >= 38, \n    use_direct_label = F\n  ) +\n  geom_segment(x = 38, xend = 38, y = -Inf, yend = 300, linetype = 2, col = 'grey20') +\n  labs(title = 'Emphasize just one or a few categories') \n\nage_40_text <- glue::glue(\n  \"Around the age of 40, we spent less <br> time with \n  <span style = 'color:{colors[2]};'>children</span> \n  and more <br> time <span style = 'color:{colors[1]};'>alone</span>.\"\n)\n\n\ncreate_plot <- function(font, anno_size = 12, theme_size = 32) {\n  age_40_plt +\n    labs(title = 'Label directly') +\n    annotate(\n      'richtext',\n      x = 15,\n      y = 400,\n      label = age_40_text,\n      hjust = 0,\n      vjust = 0,\n      family = font,\n      lineheight = 0.5,\n      size = anno_size,\n      label.color = NA\n    ) +\n    theme_minimal() +\n    theme(\n      text = element_text(family = font, size = theme_size),\n      plot.title.position = 'plot',\n      plot.title = element_text(\n        face = 'bold', \n        colour = thematic::okabe_ito(8)[6],\n        margin = margin(t = 2, r = 0, b = 7, l = 0, unit = \"mm\")\n      ),\n      legend.position = 'none'\n    )\n}\ncreate_plot('firasans')\n```\n\nNow, see what it would look like had I used the Lobster font instead.\n\n```{r, echo = F}\ncreate_plot('lobster', anno_size = 6, theme_size = 16)\n```\n\nFeels different doesn't it?\nAnd this is still different than the Anton font.\n\n```{r, echo = F}\ncreate_plot('anton', anno_size = 5, theme_size = 16)\n```\n\n## Import and Use Icon Fonts with showtext\n\nWe can not only use regular text fonts but also icons with `showtext`.\nFor example, we may want to use one of the free [Fontawesome icons](https://fontawesome.com/icons).\nTo do so, download the [newest version](https://fontawesome.com/download) and extract the .otf-files into your working directory.\nThese contain the font information that you need.\nImporting these (and any other font for that matter) works with `font_add()` and the path to the .otf-files.\n```{r}\n# First argument = name in R\n# Second argument = path to .otf-file\nfont_add('fa-reg', 'fonts/Font Awesome 6 Free-Regular-400.otf')\nfont_add('fa-brands', 'fonts/Font Awesome 6 Brands-Regular-400.otf')\nfont_add('fa-solid', 'fonts/Font Awesome 6 Free-Solid-900.otf')\n```\n\nNow that we imported the fonts, we can use `ggtext`'s `geom_richtext()` and some HTML wizardry to add icons to our previously imported fonts from Google.\nBut first, what we need is an icon's unicode identifier?\nUni-what?\n\nThe easiest way to find that is to stroll through the [Fontawesome icons online](https://fontawesome.com/icons).\nThen, find one that matches the font you want to use, e.g. free and solid.\nFinally, find it's unicode character in the corresponding popup menu.\n\n```{r, echo = F, fig.cap='Screenshot from fontawesome.com. Unicode highlighted in yellow.'}\nknitr::include_graphics('unicode-finder.png')\n```\n\nOnce you got this, you can add `&#x` in front of the unicode and wrap `<span>` tags around it.\nWithin these tags, you will have to specify `font-family` so that the icon is rendered.\n\n```{r, warning = F}\ntib <- tibble(\n  family = c('firasans', 'lora', 'lobster', 'anton', 'syne'),\n  x = 0,\n  y = seq(0.0, 1, length.out = 5),\n  label = \"Let's talk cash <span style='font-family:fa-solid'>&#xf651;</span>\"\n)\n\ntib %>%\n  ggplot(aes(x, y, label = label)) +\n  geom_richtext(family = tib$family, size = 16, hjust = 0, col = 'dodgerblue4', label.colour = NA) +\n  coord_cartesian(xlim = c(0, 1), ylim = c(-0.1, 1.1)) +\n  theme_void()\n```\n\nThis way, you can also use icons in scatter plots.\nThough, make sure to set `fill=NA` if you do not want to have white boxes around the icons.\n\n```{r, warning=F}\ntibble(x = runif(25), y = runif(25)) %>% \n  ggplot(aes(x, y, label = \"<span style='font-family:fa-solid;'>&#xf651;</span>\")) +\n  geom_richtext(size = 12, label.colour = NA, fill = NA, col = 'dodgerblue4',) +\n  theme_minimal()\n```\n\nYou will notice that using the two previous code chunks will generate a lot of warnings about \"native encoding\".\nSo far, I have always been able to ignore these without any trouble. \nI really don't know why they appear.\nAnd if you know, please let me know in the comments below.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"collapse":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["code-filename","lightbox"],"toc":true,"toc-depth":3,"include-after-body":["../../../footer.html"],"output-file":"08_fonts_and_icons.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.35","lightbox":"auto","editor":"source","theme":{"light":"../../../theme.scss"},"title-block-banner":false,"author":"Albert Rapp","page-layout":"article","comments":{"utterances":{"repo":"AlbertRapp/blogComments"}},"title":"How to use Fonts and Icons in ggplot","date":"2022-03-04","categories":["Visualization"],"description":"This is a short tutorial on how to import fonts and icons in R using the showtext package.","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}}}