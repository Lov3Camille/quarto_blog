{"title":"ggplot tips: Using position_stack() for Individual Positioning","markdown":{"yaml":{"title":"ggplot tips: Using position_stack() for Individual Positioning","date":"2021-09-11","categories":["Visualization"],"description":"We take a look at the differences between position = 'stack' and position = position_stack().","execute":{"message":false,"warning":false,"collapse":false},"editor_options":{"chunk_output_type":"console"}},"headingText":"| echo: false","containsRefs":false,"markdown":"\n\n```{r}\n#| results: 'hide'\nrenv::use(lockfile = \"renv.lock\")\n```\n\nFor a long time I have wondered why some people would use `position_stack()` for position alignment instead of the simpler version `position = \"stack\"`.\nRecently, though, I learned the purpose of the former approach when I tried to add data labels to a stacked bar chart for better legibility.\n\nFurther, I decided that this knowledge is a good addition to this [ggplot2-tips series](https://albert-rapp.de/ggplot-series.html), so let's see what `position_stack()` can do.\nTo achieve this, let us create a small dummy data set.\n\n```{r, message = F, warning = F}\nlibrary(tidyverse)\ndummy_dat <- tibble(\n  group = c(rep(\"A\", 3), rep(\"B\", 3)),\n  category = factor(\n    c(rep(c(\"low\", \"medium\", \"high\"), 2)), \n    levels = rev(c(\"low\", \"medium\", \"high\")),\n  ),\n  percent = c(0.41, 0.16, 1 - 0.41 - 0.16, 0.26, 1 - 0.26 - 0.36, 0.36)\n)\ndummy_dat\n```\n\nNext, take a look at the corresponding stacked bar chart.\nSince we created a dataset that contains percentages, I took the liberty of appropriately transforming the y-axis via `scale_y_continuous()`.\n\n```{r}\ndummy_dat %>% \n  ggplot(aes(x = group, y = percent, fill = category)) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent_format())\n```\n\nI believe that this visualization could be improved by adding text labels to each part of the stacked bar chart in order for the reader to immediately detect how large each portion of the bars is.\nLet's try this via simply converting the values to strings and adding `geom_text()` to the plot.\n\n```{r}\ndummy_dat %>% \n  mutate(percent_labels = scales::percent(percent)) %>% \n  ggplot(aes(x = group, y = percent, fill = category)) +\n  geom_col() +\n  geom_text(aes(label = percent_labels)) + \n  scale_y_continuous(labels = scales::percent_format())\n```\n\n\nClearly, this did not work as intended because `geom_text()` uses `position = \"identity\"` by default which is why the y-position of the labels is simply determined by its value.\nNow, here is where I would usually change the positioning via `position = \"stack\"`.\nHowever, the result this approach delivers is somewhat less than perfect.\n\n```{r}\ndummy_dat %>% \n  mutate(percent_labels = scales::percent(percent)) %>% \n  ggplot(aes(x = group, y = percent, fill = category)) +\n  geom_col() +\n  geom_text(aes(label = percent_labels), position = \"stack\") + \n  scale_y_continuous(labels = scales::percent_format())\n```\n\nIdeally, I would like the labels to appear in the middle of each colored block.\nWe could try to use `vjust` to move the labels which is not a great idea since every label will be moved by the same amount and the blocks are of different height.\nSimilarly, we could compute the block middle points by hand and use that as separate y-aesthetic in `geom_text()`.\n\nClearly, this involves a tedious additional computation and we should avoid this, if possible.\nThis is precisely where `position_stack()` comes in.\nConveniently, using `position = position_stack()` stacks the bars just like `position = \"stack\"` does but the function `position_stack()` has another argument `vjust` by which we can move the labels individually. \n\nHere, the possible values of `vjust` range from 0 (bottom of the designated height) to 1 (top of the designated height).\nTherefore, moving the labels to the middle of each bar is as easy as setting `vjust = 0.5`.\n\n```{r}\ndummy_dat %>% \n  mutate(percent_labels = scales::percent(percent)) %>% \n  ggplot(aes(x = group, y = percent, fill = category)) +\n  geom_col() +\n  geom_text(\n    aes(label = percent_labels), \n    position = position_stack(vjust = 0.5)\n  ) + \n  scale_y_continuous(labels = scales::percent_format())\n```\n\nFinally, one may - and this is definitely a matter of taste - tweak this plot further by changing the color and text formatting.\nPersonally, I like darker colors combined with a white, bold label.\nIn this case, this would look like this.\n\n```{r}\ndummy_dat %>% \n  mutate(percent_labels = scales::percent(percent)) %>% \n  ggplot(aes(x = group, y = percent, fill = category)) +\n  geom_col() +\n  geom_text(\n    aes(label = percent_labels), \n    position = position_stack(vjust = 0.5),\n    col = \"white\",\n    fontface = \"bold\"\n  ) + \n  scale_y_continuous(labels = scales::percent_format()) +\n  scale_fill_brewer(palette = \"Set1\")\n```\n\n\nIn summary, we have seen that using `position = position_stack()` is a more powerful alternative to `position = \"stack\"` that allows individual positioning. \nNevertheless, as long as the additional arguments of `position_stack()` are not needed I still find the latter version simpler.\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"collapse":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["code-filename","lightbox"],"toc":true,"toc-depth":3,"include-after-body":["../../../footer.html"],"output-file":"03_position_adjustment.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.35","lightbox":"auto","editor":"source","theme":{"light":"../../../theme.scss"},"title-block-banner":false,"author":"Albert Rapp","page-layout":"article","comments":{"utterances":{"repo":"AlbertRapp/blogComments"}},"title":"ggplot tips: Using position_stack() for Individual Positioning","date":"2021-09-11","categories":["Visualization"],"description":"We take a look at the differences between position = 'stack' and position = position_stack().","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}}}