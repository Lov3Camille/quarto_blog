{"title":"ggplot tips: Arranging plots","markdown":{"yaml":{"title":"ggplot tips: Arranging plots","date":"2021-10-28","categories":["Visualization"],"description":"The patchwork and ggforce packages can be used to compose plots from multiple subplots. Let's have a look at how that works.","execute":{"message":false,"warning":false,"collapse":false},"editor_options":{"chunk_output_type":"console"}},"headingText":"| echo: false","containsRefs":false,"markdown":"\n\n```{r}\n#| results: 'hide'\nrenv::use(lockfile = \"renv.lock\")\n```\n\nIn this week's [TidyTuesday](https://github.com/rfordatascience/tidytuesday), I noticed that I am frequently not using only `ggplot2` to create plots.\nIn fact, it has become essential to me to leverage the powers of other great additional packages that align well with `ggplot2`.\nTherefore, I decided to extend my [ggplot2-tips series](https://albert-rapp.de/ggplot-series.html) by introducing a few packages I use quite often.\n\nIn this post, I want to cover how to arrange multiple plots.\nIn particular, I will talk about the fantastic [`patchwork`](https://patchwork.data-imaginist.com/) package by [Thomas Lin Pedersen](https://www.data-imaginist.com/) which helps to arrange plots quite intuitively.\nFurther, I want to take a glance at [`ggforce`](https://ggforce.data-imaginist.com/), another package written by the same author as `patchwork`, because it also has a neat function for arranging plots.\nHowever, `ggforce` can do way more and I will demonstrate that in another installment of this series.\nAlso, if you like to watch and listen rather than read about how the two packages work, you can check out the corresponding video on [YouTube](https://youtu.be/C5Ik-WkPuGQ).\n\nSo, let us begin by creating a data set we want to fiddle with for plotting purposes.\nFor simplicity, let us use the `penguins` data (without missing values) from the `palmerpenguins` package.\n\n```{r, message = F, warning = F}\nlibrary(tidyverse)\ntheme_set(theme_light())\n\n# All missing values can be filtered out by filtering the `sex` variable\ndat <- palmerpenguins::penguins %>% filter(!is.na(sex))\n```\n\n\n## Arrange Plots via patchwork\n\nOften, we want to show multiple plots that tell a story when looked at together.\nUsing `patchwork`, we can easily compose a single plot consisting of subplots.\nThis is done by using the simple symbols `+` resp. `/` to display plots next to resp. on top of each other.   \n\nFor demonstration purposes, let us generate a few simple plots.\n\n```{r}\npoint_plot <- dat %>% \n  ggplot(aes(bill_length_mm, flipper_length_mm, fill = sex)) +\n  geom_jitter(size = 3, alpha = 0.5, shape = 21)\npoint_plot\npoint_plot2 <- dat %>% \n  ggplot(aes(bill_length_mm, bill_depth_mm, fill = sex)) +\n  geom_jitter(size = 3, alpha = 0.5, shape = 21)\npoint_plot2\n# plot_plot is obviously a fun name\nboxplot_plot <- dat %>% \n  ggplot(aes(x = body_mass_g, fill = sex)) +\n  geom_boxplot()\nboxplot_plot\n```\n\nClearly, showing each plot separately is boring and may not tell a story convincingly.\nPossibly, here you may want to say that the length and depth measurements give no clear distinction between male and female penguins but the weight measurements offers a better distinguishabilty between sexes.\nMaybe, if we see all plots together, we can tell that story without boring the reader.\n\n```{r}\nlibrary(patchwork)\np <- (point_plot + point_plot2) / boxplot_plot\np\n```\n\nSee how I have used `+` to put the point plots next to each other and `/` to plot the boxplots below the two point plots.\nObviously, that was super easy and neat.\nBut this simple arrangement leads to a doubling of the legends which is somewhat bothersome.\nHowever, this is no cause for concern.\n`plot_layout()` is there to collect those legends for you.\n\n```{r}\np + plot_layout(guides = \"collect\") \n```\n\nOf course, this leaves you with two legends which is kind of superfluous.\nThe easy way to get rid of this is to plot no legends for the boxplots.\n\n```{r}\nboxplot_plot <- boxplot_plot + guides(fill = \"none\")\np <- (point_plot + point_plot2) / boxplot_plot\np + plot_layout(guides = \"collect\")\n```\n\nNow, what about legend positioning?\nWell, we already know how that usually works for a single plot (via `theme()` in case you forgot) and the good news is that the exact same thing works with patchwork as well.\nBut beware to apply an additional `theme()` layer to the whole plot and not just to the last plot added to our composed plot.\nTo make sure that happens, we have to add this layer via `&`.\n\n```{r}\np + plot_layout(guides = \"collect\") & theme(legend.position = \"top\")\n```\n\nBy the same logic, we can make additional changes to the whole plot e.g. to change the color mapping.\n\n```{r}\np +\n  plot_layout(guides = \"collect\") & \n  theme(legend.position = \"top\") &\n  scale_fill_brewer(palette = \"Dark2\")\n```\n\nNext, let us control the layout a bit more and annotate the plot with `plot_annotation()`.\n\n```{r}\n(point_plot + point_plot2 + plot_layout(widths = c(0.7, 0.3))) / \n  boxplot_plot +\n  plot_layout(guides = \"collect\", heights = c(0.4, 0.6)) +\n  plot_annotation(\n    title = \"Look at that arrangement!\",\n    subtitle = \"Wow\",\n    caption = \"Olà.\",\n    tag_levels = \"A\",\n    tag_prefix = \"(\",\n    tag_suffix = \")\"\n  ) & \n  labs(fill = \"Penguin sex\") &\n  theme(legend.position = \"top\") &\n  scale_fill_brewer(palette = \"Dark2\")\n```\n\nWe did quite a lot here, so let's recap:\n\n* We changed the widths of the plots in the first row by passing a vector of relative widths to `widths` in `plot_layout()`.\n* Same thing with `heights` in `plot_layout()` to make the boxplots larger.\n* Renamed legend label with the regular `labs()` function.\n* Added a title, subtitle, caption and tags to the **whole** plot with `plot_annotation()`.\n\nAlso, if you want to have the tags to only label the upper and lower row, you may want to wrap the first row together by `wrap_elements()`.\nThink of this as creating a new single unit.\n\n```{r}\nwrapped_plots <- wrap_elements(\n  point_plot + point_plot2 + plot_layout(widths = c(0.7, 0.3))\n)\n(wrapped_plots) / \n  boxplot_plot +\n  plot_layout(guides = \"collect\", heights = c(0.4, 0.6)) +\n  plot_annotation(\n    title = \"Look at that arrangement!\",\n    subtitle = \"Wow\",\n    caption = \"Olà.\",\n    tag_levels = \"A\",\n    tag_prefix = \"(\",\n    tag_suffix = \")\"\n  ) & \n  theme(legend.position = \"top\") &\n  scale_fill_brewer(palette = \"Dark2\")\n```\n\nNotice how the upper row reinstated the default colors and has two legends.\nThis demonstrates how `wrap_elements()` made the plots \"independent\" from the overall theming via `&`, so to speak.\nOn the bright side, there is no (C) tag anymore.\n\nUnsurprisingly, `patchwork` can do much more but for starters I think the previous examples will already get you quite far.\nThey are you \"80/20 leverage points\", if you will.\nBut in order to add one more neat feature, let me finish our intro to `patchwork` by showing you how to create plots in plots via insets.\n\n```{r}\n# Tweak boxplots a bit for better visual fit to point_plot\nplt <- boxplot_plot + \n  theme_minimal() + \n  coord_flip() + \n  theme(plot.background = element_rect(fill = \"grey80\"))\n\npoint_plot +\n  coord_cartesian(xlim = c(25, 60)) +\n  inset_element(\n    plt, \n    left = 0.01, \n    right = 0.4,\n    top = 0.99, \n    bottom = 0.6\n  )\n```\n\n## Create Subplots via ggforce\n\nI really enjoy arranging plots with `patchwork` because, to me, the syntax feels quite intuitive (mostly).\nHowever, as you probably noticed, I had to design each subplot and arrange them by hand.\nClearly, if I want to use a grid-like arrangement to display each combination of two variables from a given set of variables, this may become tedious.\n\nLuckily, there is the `ggforce` package that has a neat faceting function to accomplish just that.\nAs was already mentioned above, apart from that, the `ggforce` package offers even more cool stuff which we will look at in a future blog post.\n\nWith `facet_matrix()` it becomes quite easy to get a grid of subplots to display multiple combinations of two variables.\nFor instance, take a look at this.\n\n```{r}\nlibrary(ggforce)\ndat %>% \n  ggplot(aes(x = .panel_x, y = .panel_y, fill = sex)) +\n  geom_point(alpha = 0.5, size = 2, shape = 21) +\n  facet_matrix(\n    vars(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g)\n  )\n```\n\nNow, while this is not a particular beautiful plot, it gives us a quick overview of interesting variables which might be great for an exploratory analysis.\nNotice how we had to use `.panel_x` and `.panel_y` as placeholder for the individual variables.\nWe could use the `geom_auto*()` functions to avoid typing that as they default to the correct values for `x` and `y`.\nConsequently, we could have written \n\n```{r, eval = F}\ndat %>% \n  ggplot(aes(fill = sex)) +\n  geom_autopoint(alpha = 0.5, size = 2, shape = 21) +\n  facet_matrix(\n    vars(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g)\n  )\n```\n\nWith a little bit of tweaking, we can make this plot more interesting.\nFor example. it would be neat if we had density plots on the diagonal.\nNo problem! \nAdd another `geom_autodensity()` layer and make sure that `facet_matrix()` understands to map only this layer to the diagonal subplots.\n\n```{r}\ndat %>% \n  ggplot(aes(fill = sex)) +\n  geom_autopoint(alpha = 0.5, size = 2, shape = 21) + # Layer 1\n  geom_autodensity(alpha = 0.5, position = \"identity\") + # Layer 2\n  facet_matrix(\n    vars(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g),\n    layer.diag = 2\n  )\n```\n\nSee how `layer.diag = 2` maps the diagonal elements to the second line of `geom_*` code.\nSimilarly, we can manipulate the content of the upper and lower triangle in this grid by changing `layer.lower` or `layer.upper` in `facet_matrix()`.\nLet's add another layer to see that in action.\n\n```{r}\ndat %>% \n  ggplot(aes(fill = sex)) +\n  geom_autopoint(alpha = 0.5, size = 2, shape = 21) + # Layer 1\n  geom_autodensity(alpha = 0.75, position = \"identity\") + # Layer 2\n  geom_hex(aes(x = .panel_x, y = .panel_y), alpha = 0.75) + # Layer 3\n  facet_matrix(\n    vars(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g),\n    layer.diag = 2,\n    layer.lower = 3\n  )\n```\n\nLast but not least, let me mention that we can also easily create what is called an \"asymmetric grid\" in `ggforce` by mapping rows and columns manually.\nThis is great for having categorical variables on one axis and numerical variables on the other axis.\n\n```{r, warning = F}\ndat %>% \n  ggplot() +\n  geom_boxplot(\n    aes(x = .panel_x, y = .panel_y, group = .panel_x)\n  ) +\n  facet_matrix(\n    cols = vars(sex, species), \n    rows = vars(bill_depth_mm:body_mass_g)\n  )\n```\n\nBeware that `geom_boxplot()` is a bit tricky as it requires the `group` argument to be explicitly set.\nFurthermore, if you want to add another aesthetic, e.g. `fill`, you will have to set `group` via `interaction()`.\n\n```{r, warning = F}\ndat %>% \n  ggplot() +\n  geom_boxplot(\n    aes(\n      x = .panel_x, \n      y = .panel_y, \n      fill = island, \n      group = interaction(.panel_x, island)\n    )\n  ) +\n  facet_matrix(\n    cols = vars(sex, species), \n    rows = vars(bill_depth_mm:body_mass_g)\n  )\n```\n\n\nThis concludes our short summary of possibilities to arrange plots.\nIn the next post of this [ggplot2-tips series](https://albert-rapp.de/ggplot-series.html) we will take a closer look at `ggforce`.\nI hope you enjoyed today's blog post and I look forward to \"see\" you at my next blog post.\nIn the meantime, feel free to leave a comment or a click on the applause button below.\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"collapse":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["code-filename"],"toc":true,"toc-depth":3,"include-after-body":["../../../footer.html"],"output-file":"04_arranging_plots.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.35","editor":"source","theme":{"light":"../../../theme.scss"},"title-block-banner":false,"author":"Albert Rapp","page-layout":"article","comments":{"utterances":{"repo":"AlbertRapp/blogComments"}},"title":"ggplot tips: Arranging plots","date":"2021-10-28","categories":["Visualization"],"description":"The patchwork and ggforce packages can be used to compose plots from multiple subplots. Let's have a look at how that works.","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}}}