{
  "hash": "c6dcf6480f20f52c20d42d574128632c",
  "result": {
    "markdown": "---\ntitle: 'Beginning a ggplot2 Series: Logarithmize Your Scales'\ndate: '2021-08-07'\ncategories: [\"Visualization\"]\ndescription: 'This is the beginning of a series about a few ggplot2 tricks I picked up along the way. In this first installment we talk about how logarithmizing scales can be beneficial.'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\nIt is not that long ago when I first encountered `ggplot2` and decided to learn how to use it[^motivation-R].\nBy no means do I think that I have sufficiently mastered this package yet but as time has passed I have certainly picked up a few tips on my journey to get better at creating more meaningful visualizations.\nSo, in order to remind myself of and share what I learned, I decided to create a sort of series containing tips that enhanced my visualization skills.\n\nHowever, this is not supposed to be an intro to `ggplot2` though. \nI have already done that and you can find it in the data exploration chapter of my \"Yet Again: R + Data Science\" lecture notes (see [YARDS](https://yards.albert-rapp.de/statQuant.html)).\nCurrently, I plan to make each installment of the series somewhat short to keep it simple and all further posts in this series will be collected under the [ggplot2-tips series tag](https://albert-rapp.de/series/ggplot2-tips/) which you can also access from this blog's main page. \nSo, without further ado, let us begin.\n\n## Using log-transforms\n\nOften, one finds variables in a data set that resemble heavy-tailed distributions and you can detect it by a simple histogram in a lot of cases.\nFor instance, take a look at the variable `sale_price` of the `ames` dataset from the `modeldata` package. \nThis variable contains the sale price of 2930 properties in [Ames, Iowa](https://en.wikipedia.org/wiki/Ames,_Iowa) and its histogram looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(modeldata)\ndata(ames)\n# I like to clean names s.t. no capital letters are used in the variable names\names <- ames %>% janitor::clean_names()\n\names %>%\n  ggplot(aes(x = sale_price)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](01_a_few_ggplot_tips_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nAs you can see, the distribution looks skewed in the sense that most of the sale prices fall within one range but there are also sale prices that are comparatively high.\nIn effect, the histogram depicts a \"long tail\" and the highly priced sales are not that easily discernible in the histogram as the column heights may become really small and there may be large \"gaps\" between columns as seen above.\n\nOne common way to deal with this is to apply a logarithm to the variable of interest.\nIt does not really matter which logarithm you use but since we like to work in a decimal system, a logarithm with base 10 is often used.\nLet's see how this changes the picture.\n\n\n::: {.cell}\n\n```{.r .cell-code}\names %>%\n  ggplot(aes(x = log(sale_price, 10))) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](01_a_few_ggplot_tips_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAdmittedly, we have a gap in the histogram on the left hand side now but overall the histogram looks way less skewed.\nIn fact, this somewhat resembles what a histogram of a normally distributed random variable could look like.\nThis is nice because Gaussian variables are something which a lot of statistical techniques can work with best.\n\nThus, working with a logarithmized variable might be helpful in the long run. \nNote that sometimes a variable benefits from being logarithmized but also contains values that are zero.\nTo apply the logarithm anyway, often one then offsets the variable by shifting the variable by 1.\n\nUnfortunately, it may be nice that logarithmized variables are beneficial for statistical techniques and that the histograms are less skewed but the way we achieved that in the above example let's the audience of the visualization somewhat clueless as to what the actual sale prices were.\nSure, if in doubt, one could simply use a calculator to compute $10^{4}$ and $10^{6}$ to get a feeling for the range of the sale prices but of course no one will want to do that.\nThis brings me to my next point.\n\n## Use scale_*_log10()\n\nHonestly, I don't know why but for a long time I have logarithmized data for visualization purposes as above because using `scale_x_log10()` felt somewhat frightening because I did not understand what was going on there.\nTake a look what happens if I add this particular layer to our initial plot instead of logarithmizing manually.\n\n\n::: {.cell}\n\n```{.r .cell-code}\names %>%\n  ggplot(aes(x = sale_price)) +\n  geom_histogram() +\n  scale_x_log10() \n```\n\n::: {.cell-output-display}\n![](01_a_few_ggplot_tips_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nNotice that the overall impression of the picture is the same as with the manually logarithmized plot. \nHowever, the x-axis is now logarithmized as opposed to being linear.\nSo, manual logarithmization of the variable leads to just that: A transformation of the data but the axis in the plot remains linear which is why the labels on that x-axis showed values that needed to be retransformed to its original values.\n\nIn contrast, using `scale_x_log10()` leaves the data as it is but transforms the x-axis.\nIn this case, this new axis is used for binning and counting to compute the histogram.\nTherefore, we can easily see that the majority of the sale prices lie between 100,000 and 300,000.\nOf course, things would be even simpler if the axis labels were not given in scientific notation.\nLuckily, we can easily change that.\n\n## Adjust labels using the scales package\n\nAs its name says, the `scales` package works really well in conjunction with the `scale_*` layers from `ggplot2`.\nIn fact, this can make it somewhat comfortable to quickly adjust axis labels by simply passing a **function** (mind the `()`) from the `scales` package to the `scale_*` layer's argument `labels`.\nHere, we may simply use `label_number()` to get rid of the scientific notation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\names %>%\n  ggplot(aes(x = sale_price)) +\n  geom_histogram() +\n  scale_x_log10(labels = scales::label_number()) \n```\n\n::: {.cell-output-display}\n![](01_a_few_ggplot_tips_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nEven better, `scales` has a lot of functions that are useful for specific units such as dollar or week, month, year (in case you are working with time data whose labels can be a special kind of pain).\n\n\n::: {.cell}\n\n```{.r .cell-code}\names %>%\n  ggplot(aes(x = sale_price)) +\n  geom_histogram() +\n  scale_x_log10(labels = scales::label_dollar()) \n```\n\n::: {.cell-output-display}\n![](01_a_few_ggplot_tips_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nOf course, the same thing works not only for the x-axis scale but for all kinds of other scales too.\nFor instance, if you want to plot the same histogram but oriented vertically, you can simply change the `x`-aesthetic to be the `y`-aesthetic which means that you will need to adjust the `y` scale then.\n\n\n::: {.cell}\n\n```{.r .cell-code}\names %>%\n  ggplot(aes(y = sale_price)) +\n  geom_histogram() +\n  scale_y_log10(labels = scales::label_dollar()) \n```\n\n::: {.cell-output-display}\n![](01_a_few_ggplot_tips_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nIn retrospect, it is really easy to adjust the axis with `scale_*` layers and the `scales` package and I really do not know why I hesitated in the past to use these functions.\nI guess adding another layer to the plot felt somewhat harder and slower than brute-forcing my way through the transformation.\nBut believe me, in the long run this takes up way more of your time (especially if you want to interpret your plot later on).\n\nI hope that you enjoyed this post and if you did, feel free to hit the applause button below.\nIn any case, I look forward to see you in the next installment of this series.\n\n[^motivation-R]: Fun fact: Actually I somehow disliked R at first (to be fair I was not a frequent user of R back then anyway) but `ggplot2` changed that and motivated me to do more in R. \n",
    "supporting": [
      "01_a_few_ggplot_tips_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}