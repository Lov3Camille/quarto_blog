---
title: 'LeetCode 周赛记录'
date: '2022-12-18'
categories: ['cpp', 'algorithms', 'LeetCode']
description: ' '
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

## 第324场周赛

### 1. 统计相似字符串对的数目

给你一个下标从 0 开始的字符串数组 words 。

如果两个字符串由相同的字符组成，则认为这两个字符串 相似 。

例如，"abca" 和 "cba" 相似，因为它们都由字符 'a'、'b'、'c' 组成。
然而，"abacba" 和 "bcfd" 不相似，因为它们不是相同字符组成的。
请你找出满足字符串 words[i] 和 words[j] 相似的下标对 (i, j) ，并返回下标对的数目，其中 0 <= i < j <= word.length - 1 。

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <bits/stdc++.h>

using namespace std;

class Solution {
public:
    int similarPairs(vector<string>& words) {
        int n = words.size();
        int ans = 0;
        unordered_map<string, int> mp;
        for (int i = 0; i < n; i++) {
            string s = words[i];
            sort(s.begin(), s.end());
            s.erase(unique(s.begin(), s.end()), s.end());
            ans += mp[s];
            mp[s]++;
        }
        return ans;
    }
};
```
### 2. 使用质因数之和替换后可以取到的最小值

给你一个正整数 n 。

请你将 n 的值替换为 n 的 质因数 之和，重复这一过程。

注意，如果 n 能够被某个质因数多次整除，则在求和时，应当包含这个质因数同样次数。
返回 n 可以取到的最小值。

```cpp
#include <iostream>     
#include <algorithm>    

using namespace std;

class Solution {
public:
    // you need to prove that it is a monotonically decreasing function.
    int work(int n) {
        int res = 0;

        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) {
                while (n % i == 0) n /= i, res += i;
            }
        }
        if (n > 1) res += n;
        return res;
    }

    int smallestValue(int n) {
        while (true) {
            int next = work(n);
            if (next == n) break;
            n = next;
        }
        return n;
    }
};
```

## 第327场周赛

### 1. 正整数和负整数的最大计数

给你一个按 非递减顺序 排列的数组 nums ，返回正整数数目和负整数数目中的最大值。

换句话讲，如果 nums 中正整数的数目是 pos ，而负整数的数目是 neg ，返回 pos 和 neg二者中的最大值。
注意：0 既不是正整数也不是负整数。

```cpp
#include <vector>

using namespace std;

class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int neg = 0;
        int pos = 0;

        for (auto& num : nums) {
            if (num < 0) {
                neg++;
            } else if (num > 0) {
                pos++;
            }
        }

        return max(neg, pos);
    }
};
```

### 2. 执行 K 次操作后的最大分数

给你一个下标从 0 开始的整数数组 nums 和一个整数 k 。你的 起始分数 为 0 。

在一步 操作 中：

选出一个满足 0 <= i < nums.length 的下标 i ，
将你的 分数 增加 nums[i] ，并且
将 nums[i] 替换为 ceil(nums[i] / 3) 。
返回在 恰好 执行 k 次操作后，你可能获得的最大分数。

向上取整函数 ceil(val) 的结果是大于或等于 val 的最小整数。

```cpp
#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    long long maxKelements(vector<int>& nums, int k) {
        priority_queue<int> heap;
        for (auto& num : nums) {
            heap.push(num);
        }
        long long sum = 0;
        for (int i = 0; i < k; i++) {
            int max = heap.top();
            sum += max;
            heap.pop();
            heap.push((max + 2) / 3); // don't use ceil() here;
        }
        return sum;
    }
};
```