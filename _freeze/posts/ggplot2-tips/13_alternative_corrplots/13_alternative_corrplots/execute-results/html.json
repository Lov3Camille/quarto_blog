{
  "hash": "30cfeb7aba0ccd0488951ab0c9d6e6c9",
  "result": {
    "markdown": "---\ntitle: \"Alternative ways to visualize correlations\"\ndate: '2022-08-01'\ncategories: [\"Visualization\"]\ndescription: \"We explore alternative correlation matrix plots.\"\nexecute: \n  message: false\n  warning: false\n  collapse: false\neditor_options: \n  chunk_output_type: console\n  markdown: \n    wrap: 80\n---\n\n::: {.cell}\n\n:::\n\n\nI recently saw a nice thread [on Twitter](https://twitter.com/levikul09/status/1547184438492049409?s=20&t=kex3HN9QijZs1eiKiD2xvQ) and I wanted to chime in.\nThe author of said thread suggests to use bar charts instead of colored matrices to visualize correlations.\nLet's try that with `{ggplot2}`.\nAdditionally, I will suggest a few ideas of my own.\n\n## Using geom_tile() to visualize correlation matrices\n\nLet's start with the basic plot, i.e. we \n\n- pick a data set, \n- compute correlations between variables\n- visualize correlations with `geom_tile()`.\n\nOur data set will be the Ames housing data set from `{modeldata}`.\nSince this data set contains many variables, we'll just pick a few from them.\nOtherwise, we'll have to work hard to visualize the correlations of MANY variables.\nTechnically, that's possible with large images but it won't give us any more insights\ninto the visualization process.\n\nAlso, for a real visual, we should probably relabel the variable names into something \nhuman-readable.\nBut for simplicity, I skip that step in this demo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndata(ames, package = 'modeldata')\n\names_numeric <- ames %>% \n  janitor::clean_names() %>% \n  select(where(is.numeric)) %>% \n  select(1:10)\names_numeric %>% print(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,930 × 10\n  lot_frontage lot_area year_b…¹ year_…² mas_v…³ bsmt_…⁴ bsmt_…⁵ bsmt_…⁶ total…⁷\n         <dbl>    <int>    <int>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1          141    31770     1960    1960     112       2       0     441    1080\n2           80    11622     1961    1961       0       6     144     270     882\n3           81    14267     1958    1958     108       1       0     406    1329\n4           93    11160     1968    1968       0       1       0    1045    2110\n5           74    13830     1997    1998       0       3       0     137     928\n# … with 2,925 more rows, 1 more variable: first_flr_sf <int>, and abbreviated\n#   variable names ¹​year_built, ²​year_remod_add, ³​mas_vnr_area, ⁴​bsmt_fin_sf_1,\n#   ⁵​bsmt_fin_sf_2, ⁶​bsmt_unf_sf, ⁷​total_bsmt_sf\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nNext, we're going to compute the correlation matrix with `cor()`.\nThen, we make the resulting matrix into a tibble (keep the row names) and then\npivot the tibble to rearrange the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrelations <- cor(ames_numeric) %>% \n  as_tibble(rownames = 'variable1') %>% \n  pivot_longer(cols = -1, names_to = 'variable2', values_to = 'correlation')\names_numeric %>% print(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,930 × 10\n  lot_frontage lot_area year_b…¹ year_…² mas_v…³ bsmt_…⁴ bsmt_…⁵ bsmt_…⁶ total…⁷\n         <dbl>    <int>    <int>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1          141    31770     1960    1960     112       2       0     441    1080\n2           80    11622     1961    1961       0       6     144     270     882\n3           81    14267     1958    1958     108       1       0     406    1329\n4           93    11160     1968    1968       0       1       0    1045    2110\n5           74    13830     1997    1998       0       3       0     137     928\n# … with 2,925 more rows, 1 more variable: first_flr_sf <int>, and abbreviated\n#   variable names ¹​year_built, ²​year_remod_add, ³​mas_vnr_area, ⁴​bsmt_fin_sf_1,\n#   ⁵​bsmt_fin_sf_2, ⁶​bsmt_unf_sf, ⁷​total_bsmt_sf\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nNow, this is a tidy format.\nIt's majestic and `{ggplot2}` will love the format.\nNow, visualizing the correlation matrix is only a matter of using `geom_tile()`.\nUnfortunately, we will have to tilt the labels of the x-axis.\nI usually dislike this move but with this visual I don't think there much we can do about it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrelations %>% \n  ggplot(aes(variable1, variable2, fill = correlation)) +\n  geom_tile(col = 'white') +\n  labs(x = element_blank(), y = element_blank()) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](13_alternative_corrplots_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Use geom_col() to visualize correlation matrices \n\nNext, let us try visualizing the correlations with bars instead of colored tiles.\nFor that, we need to create a new variable that describes the pairs of all variables.\n\nNotice that we do not want to use the same pair twice.\nThis can happen if we use \"both\" pairs `A + B` and `B + A`.\nTo avoid that, I have set all entries of the correlation matrix that are not in the lower triangle of the matrix to zero.\nHere's how a sub-matrix looks so that you know how our matrix looks in principle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntriangle_correlations <- cor(ames_numeric) * lower.tri(cor(ames_numeric))\ntriangle_correlations[1:4, 1:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               lot_frontage   lot_area year_built year_remod_add\nlot_frontage     0.00000000 0.00000000  0.0000000              0\nlot_area         0.13686214 0.00000000  0.0000000              0\nyear_built       0.02613050 0.02325850  0.0000000              0\nyear_remod_add   0.06950923 0.02168222  0.6120953              0\n```\n:::\n:::\n\n\nNow we can \n\n- transform the matrix to a tibble like before\n- filter out zero correlations (to avoid duplicate pairs)\n- construct pair labels\n- order pairs by their correlation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrelations <- triangle_correlations %>% \n  as_tibble(rownames = 'variable1') %>% \n  pivot_longer(cols = -1, names_to = 'variable2', values_to = 'correlation') %>% \n  filter(abs(correlation) > 0) %>% \n  mutate(\n    pair = paste(variable1, variable2, sep = ' + '),\n    pair = fct_reorder(pair, correlation)\n  )\ncorrelations %>% print(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45 × 4\n  variable1      variable2    correlation pair                         \n  <chr>          <chr>              <dbl> <fct>                        \n1 lot_area       lot_frontage      0.137  lot_area + lot_frontage      \n2 year_built     lot_frontage      0.0261 year_built + lot_frontage    \n3 year_built     lot_area          0.0233 year_built + lot_area        \n4 year_remod_add lot_frontage      0.0695 year_remod_add + lot_frontage\n5 year_remod_add lot_area          0.0217 year_remod_add + lot_area    \n# … with 40 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\nThis is easy to visualize with `geom_col()`.\nNotice that I do not use different colors for the bars.\nThat's because I think that it's unnecessary in this visual.\nIn the matrix plot, the color gradient served a purpose.\nHere, this purpose is negligible.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_col <- viridisLite::mako(3)[2]\ncorrelations %>% \n  ggplot(aes(x = correlation, y = pair)) + \n  geom_col(fill = my_col) +\n  labs(x = 'Correlation')\n```\n\n::: {.cell-output-display}\n![](13_alternative_corrplots_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n### Move labels to bars\n\nI think there is some room for improvement in the previous plot.\nFor starters, I am not so happy that the reader always has to follow a line from\nlabel to bar.\nThat's why I would move the labels next to the bars.\nThen, we can also get rid of many grid lines.\nWhile we're at it, let's make the remaining grid lines lighter.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnudge_x <- 0.01\ntext_size <- 2.5\ngrid_color <-  'grey80'\ntext_color <- 'grey40'\n\ncorrelations  %>% \n  ggplot(aes(y = pair, x = correlation)) +\n  geom_col(fill = my_col) +\n  geom_text(\n    aes(x = 0, label = pair),\n    size = text_size,\n    # Change horizontal justification based on correlation value\n    # This moves labels to left or right of the bars\n    hjust = if_else(correlations$correlation > 0, 1, 0),\n    # Same trick just for moving the labels a tiny bit\n    nudge_x = if_else(correlations$correlation > 0, -nudge_x, nudge_x)\n  ) +\n  scale_y_discrete(breaks = NULL) +\n  labs(x = 'Correlation', y = element_blank()) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_line(size = 0.25, linetype = 2, color = grid_color)\n  )\n```\n\n::: {.cell-output-display}\n![](13_alternative_corrplots_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Use lollipops to visualize correlation matrices\n\nBar charts use quite a lot of ink.\nAnd I think in this case we can do with a little bit less ink.\nInstead of `geom_col()`, let us use `geom_seqment()` and `geom_point()`.\nThat's how you build a lollipop chart!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsegment_size <- 0.75\n\ncorrelations  %>% \n  ggplot(aes(y = pair, x = correlation)) +\n  geom_point(col = my_col) +\n  geom_segment(aes(xend = 0, yend = pair), col = my_col, size = segment_size) +\n  geom_text(\n    aes(x = 0, label = pair),\n    size = text_size,\n    hjust = if_else(correlations$correlation > 0, 1, 0),\n    nudge_x = if_else(correlations$correlation > 0, -nudge_x, nudge_x)\n  ) +\n  scale_y_discrete(breaks = NULL) +\n  labs(x = 'Correlation', y = element_blank()) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_line(size = 0.25, linetype = 2, color = grid_color)\n  )\n```\n\n::: {.cell-output-display}\n![](13_alternative_corrplots_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n### Highlight specific variable pairs\n\nFinally, let me give one more reason why I didn't use a color gradient so far.\nThat's because I can now highlight **selected** variable pairs.\n\nI think the text labels clutter the image quite a lot.\nIf we need to show all the variables this cannot be avoided.\nBut what if we only care about certain variables or certain relationships?\nThen, we can highlight these and grey out everything else.\n\nFor demo purposes, I have randomly sampled a few variable pairs.\nLet's highlight these.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhighlight <- correlations %>% \n  slice_sample(n = 5) %>% \n  pull(pair)\n\nhighlight_color <- thematic::okabe_ito(6)[1]\nunhighlight_color <- 'grey40'\n\ncorrelations %>% \n  ggplot(aes(y = pair, x = correlation)) +\n  geom_point(\n    col = if_else(correlations$pair %in% highlight, highlight_color, my_col)\n  ) +\n  geom_segment(\n    aes(xend = 0, yend = pair), \n    col = if_else(correlations$pair %in% highlight, highlight_color, my_col),\n    size = if_else(correlations$pair %in% highlight, segment_size + 0.3, segment_size)\n  ) +\n  geom_text(\n    aes(x = 0, label = pair),\n    col = if_else(correlations$pair %in% highlight, highlight_color, unhighlight_color),\n    fontface = if_else(correlations$pair %in% highlight, 'bold', 'plain'),\n    hjust = if_else(correlations$correlation > 0, 1, 0),\n    nudge_x = if_else(correlations$correlation > 0, -nudge_x, nudge_x),\n    size = text_size\n  ) +\n  scale_y_discrete(breaks = NULL) +\n  labs(x = 'Correlation', y = element_blank()) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_line(size = 0.25, linetype = 2, color = grid_color)\n  )\n```\n\n::: {.cell-output-display}\n![](13_alternative_corrplots_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Conclusion\n\nI like to think that the last plot is a neat way to visualize correlations.\nWhat do you think? \nFeel free to let me know in the comments.\n\nAlso, if you have any questions, let me know via mail or in the comments.\nAnd don't forget to stay in touch via my\n[Newsletter](https://alberts-newsletter.beehiiv.com/subscribe),\n[Twitter](https://twitter.com/rappa753) or my [RSS\nfeed](https://albert-rapp.de/blog.xml). \nSee you next time!",
    "supporting": [
      "13_alternative_corrplots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}