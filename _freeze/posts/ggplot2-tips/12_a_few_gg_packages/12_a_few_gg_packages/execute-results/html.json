{
  "hash": "50cc2ecb41a7cffecd87aadb5c402cd5",
  "result": {
    "markdown": "---\ntitle: \"5 hidden gems from gg-packages to level up your dataviz game\"\ndate: '2022-07-27'\ncategories: [\"Visualization\"]\ndescription: \"This blog post is a quick one. It highlights a few hidden gems (functions) from well-known or not so well-known packages.\"\nexecute: \n  message: false\n  warning: false\n  collapse: false\neditor_options: \n  chunk_output_type: console\n  markdown: \n    wrap: 80\n---\n\n::: {.cell}\n\n:::\n\n\nThere are incredibly many gg-packages that extend the power of `{ggplot2}`.\nMany of these packages fulfill specific purposes.\nAnd to achieve their goals, most packages contain helper functions that act in the background.\nThus, the helpers get no spotlight.\nThis is unfortunate because some of them are superb.\n\nThat's why we'll do things differently today!\nToday is about those amazing helper functions that deserve to be in the spotlight.\nI call these functions hidden gems.\nLet's go!\n\n## Bump charts\n\nThe `{ggbump}` package is designed to create bump charts (bump is a funny sound. Try saying it).\nThis type of chart is especially useful to show rankings over time.\nOn Twitter, you can find many of these.\nHere's one from Stephan Teodosescu.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">For week 28 of <a href=\"https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#TidyTuesday</a> I looked at flights ‚úàÔ∏è by country in Europe. <br><br>I wanted to use the patchwork package to combine a plot of the top ranked European countries (inspired by <a href=\"https://twitter.com/rappa753?ref_src=twsrc%5Etfw\">@rappa753</a>&#39;s viz) and seasonality of flights. <br><br>Code: <a href=\"https://t.co/FRkq39YMm5\">https://t.co/FRkq39YMm5</a><br><br> <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> <a href=\"https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw\">#dataviz</a> <a href=\"https://t.co/zHErTk0lwd\">pic.twitter.com/zHErTk0lwd</a></p>&mdash; Stephan Teodosescu (@steodosescu) <a href=\"https://twitter.com/steodosescu/status/1549065989630832642?ref_src=twsrc%5Etfw\">July 18, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n\nIf you [take a look at Stephan's code](https://github.com/steodose/Tidy-Tuesday/blob/master/Week%2028_2022.R), you will notice that it uses `{ggbump}`.\nAnd if you look even closer, you will notice that most of the heavy lifting (after computing the ranking) is done by `geom_bump()`.\nSo, `geom_bump()` is the star of this package.\nAnd it's really easy to use.\nHere's an example from its [docs](https://www.rdocumentation.org/packages/ggbump/versions/0.1.0/topics/geom_bump).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndf <- data.frame(country = c(\n  \"India\", \"India\", \"India\",\n  \"Sweden\", \"Sweden\", \"Sweden\",\n  \"Germany\", \"Germany\", \"Germany\",\n  \"Finland\", \"Finland\", \"Finland\"),\nyear = c(2011, 2012, 2013,\n2011, 2012, 2013,\n2011, 2012, 2013,\n2011, 2012, 2013),\nrank = c(4, 2, 2, 3, 1, 4, 2, 3, 1, 1, 4, 3))\n\n# USE THE DEV VERSION FROM GITHUB\n# INSTALL WITH devtools::install_github(\"davidsjoberg/ggbump\")\nggplot(df, aes(year, rank, color = country)) +\n  geom_point(size = 10) +\n  ggbump::geom_bump(size = 2)\n```\n\n::: {.cell-output-display}\n![](12_a_few_gg_packages_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nBonus for bump charts: You can spice up your visual with images. Leverage `{ggflags}` to plot flags instead of points.\nHere's an example of that (with code in thread) from Rosie Griffiths.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Finally got around to doing my first <a href=\"https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#TidyTuesday</a> <br>üìä‚úàÔ∏è<a href=\"https://twitter.com/hashtag/RStats?src=hash&amp;ref_src=twsrc%5Etfw\">#RStats</a> <a href=\"https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw\">#dataviz</a> <a href=\"https://twitter.com/hashtag/ggplot?src=hash&amp;ref_src=twsrc%5Etfw\">#ggplot</a> <a href=\"https://twitter.com/hashtag/Datavisualization?src=hash&amp;ref_src=twsrc%5Etfw\">#Datavisualization</a> <a href=\"https://t.co/UIHvmlgHeB\">pic.twitter.com/UIHvmlgHeB</a></p>&mdash; Dr. Rosie Griffiths (@Rosie_Griffiths) <a href=\"https://twitter.com/Rosie_Griffiths/status/1549722543984107527?ref_src=twsrc%5Etfw\">July 20, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n\nBut let's not waste any more time talking about the star of the package.\nToday is about the underrated helpers.\nIn this case, that award goes to `geom_sigmoid()`.\n\nThis function gives you the bumps of the bump charts.\nAnd their smoothness looks oddly satisfying.\nCheck out how Georgios Karamanis used them for a stunning visual.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">For this week&#39;s <a href=\"https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#TidyTuesday</a> I plotted the arrivals to Greek airports in 2022 compared to 2019. <br><br>code: <a href=\"https://t.co/84f65QoFZW\">https://t.co/84f65QoFZW</a><a href=\"https://twitter.com/hashtag/Rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#Rstats</a> <a href=\"https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw\">#dataviz</a> <a href=\"https://t.co/BCWJC1YT6N\">pic.twitter.com/BCWJC1YT6N</a></p>&mdash; Georgios Karamanis (@geokaramanis) <a href=\"https://twitter.com/geokaramanis/status/1547916608118480896?ref_src=twsrc%5Etfw\">July 15, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n\nSo this function packs a punch on its own.\nThat's hidden gem material right there.\nBut wait!\nThere is more.\n\nDigging down even further, notice that `geom_sigmoid()` uses another helper called `sigmoid()`.\nThis is the exact same function that I used to build a ribbon bump chart.\nYou may have seen it on Twitter.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">As always, there&#39;s a <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> package for every occasion.<br><br>üîÄ With {ggbump}, bump charts (for rankings) are easily created. <br>üë∑üèΩ With a little bit of work, one can transform them to ribbon bump charts.<br><br>Here&#39;s a demo for this week&#39;s <a href=\"https://twitter.com/hashtag/tidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#tidyTuesday</a>.<br><br>Code: <a href=\"https://t.co/PTDbhq2rbH\">https://t.co/PTDbhq2rbH</a> <a href=\"https://t.co/PBgkWvjC4S\">pic.twitter.com/PBgkWvjC4S</a></p>&mdash; Albert Rapp (@rappa753) <a href=\"https://twitter.com/rappa753/status/1548335653909250048?ref_src=twsrc%5Etfw\">July 16, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n\nThe crucial part in this visual's [code](https://github.com/AlbertRapp/PublicTidyTuesday/blob/main/2022_w28_euroflights/2022_w28_euroflights.qmd) has been computing the points of the the sigmoidal curves between rectangles.\nAfter that, it's a piece of cake.\nGood ol' `geom_ribbon()` can handle the rest for us.\n\nTo compute the points, `sigmoid()` was invaluable.\nAll it needs are the start and end coordinates via `x_from`, `x_to`, `y_from` and `y_to`.\nHere's the crucial step in my code (line 8).\nNote that I have used a bit of [functional programming magic](../09_functional_programming_ggplot/09_functional_programming_ggplot.html) to compute the curves for each year.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nlower_bounds <- state_data %>% \n    select(year, percentage_flights_lower) %>% \n    mutate(\n      ## Coordinates of left resp. right corner of rectangles\n      x_from = year + bar_width, \n      x_to = year + 1 - bar_width,\n      y_from = percentage_flights_lower + margin_between_ribbons,\n      y_to = c(percentage_flights_lower[-1], percentage_flights_lower[7]) + margin_between_ribbons,\n      ## Compute sigmoidal function for each year\n      sigmoid = pmap(list(x_from, x_to, y_from, y_to), sigmoid, n = n_points, smooth = 8)\n    ) \n```\n:::\n\n\n\n## Chicklet charts\n\nAnother great package is `{ggchicklet}`.\nIts main purpose is to generate chicklet charts.\nYou can think of them as stacked rounded bar charts.\nHere's a great example from Dan Oehm.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#TidyTuesday</a> week 29: Technology üë®‚Äçüíª<br><br>A lot of things to look at regarding technology adoption. Chose to take a quick look at Aus electricity production by type. Our reliance on fossil fuels is embarrassing but hopeful with the new govt...<a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> <a href=\"https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw\">#dataviz</a> <a href=\"https://twitter.com/hashtag/DataVisualization?src=hash&amp;ref_src=twsrc%5Etfw\">#DataVisualization</a> <a href=\"https://t.co/x5YcCOP2Yr\">pic.twitter.com/x5YcCOP2Yr</a></p>&mdash; Dan Oehm üå≤‚õ∞Ô∏è (@danoehm) <a href=\"https://twitter.com/danoehm/status/1550412816795914240?ref_src=twsrc%5Etfw\">July 22, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\nBut this is not the only great thing `{ggchicklet}` can do.\nOtherwise, why would we talk about it here?\nWith `{ggchicklet}` you can also generate arbitrary rounded rectangles (not necessarily stacked ones).\nYou just need to access `ggchicklet:::geom_rrect()` (three dots! This is really HIDDEN).\n\n\nIt works just like `ggplot2::geom_rect()` but add another aesthetic to include the radius `r` of the corners.\nYou can find an in-depth explanation in [one of my old blog posts](../11_rounded_rectangles/11_rounded_rectangles.html).\nOr you can find a summary in the following thread.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">By itself, a standard <a href=\"https://twitter.com/hashtag/ggplot2?src=hash&amp;ref_src=twsrc%5Etfw\">#ggplot2</a> output can rarely convince anyone. <br><br>You need a story to communicate your message. And for effective storytelling, your plot has to be customized.<br><br>My newest blog post shows you how. <br><br>Find it at <a href=\"https://t.co/y32vlY3YMh\">https://t.co/y32vlY3YMh</a><a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> <a href=\"https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw\">#dataviz</a> üßµüßµ‚¨áÔ∏è <a href=\"https://t.co/roE17jN3gZ\">pic.twitter.com/roE17jN3gZ</a></p>&mdash; Albert Rapp (@rappa753) <a href=\"https://twitter.com/rappa753/status/1521882038688694277?ref_src=twsrc%5Etfw\">May 4, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n\n## Camcorder\n\nOriginally, [`{camcorder}`](https://github.com/thebioengineer/camcorder) is intended to be used for recording a data viz process.\nBasically, you can record all of your intermediate plots with `camcorder::gg_record()`.\nAfterwards, you can you can generate a gif from these recordings (also an in-built feature).\nFor example, you can find a gif on the creation Georgios Karamanis' earlier plot [on Twitter](https://twitter.com/geokaramanis/status/1548900174432460801).\n\nSo, this is the main purpose of `{camcorder}`.\nBut the reason I list this package here is because it can be used off-label.\nI use `{camcorder}` for ALL my visualizations.\nBut I rarely use it to build a gif.\n\nIn my opinion, the REAL advantage of using `camcorder::gg_record()` is that it fixes your canvas size.\nThis mean that whenever you generate a plot, it is saved as a png-file with predetermined dimensions and the resulting file is displayed in the **Viewer** window in RStudio (not the **Plots** window).\n\n\nWhy is this helpful? \nWell, if you have ever created a custom plot and exported it with `ggsave()`, then you already know what can go wrong.\nSuddenly, all of your sizes can be wrong and your plot can look like a mess.\n\nThat's because you usually hard-code sizes, e.g. `14pt`.\nBut `pt` is not a relative unit!\nSo it will hardly give a f***, whether you export a 10x10-image or a 20x20-image. \nIf you fix `14pt` you will get that. \nRegardless of canvas size.\nFor more information on the theory behind that take a look at [Christiphe Nicault's blog post](https://www.christophenicault.com/post/understand_size_dimension_ggplot2/).\n\nThe solution is to start with a fixed canvas size.\nOnly then can you safely hard-code.\nThat's why at the start of working of every visualization I call something like\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncamcorder::gg_record(\n  dir = 'img', dpi = 300, width = 16, height = 9, units = 'cm'\n)\n```\n:::\n\n\nThis will save all plots that I generate in a directory called `dir`.\nI can still resize my picture afterwards.\nBut this is easier to do than guessing \"good\" dimensions with `ggsave()`.\n\nBeware though that some packages like `{patchwork}` or `{ggtext}` can mess with `{camcorder}`.\nSo, be sure to call `gg_record()` **after** you have imported them. \nAlternatively, just call `gg_record()` again if you add one the these packages only later.\nFinally, if you want to use `{camcorder}` in conjunction with `{showtext}`, then be sure to let  `{showtext}` know what dpi value you chose when calling `gg_record()`.\nThis can be done via\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshowtext::showtext_opts(dpi = 300)\n```\n:::\n\n\nOtherwise, your texts may look weird.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Note to self and that one person that was asking about weird text spacing last <a href=\"https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#TidyTuesday</a> (really couldn&#39;t find your tweet anymore).<br><br>Same problem just hit me and I solved it by setting the showtext dpi properly to e.g 300 with<br><br>showtext_opts(dpi = 300)<br><br>Some ressources below‚¨áÔ∏è <a href=\"https://t.co/64OmubG09j\">pic.twitter.com/64OmubG09j</a></p>&mdash; Albert Rapp (@rappa753) <a href=\"https://twitter.com/rappa753/status/1501230840655003650?ref_src=twsrc%5Etfw\">March 8, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n## Arc bars\n\n`{ggforce}` includes a great deal of functions for data visualization.\nIn fact, that's why I've already displayed some of them in a [previous blog post](../05_ggforce_examples/05_ggforce_examples.html).\nMany of these functions don't follow a specific theme and that's why it's hard to keep track of them.\n\nIn an effort to help my memory, let me teach you one function from `{ggforce}` I wish I had known a couple of weeks ago.\nMaybe you have seen the gauge plot I have created recently.\nHere's a reminder for you.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I used the <a href=\"https://twitter.com/hashtag/tidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#tidyTuesday</a> pay gap data from last week to practice<br><br>1 building gauge charts with <a href=\"https://twitter.com/hashtag/ggplot2?src=hash&amp;ref_src=twsrc%5Etfw\">#ggplot2</a> manually <br>2 adding a custom how-to-read legend with patchwork<br><br>Code : <a href=\"https://t.co/4dkXbOWYoz\">https://t.co/4dkXbOWYoz</a><a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> <a href=\"https://t.co/7ZkpzmtgLz\">pic.twitter.com/7ZkpzmtgLz</a></p>&mdash; Albert Rapp (@rappa753) <a href=\"https://twitter.com/rappa753/status/1544663149760110592?ref_src=twsrc%5Etfw\">July 6, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\n\nDrawing these gauges was painful. \nI did everything by hand, i.e. I computed the circles' coordinates via [Polar coordinates](https://en.wikipedia.org/wiki/Polar_coordinate_system#Converting_between_polar_and_Cartesian_coordinates).\nIn hindsight, this was waaaay too much effort.\n\nJust two weeks later, Nicola Rennie also built a gauge plot.\nBut she was clever.\nShe used `geom_arc_bar()` from `{ggforce}`.\nHere's her tweet.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Data from <a href=\"https://twitter.com/nberpubs?ref_src=twsrc%5Etfw\">@nberpubs</a> for <a href=\"https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw\">#TidyTuesday</a> this week! I looked at changes in measles immunisations rates between 1980 and 2010. Used {ggforce} for some experimental double gauge plots!<br><br>Code: <a href=\"https://t.co/92H6g0iF0J\">https://t.co/92H6g0iF0J</a><a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> <a href=\"https://twitter.com/hashtag/DataViz?src=hash&amp;ref_src=twsrc%5Etfw\">#DataViz</a> <a href=\"https://t.co/fqC4kJbkUT\">pic.twitter.com/fqC4kJbkUT</a></p>&mdash; Nicola Rennie (@nrennie35) <a href=\"https://twitter.com/nrennie35/status/1549438413794861064?ref_src=twsrc%5Etfw\">July 19, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n\nWith `geom_arc_bar()`, it is easy to draw any curved bar.\nGod forbid, you can even create a pie chart (see also [Are food plots always foul?](https://alberts-newsletter.beehiiv.com/p/truthful-tidytuesday-contributions)).\nCheck out the cool examples from the [docs](https://ggforce.data-imaginist.com/reference/geom_arc_bar.html).\n\n::: panel-tabset\n\n### Hard edges\n\n::: {.cell}\n\n```{.r .cell-code}\narcs <- data.frame(\n  start = seq(0, 2 * pi, length.out = 11)[-11],\n  end = seq(0, 2 * pi, length.out = 11)[-1],\n  r = rep(1:2, 5)\n)\n\n# Behold the arcs\nggplot(arcs) +\n  ggforce::geom_arc_bar(aes(x0 = 0, y0 = 0, r0 = r - 1, r = r, start = start,\n                   end = end, fill = r))\n```\n\n::: {.cell-output-display}\n![](12_a_few_gg_packages_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Rounded edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# geom_arc_bar uses geom_shape to draw the arcs, so you have all the\n# possibilities of that as well, e.g. rounding of corners\nggplot(arcs) +\n  ggforce::geom_arc_bar(aes(x0 = 0, y0 = 0, r0 = r - 1, r = r, start = start,\n                   end = end, fill = r), radius = unit(4, 'mm'))\n```\n\n::: {.cell-output-display}\n![](12_a_few_gg_packages_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### Pie example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If you got values for a pie chart, use stat_pie\nstates <- c(\n  'eaten', \"eaten but said you didn\\'t\", 'cat took it', 'for tonight',\n  'will decompose slowly'\n)\npie <- data.frame(\n  state = factor(rep(states, 2), levels = states),\n  type = rep(c('Pie', 'Donut'), each = 5),\n  r0 = rep(c(0, 0.8), each = 5),\n  focus = rep(c(0.2, 0, 0, 0, 0), 2),\n  amount = c(4, 3, 1, 1.5, 6, 6, 1, 2, 3, 2),\n  stringsAsFactors = FALSE\n)\n\n# Look at the cakes\nggplot() + \n  ggforce::geom_arc_bar(\n    data = pie, stat = 'pie',\n    aes(\n      x0 = 0, y0 = 0, r0 = r0, r = 1, amount = amount,\n      fill = state, explode = focus\n    )\n  ) +\n  facet_wrap(~type, ncol = 1) +\n  coord_fixed() +\n  ggforce::theme_no_axes() +\n  scale_fill_brewer('', type = 'qual')\n```\n\n::: {.cell-output-display}\n![](12_a_few_gg_packages_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n\n## Patchwork\n\nI have no doubt that you have already heard about `{patchwork}`.\nThis package makes compositing plots super easy.\nIf you haven't heard about `{patchwork}`, here's a super quick demo.\nAlternatively, you can check out my [blog post about it](../04_arranging_plots/04_arranging_plots.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\np <- ggplot(mpg) + geom_jitter(aes(cty, hwy))\np + p # Add for side-by-side\n```\n\n::: {.cell-output-display}\n![](12_a_few_gg_packages_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\np / p # Divide for stacking\n```\n\n::: {.cell-output-display}\n![](12_a_few_gg_packages_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n\nOf course, there's more to `{patchwork}` than that.\nLet me show you one more overlooked function.\nThis function is called `plot_spacer()`.\nIt's great when you need `w h i t e   s p a c e`. \n\nThere's really no need to cover every inch of your plot with ink.\nActually, white space can give your visuals some room to breathe in.\nAnd that can make your visual so much more powerful.\nTry that next time you use assemble plots with `{patchwork}`.\nHere's how `plot_spacer()` works.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + plot_spacer() + p +\n  plot_layout(widths = c(0.4, 0.3, 0.4))\n```\n\n::: {.cell-output-display}\n![](12_a_few_gg_packages_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Closing\n\nAlright, this concludes our short tour of hidden gems. \nI hope you liked them.\nOf course, the gg-ecosystem offers SO MUCH more. \nTo find more packages, you can check out the [extension library](https://exts.ggplot2.tidyverse.org/gallery/).\n\nIf you have any questions, let me know via mail or in the comments.\nAnd don't forget to stay in touch via my\n[Newsletter](https://alberts-newsletter.beehiiv.com/subscribe),\n[Twitter](https://twitter.com/rappa753) or my [RSS\nfeed](https://albert-rapp.de/blog.xml). \nSee you next time!\n\n",
    "supporting": [
      "12_a_few_gg_packages_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}