{
  "hash": "c7557c19c415d4602b82da4bc0aebcf1",
  "result": {
    "markdown": "---\ntitle: 'How to use Fonts and Icons in ggplot'\ndate: '2022-03-04'\ncategories: [\"Visualization\"]\ndescription: \"This is a short tutorial on how to import fonts and icons in R using the showtext package.\"\nexecute: \n  message: false\n  warning: false\n  collapse: false\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\nFor some reason, using other than the default font in plots has been a major problem for me in R.\nSupposedly, one can use the `extrafont` package to manage all of that but I found it too cumbersome.\nInstead, I found out that the `showtext` package can make my life easier.\n\nEven though working with text in plot is not yet completely free of troubles, `showtext` has made many things easier.\nNow, I can finally choose fonts freely and even use icons.\nThis blogposts gives you a how-to so that you can do that too.\n\n## Import and Use Fonts with showtext\n\nA great source for fonts is [Google's font page](https://fonts.google.com/).\nWhat is great abut this page is that it can display texts in many different fonts.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Screenshot from fonts.google.com](google-fonts.png){width=608}\n:::\n:::\n\n\nOnce we found a nice font, we can use its name to make it available within R.\nThis is done with `showtext`'s helpful `font_add_google()` function.\nLet's import a couple of random fonts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Packages that we will use in this post\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(gghighlight)\n\n# Import fonts\n# First argument = google name, \n# Secont name = font name in R\nfont_add_google('Lora', 'lora')\nfont_add_google('Lobster', 'lobster')\nfont_add_google('Anton', 'anton')\nfont_add_google('Fira Sans', 'firasans')\nfont_add_google('Syne Mono', 'syne')\n\n# Important step to enable showtext font rendering!\nshowtext_auto()\n```\n:::\n\n\nNotice that we have also used `showtext_auto()`.\nThis is necessary for `showtext` to take over the show. \nOtherwise, the new fonts would not be usable.\nNow, let's take a look at our new fonts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntib <- tibble(\n  family = c('firasans', 'lora', 'lobster', 'anton', 'syne'),\n  x = 0,\n  y = seq(0.0, 1, length.out = 5),\n  label = 'Showtext shows text. Wow. What an insight.'\n)\n\ntib %>%\n  ggplot(aes(x, y, label = label)) +\n  geom_text(family = tib$family, size = 13, hjust = 0, col = 'dodgerblue4') +\n  coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](08_fonts_and_icons_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nYou may wonder why we have used `coord_cartesian()` here. \nWe did this in order to ensure that the x-axis is not centered at 0 and our example texts won't be outside of the plot.\nPersonally, I find this somewhat tedious but this can't be helped, I guess.\nWith text elements we always run at the risk of writing outside of the plot area.\n\n\nNext, let's make our use of fonts somewhat more practical.\nIn my [last blog post](https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/), I stressed the use of highlighting a few important things instead of using many colors.\nCombine this with direct labels instead of a legend and you get this plot I created using the Fira Sans font.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08_fonts_and_icons_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nNow, see what it would look like had I used the Lobster font instead.\n\n\n::: {.cell fig.showtext='true'}\n::: {.cell-output-display}\n![](08_fonts_and_icons_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nFeels different doesn't it?\nAnd this is still different than the Anton font.\n\n\n::: {.cell fig.showtext='true'}\n::: {.cell-output-display}\n![](08_fonts_and_icons_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Import and Use Icon Fonts with showtext\n\nWe can not only use regular text fonts but also icons with `showtext`.\nFor example, we may want to use one of the free [Fontawesome icons](https://fontawesome.com/icons).\nTo do so, download the [newest version](https://fontawesome.com/download) and extract the .otf-files into your working directory.\nThese contain the font information that you need.\nImporting these (and any other font for that matter) works with `font_add()` and the path to the .otf-files.\n\n::: {.cell fig.showtext='true'}\n\n```{.r .cell-code}\n# First argument = name in R\n# Second argument = path to .otf-file\nfont_add('fa-reg', 'fonts/Font Awesome 6 Free-Regular-400.otf')\nfont_add('fa-brands', 'fonts/Font Awesome 6 Brands-Regular-400.otf')\nfont_add('fa-solid', 'fonts/Font Awesome 6 Free-Solid-900.otf')\n```\n:::\n\n\nNow that we imported the fonts, we can use `ggtext`'s `geom_richtext()` and some HTML wizardry to add icons to our previously imported fonts from Google.\nBut first, what we need is an icon's unicode identifier?\nUni-what?\n\nThe easiest way to find that is to stroll through the [Fontawesome icons online](https://fontawesome.com/icons).\nThen, find one that matches the font you want to use, e.g. free and solid.\nFinally, find it's unicode character in the corresponding popup menu.\n\n\n::: {.cell fig.showtext='true'}\n::: {.cell-output-display}\n![Screenshot from fontawesome.com. Unicode highlighted in yellow.](unicode-finder.png){width=475}\n:::\n:::\n\n\nOnce you got this, you can add `&#x` in front of the unicode and wrap `<span>` tags around it.\nWithin these tags, you will have to specify `font-family` so that the icon is rendered.\n\n\n::: {.cell fig.showtext='true'}\n\n```{.r .cell-code}\ntib <- tibble(\n  family = c('firasans', 'lora', 'lobster', 'anton', 'syne'),\n  x = 0,\n  y = seq(0.0, 1, length.out = 5),\n  label = \"Let's talk cash <span style='font-family:fa-solid'>&#xf651;</span>\"\n)\n\ntib %>%\n  ggplot(aes(x, y, label = label)) +\n  geom_richtext(family = tib$family, size = 16, hjust = 0, col = 'dodgerblue4', label.colour = NA) +\n  coord_cartesian(xlim = c(0, 1), ylim = c(-0.1, 1.1)) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](08_fonts_and_icons_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThis way, you can also use icons in scatter plots.\nThough, make sure to set `fill=NA` if you do not want to have white boxes around the icons.\n\n\n::: {.cell fig.showtext='true'}\n\n```{.r .cell-code}\ntibble(x = runif(25), y = runif(25)) %>% \n  ggplot(aes(x, y, label = \"<span style='font-family:fa-solid;'>&#xf651;</span>\")) +\n  geom_richtext(size = 12, label.colour = NA, fill = NA, col = 'dodgerblue4',) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](08_fonts_and_icons_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nYou will notice that using the two previous code chunks will generate a lot of warnings about \"native encoding\".\nSo far, I have always been able to ignore these without any trouble. \nI really don't know why they appear.\nAnd if you know, please let me know in the comments below.\n",
    "supporting": [
      "08_fonts_and_icons_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}