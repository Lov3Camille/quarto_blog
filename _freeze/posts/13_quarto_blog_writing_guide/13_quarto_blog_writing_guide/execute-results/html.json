{
  "hash": "a74f95e6768322696aeeebfecdcb9930",
  "result": {
    "markdown": "---\ntitle: \"The ultimate guide to starting a Quarto blog\"\ndate: '2022-07-24'\ncategories: []\ndescription: \"This blog post is an in-depth guide on how to start blogging with Quarto.\"\nexecute: \n  message: false\n  warning: false\n  collapse: false\neditor_options: \n  chunk_output_type: console\n  markdown: \n    wrap: 80\n---\n\n::: {.cell}\n\n:::\n\n\nBlogging is great for many reasons. And with [Quarto](https://quarto.org/),\nblogging has never been easier. Within a few clicks, you can create your own\nQuarto blog. And the best part is: With Quarto you can customize basically\neverything according to your wishes.\n\nToday, I want to show you how to build a blog with Quarto. This in-depth guide\nis the result of hours of working with Quarto's amazingly detailed\n[documentation](https://quarto.org/docs/reference/). Hopefully, it will save you\na lot of time and helps you start your own blog. Here's what we will cover:\n\n1.  **Three reasons for starting a blog**\n2.  **How to initialize your Quarto blog**\n3.  **Create your own series**\n4.  **Let your readers interact with you**\n5.  **Make your blog unique with your own theme**\n6.  **Build a custom landing page**\n7.  **Make your posts ROBUST with `{renv}`**\n8.  **Cookies, Google analytics, Quarto extensions and other miscellaneous\n    topics**\n9.  **Publish your blog**\n10. **Writing tips**\n\nNotice that this is a lot. I don't want to brag. But this is **a lot**. Do\nyourself a favor and skip the time-intensive steps if you're just starting out\nwith your blog.\n\nIn the beginning, the most important thing is to **write regularly**. This is\nWAAAAY more important than, say, using many fancy colors in your blog. At first,\nyou can just go with a pre-defined theme and a standard landing page.\n\nReally, I cannot stress this enough: If you want to start a blog, start writing\nregularly first. Worry about your design later. The only way I could stress this\nmore would be to say it [in Spanish](https://youtu.be/fc6GiXos4U8?t=168).\n\nAnd if you're not sure what steps you can skip from my detailed guide, [Beatriz\nMilz](https://twitter.com/BeaMilz) got you covered. In [one of her blog\nposts](https://beamilz.com/posts/2022-06-05-creating-a-blog-with-quarto/en/) she\nshows you how to get started with your Quarto blog in 10 steps. So, you can\nalways start with her intro to get started quickly and then successively add\nparts from my guide.\n\nAlright, enough chit-chat. Let's dive in.\n\n## Three reasons for starting a blog\n\nIn case it is not self-evident of why you should start a blog, let me give you a\nfew good reasons.\n\n-   **Learning:** Writing acts as a safeguard from shallow understanding. I\n    cannot count how many time I erroneously thought I've understood something.\n    But working on a blog post often showed me that my first \"understanding\" was\n    wrong. That's why writing is such an effective tool for learning.\n\n-   **Helping others:** When you share your learnings, you will eventually help\n    people who are struggling with similar problems. Don't worry if you're not\n    an expert. Usually, people don't enjoy learning from experts.\\\n    Rather. people like to learn from other learners who are just a few steps\n    ahead. That's because experts tend to leave out details that are \"obvious\".\n    Yet, some things are only obvious once you are an expert.\n\n-   **Portfolio and job opportunities:** If you publish content on the internet,\n    you can always show people what you've created. This is great for\n    demonstrating your skills (e.g. when applying for a job). Also, from\n    personal experience I can tell you: Writing in the open can lead to job\n    opportunities. You never know who ends up reading your blog and wants to\n    work with you.\n\n## Initialize your blog\n\nOnce you have [installed Quarto](https://quarto.org/docs/get-started/), it is\ndead-simple to start a blog. If you don't use RStudio, you'll have to call\n\n``` bash\nquarto create-project myblog --type website:blog\n```\n\nfrom the command line. In RStudio, you'll have to click on the \"new\nproject\"-button and the menu will let you create a new Quarto blog.\n\n![Click on 'Quarto Blog' to start a new blog\nproject](images/paste-73EA840D.png){fig-align=\"center\" width=\"80%\"}\n\nYou should also create a git repo for your blog project (RStudio will ask you if\nyou want that). This lets you revert changes when you break your blog. And after\nanswering all of RStudio's prompts, you can render your blog with\n`Render Website` from RStudio's `Build` tab.\n\n![This is what the default blog looks\nlike.](images/paste-0E83F78C.png){fig-align=\"center\" width=\"80%\"}\n\n### First simple changes\n\nFirst, let us make the about page into a landing page. Use it to introduce your\nblog to your readers instead of flooding them with a list of blog posts. To do\nso, rename two files:\n\n1.  Rename `index.qmd` to `blog.qmd`\n2.  Rename `about.qmd` to `index.qmd`\n\n![Your previous about.qmd file becomes your landing page now. The navbar doesn't\nlook right. We'll change that\nnext.](images/paste-A0440BBB.png){fig-align=\"center\" width=\"80%\"}\n\nThe next easy changes happen in the `_quarto.yml` file. There, we will mostly\nchange some general info about our blog and stuff in the navbar. Most of the\nsteps are self-explanatory that's why I only list the steps I think are\nnecessary.\n\n1.  Name your blog via `website` \\> `title`\n2.  Set a `site-url` for your blog (this is important for RSS feeds later. If\n    you don't have a URL yet, you can skip this step for now).\n3.  Add a description\n4.  Change reference of `about.qmd` and link to `blog.qmd`\n5.  Link your GitHub profile etc.\n6.  Set `theme: theme.scss`. This will be used for custom styling later. But you\n    can also set `theme` to [one of Quarto's pre-defined\n    themes](https://quarto.org/docs/output-formats/html-themes.html).\n\nYou can also take a look at my `_quarto.yml` file:\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  type: website\n\nwebsite:\n  title: \"Albert Rapp\" \n  site-url: https://albert-rapp.de\n  description: \"This is Albert Rapp's personal Blog.\"\n  navbar:\n    right:\n      - text: Blog\n        href: blog.qmd \n      - icon: github\n        href: https://github.com/AlbertRapp\n      - icon: twitter\n        href: https://twitter.com/rappa753\n      - icon: youtube\n        href: https://www.youtube.com/user/Alfrodo123\n#########################\n# You can ignore this part in the first step\n      - icon: rss\n        href: blog.xml\n      - text: Ressources\n        menu: \n          - text: DataViz Portfolio\n            href: dataviz_portfolio.html\n          - text: YARDS\n            href: https://yards.albert-rapp.de/\n          - text: R Weekly\n            href: https://rweekly.org/\n          - text: R Bloggers\n            href: https://www.r-bloggers.com/\n      - text: Archive\n        href: archive.qmd\n  google-analytics: <Insert your ID here>\n  cookie-consent: true\n  twitter-card: \n    image: thumbnail_blog.png\n    card-style: summary_large_image\n    creator: \"@rappa753\"\n\nfilters:\n  - code-filename\n######################### \n\nformat:\n  html:\n    theme: theme.scss\n```\n\n### Create your first blog post\n\nYou can create a new blog post by creating a new `.qmd`-file in the `posts`\ndirectory. But I recommend that you create a new sub-directory in `posts` for\neach new blog post. So, starting a new blog post is just a matter of\n\n1.  Creating a new directory, say, `posts/new_blog_post`.\n2.  Create a blank `.qmd`-file in this new directory, e.g\n    `posts/new_blog_post/post.qmd`.\n3.  For demo purposes, you can now fill the new file's YAML header with a few\n    basic properties and fill it with a bit of text, code chunks, math parts\n    etc. If you wish, uou can use the [dummy file I\n    used](https://github.com/AlbertRapp/quarto_bottomup_blog/blob/master/posts/new/new_post.qmd).\n\nIf you've followed these steps, you can render your new blog post by clicking\n`Render Website` in RStudio's `Build` tab. This will render all `.qmd`-files\nthat have not been rendered before. If you want to make changes to a blog post,\nthen you will have to render the respective `.qmd`-file manually.\n\n![This is the dummy blog post I used to try out new features from Quarto. Later\non, I used it to see how new themes\nlook.](images/paste-BE004E13.png){fig-align=\"center\" width=\"80%\"}\n\n### Changing metadata\n\nIn general, it's good that you don't have to re-render everything when you write\na new post. The `posts/_metadata.yml` file ensures that. Its main purpose is to\nset global options for all you blog posts in the `posts` directory.\n\nBy default, this file sets `freeze: true`. That's the reason why you have\nre-render blog posts manually. In `_metadata.yml`, we can define more YAML\noptions for all blog posts. Most of the changes I applied in this file are\nself-explanatory. Thus, I leave you with my `_metadata.yml` file.\n\n``` {.yaml filename=\"posts/_metadata.yml\"}\n# Options specified here will apply to all posts in this folder\n\n# freeze computational output\nfreeze: true\n\n# Enable banner style title blocks\ntitle-block-banner: false\n\n# Author name of all blog posts\nauthor: 'Albert Rapp'\n\n# Table of content settings\ntoc: true\ntoc-depth: 3\n\npage-layout: article\n\n#########################\n# You can skip this part in the first step\nformat:\n  html:\n    include-after-body: ../footer.html\n\ncomments: \n  utterances: \n    repo:  AlbertRapp/blogComments \n#########################\n```\n\n## Create your own series\n\nCreating a series (like my [ggplot2 series](../../ggplot-series.html)) is great\nbecause it bundles similar content into one thread. However, we need to\nunderstand listing pages before we can create our own series.\n\n### Listing pages (including RSS feeds)\n\nThe file `blog.qmd` is a listing page. It determines what blog posts will be\nlisted on our `Blog` page. The important stuff happens in this file's YAML\nheader. Here's how my header looks.\n\n``` {.yaml filename=\"blog.qmd\"}\n---\nlisting:\n  contents: posts/**/*.qmd\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: true\n  filter-ui: true\n  fields: [date, title, reading-time, description, categories]\n  feed: true\npage-layout: full\ntitle-block-banner: false\n---\n```\n\nLet me briefly describe a few of these options:\n\n-   `contents: posts/**/*.qmd` means that all `.qmd`-files from the `posts`\n    directory (and sub-directories) will be included in this listing page. If\n    your `posts` directory will only contain `.qmd`-files, then you may as well\n    just write `contents: posts`. In my case, though, some directories contain\n    `.md`-files that I don't want to list.\n\n-   If you wish, enable sorting & filtering via `sort-ui: true` and\n    `filter-ui: true`. The default sorting is set via `sort`.\n\n-   I don't like the title block banner. So I set the corresponding option to\n    false.\n\n-   More importantly, I want to display a post's reading time instead of the\n    author (I am the only author anyway). By changing the `fields` options, I\n    can make that happen. In the [Quarto's\n    docs](https://quarto.org/docs/websites/website-listings.html#listing-fields)\n    you can find more options for `fields`.\n\n-   `feed: true` instructs this listing page to generate an RSS-feed. This works\n    only if we have set the `site-url` in our `_quarto.yml` file. If we have\n    enabled RSS feeds, then this listing page will generate a feed that will be\n    saved in the file `blog.xml` (because the generating file is `blog.qmd`).\n    That's why I have linked the RSS icon in our `_quarto.yml` file to\n    `blog.xml`.\n\n### Creating an archive\n\nNow that we understand listing pages we can create more of them. For example,\nlet us create an archive. This is nothing but a listing page that lists all blog\nposts without a description.\n\nFor this archive I have created a new file `archive.qmd` in my blog's main\ndirectory and filled it as follows. Notice that `page-layout: full`. This means\nthat there is no additional side margin for the category labels.\n\n``` {.yaml filename=\"archive.qmd\"}\n---\ntitle: \"Archive\"\npage-layout: full\nlisting:\n  contents: posts/**/*.qmd\n  type: default\n  fields: [date, title]\n  sort: 'date desc'\n---\n```\n\n### New sub-directory for series\n\nFinally, we can create new listing pages for blog posts that belong to a series.\nFor this to work, all posts that belong to a series must reside in a single new\nsub-directory of `posts`. For my blog, I have created a sub-directory\n`posts/ggplot2-tips`. And the corresponding listing page is generated by\n`ggplot-series.qmd`.\n\n``` {.yaml filename=\"ggplot-series.qmd\"}\n---\ntitle: \"Series: ggplot2-tips\"\nlisting:\n  contents: posts/ggplot2-tips\n  sort: \"date desc\"\n  type: default\n  categories: false\n  sort-ui: false\n  filter-ui: false\n  fields: [date, title, reading-time, description]\npage-layout: full\ntitle-block-banner: true\n---\n```\n\nNow, we have to link to our new listing pages somewhere. I chose to link to my\narchive in the navbar (see `_quarto.yml`). And my ggplot2 series found a home\nabove the list of all other blog posts. I made this happen by modifying\n`blog.qmd` with regular Markdown magic. This could look as follows:\n\n``` {.yaml filename=\"blog.qmd\"}\n---\nlisting:\n  contents: posts/**/*.qmd\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: true\n  filter-ui: true\n  fields: [date, title, reading-time, description, categories]\n  feed: true\npage-layout: full\ntitle-block-banner: false\n---\n\n# Series\n\n##### [ggplot2-series](ggplot-series.html)\nThis series contains a great deal of tips, tricks and packages \nthat you can use to level up your ggplot game.\n```\n\nIn reality, my blog listings page looks a little bit different because I use two\ncolumns ([as you can see for yourself](../../blog.html)) but we'll come to that\nshortly.\n\n## Interact with your audience\n\nDid you really publish a blog post if no one reads it? Let's face it. The best\ncontent in the world won't save you from going unnoticed if readers cannot keep\nin touch. Luckily, we have already taken the first steps to let your audience\nconnect to you.\n\nFor starters, your newly created RSS-feed can notify readers whenever you post\nsomething new. Also, you can submit your newly created RSS-feed to\nfeed-aggregators like [Rweekly](https://rweekly.org/) or\n[Rbloggers](https://www.r-bloggers.com/). This will increase your reach in an\nautomated fashion. More importantly, Rweekly and Rbloggers are great places to\nshow your content to the R community.\n\n### Comment sections\n\nNext, let us add a comment section. This let's your readers, well, comment on\nyour superb content. My go-to tool for that is\n[utterances](https://utteranc.es/). As it works via GitHub, you'll need to\ncreate a separate public repo on GitHub. This repo will be home to your blog's\ncomments. But first, you need to install utterances on your newly created repo.\nFollow [this link](https://github.com/apps/utterances/installations/new) to do\nso.\n\nClearly, we want a comment section below every blog post but not below every\npage (e.g. our landing page). Therefore, a good place to include utterances is\nin `posts/_metadata.yml`. You have already seen the code necessary for that\nearlier. But for your convenience, here it is again.\n\n``` {.yaml filename=\"posts/_metadata.yml\"}\ncomments: \n  utterances: \n    repo:  AlbertRapp/blogComments\n```\n\nBeware that the RStudio viewer may not display the comments. Open your blog in\nan external browser to see if everything worked.\n\n![Check that your comment section appears under your blog\nposts.](images/paste-A3799506.png){fig-align=\"center\" width=\"80%\"}\n\n### Newsletter\n\nAnother popular way to engage with your readers is via newsletters. The idea is\nsimple:\n\n1.  Readers sign up via email\n2.  You regularly inform your subscribers about new content. Personally, I also\n    use [my newsletter](https://alberts-newsletter.beehiiv.com/subscribe) to\n    share thoughts on topics that interest me (and hopefully my readers).\n\nThankfully, you don't have to send the mails manually. There are many free\nproviders that can help with the logistics. And most of these services provide\nHTML snippets for registration too. That's fantastic because you can place this\nsnippet anywhere you like. In my case, [Beehiiv](https://www.beehiiv.com/)\nprovided the following snippet.\n\n``` html\n<iframe id=\"beehiiv-form\" src=\"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true\" data-test-id=\"beehiiv-embed\" frameborder=\"0\" scrolling=\"no\" style=\"margin: 0; border-radius: 0px !important; background-color: transparent; height: 75px; width: 90%;\"></iframe>\n```\n\nLet's put it somewhere easy first. Let us use Quarto's column syntax for this.\nIn case you don't know it, here's a demo.\n\n::: panel-tabset\n## Code\n\n``` html\n:::: {.columns}\n\n\n::: {.column width=\"50%\"}\n### Column 1\nThis is written in column 1\n:::\n\n::: {.column width=\"50%\"}\n### Column 2\nThis is written in column 2\n:::\n\n:::: \n```\n\n## Output\n\n::: columns\n::: {.column width=\"50%\"}\n### Column 1\n\nThis is written in column 1\n:::\n\n::: {.column width=\"50%\"}\n### Column 2\n\nThis is written in column 2\n:::\n:::\n:::\n\nNow we can use this to put our registration snippet at the top of the blog\nlistings page. For example, we could modify `blog.qmd` as follows.\n\n``` {.yaml filename=\"blog.qmd\"}\n---\nlisting:\n  contents: posts/**/*.qmd\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: true\n  filter-ui: true\n  fields: [date, title, reading-time, description, categories]\n  feed: true\npage-layout: full\ntitle-block-banner: false\n---\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n# Series\n\n##### [ggplot2-series](ggplot-series.html)\nThis series contains a great deal of tips, tricks and packages \nthat you can use to level up your ggplot game.\n:::\n\n::: {.column width=\"60%\"}\n# Subscribe\n<iframe id=\"beehiiv-form\" src=\"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true\" data-test-id=\"beehiiv-embed\" frameborder=\"0\" scrolling=\"no\" style=\"margin: 0; border-radius: 0px !important; background-color: transparent; height: 75px; width: 90%;\"></iframe>\n:::\n\n:::: \n```\n\n![Output of previous change to\nblog.qmd](images/paste-ED5A9347.png){fig-align=\"center\" width=\"80%\"}\n\n### Add a footer below blog posts\n\nNow, we're going to do something harder. We will include something at the end of\nevery blog post (before the comments). That's the perfect spot for\n\n-   Newsletter registrations,\n\n-   \"Share on\"-buttons,\n\n-   \"Buy me coffee\"-buttons or\n\n-   whatever else you fancy.\n\nFor example, this could look like my current footer.\n\n![My current footer](images/paste-E257B6FC.png){fig-align=\"center\" width=\"80%\"}\n\nTo include something at the end of posts, I've found `format` \\> `html` \\>\n`include-after-body` helpful. That's the part you have seen earlier in my\n`_metadata.yml` file. You don't know which part I'm talking about? Well, it's\neasy to forget. But don't worry. I got you. Here's the part I mean.\n\n``` {.yaml filename=\"posts/_metadata.yml\"}\nformat:\n  html:\n    include-after-body: ../footer.html\n```\n\nOf course, this assumes that you have whipped together a `footer.html` file in\nthe main directory. If you don't know HTML, then you can always use code from a\n`.qmd`-file's output (more on finding HTML-code later). For my blog, I have\ncreated the following simple HTML-file.\n\n``` {.html filename=\"footer.html\"}\n<div>\n<hr>\n\n<h3> Stay in touch </h3>\n\n<p> If you enjoyed this post, then don't miss out on any future posts by subscribing to my email newsletter. </p>\n\n<iframe id=\"beehiiv-form\" src=\"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true\" data-test-id=\"beehiiv-embed\" frameborder=\"0\" scrolling=\"no\" style=\"margin: 0; border-radius: 0px !important; background-color: transparent; height: 55px;\"></iframe>\n\n\n<h3> Support my work with a coffee </h3>\n\n<script type=\"text/javascript\" src=\"https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js\" data-name=\"bmc-button\" data-slug=\"rappa753\" data-color=\"#06436e\" data-emoji=\"☕\"  data-font=\"Lato\" data-text=\"Support me\" data-outline-color=\"#ffffff\" data-font-color=\"#ffffff\" data-coffee-color=\"#FFDD00\" data-height=\"40px\" ></script>\n\n<h3> Share </h3>\n\n<a href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\" class=\"twitter-share-button\" data-size=\"large\" data-hashtags=\"#rstats\" data-show-count=\"false\">Tweet</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<hr>\n</div>\n```\n\nNote that the code for all the widgets were provided from the respective\nservice. I certainly didn't code that stuff myself. You know, I'm not an HTML\nexpert.\n\n## Style your blog\n\nAt some point, you will likely want to customize your blog's visual appearance.\nThis will include changing colors, fonts and sizes of all sorts of things.\n\nAnd same as the internet, Quarto runs on HTML and CSS. These two languages are\nthe major players that style your blog. Luckily, you don't have to know a lot\nabout them to style your blog.\n\nThat's because Quarto already generates a whole lot of HTML and CSS code when\nyou render your blog. Consequently, it takes only a little peaking behind the\nHTML/CSS curtain to find out what values need tweaking.\n\nI know, this sounds quite complicated. But it isn't. I don't know a whole lot\nabout HTML and CSS but I have customized this blog, haven't I? In fact, working\non this blog has been a fun way to learn more about these two languages. To help\nyou do the same, I have created a video that walks you through the process of\n\n1.  Learning a minimal amount of HMTL/CSS to understand what's going on,\n2.  Finding HTML/CSS snippets that you want to tweak and\n3.  Making the changes in your blog\n\nYou can find the video on YouTube.\n\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/ErRX8plZpQE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n\n</iframe>\n\nIf videos are not your thing, here's the high-level summary:\n\nIn `quarto.yml`, we have set `theme: theme.scss`. Thus, all visual elements of\nthis blog are governed by this SCSS-file. But it doesn't exist yet. That's why\neverything is set to default values. So, create `theme.scss` yourself by\ncreating an empty text file and renaming it to `theme.scss`.\n\nQuarto uses a framework called [Bootstrap](https://getbootstrap.com/). In this\nframework, you can change most parts of your blog by changing a variable's\nvalue. For instance, there is a variable called `$primary` (variables use dollar\nsigns in SCSS). It governs the main color of your blog. And you can change it to\nany color you like.\n\nSimilarly, your text color is governed by `$body-color` and your text font is\ndetermined by `$font-family-base`. Quarto lists the most common variables [in\ntheir\ndocs](https://quarto.org/docs/output-formats/html-themes.html#sass-variables).\nFor the full list of variables you can check out [Bootstrap's Github\npage](https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss). Here\nare the variables I have set at the beginning of my `theme.scss` file.\n\n``` {.css filename=\"theme.scss\"}\n/*-- scss:defaults --*/\n$primary:  #06436e !default;\n$font-family-base:  'Source Sans Pro',  'Lato', 'Merriweather', 'Roboto Regular', 'Cabin Regular' !default;\n$body-color: $gray-700 !default;\n$headings-font-family:  'Prata', 'Roboto', 'Playfair Display', 'Montserrat'    !default;\n```\n\nNotice that my file starts with `/*-- scss:defaults --*/`. This is just\nsomething an SCSS-file expects. Also, make sure to use multiple fonts. As not\nevery computer has every font installed, it's good to offer multiple\nalternatives for your reader's computer.\n\nConsequently, when you want to style your blog, you can stroll through the list\nof variables. Once you have found a variable that you want to change (most\nvariable names are quite self-explanatory), just throw that into your scss-file.\n\n### SCSS-Rules\n\nUnfortunately, not everything can be changed with Bootstrap variables. In this\ncase, you will need to take a look at your blog's source code. To do so, open\nyour blog in a browser of your choice. Then, right-click anywhere and press\n\"Inspect\". This will open the developer mode of your browser.\n\nNow, you can see your blog's source code. This view can be quite daunting. But\ndon't worry. You can ignore most of it. The only thing you need is the most\nspecific description of the part you want to tweak.\n\n![On the left you see the website you've opened. On the right you see the HTML-\n(top) and CSS-code (bottom). As you move your cursor through the HTML-code, your\nbrowser shows you the corresponding part of the\nwebsite.](images/paste-5AD5F4B6.png){fig-align=\"center\" width=\"100%\"}\n\nYou see, in HTML and CSS everything consists of (nested) tags, classes and IDs.\nAll of these are indicated by a different symbol:\n\n-   `<...>` stands for **tag**, e.g. `<div> </div>` (This is a section)\n\n-   `.` stands for **class**, e.g. `.grid` (This is grid class object)\n\n-   `#` stands for **ID**, e.g. `#my_about_page` (This is a name that you can\n    access in your CSS code)\n\nAs you move your cursor through the HTML code, your browser will show you what\nelement in your blog corresponds to the code you're currently hovering over.\nThis helps you to find the HTML code responsible for the part that you want to\ntweak. Once you have found the desired code section, the CSS-code will also show\nyou a mix of tags, classes and IDs that describe this element.\n\nFor example, each blog title is described by\n``` {.css}\n#title-block-header.quarto-title-block.default .quarto-title .title\n```\nJust copy\nthis from your browser's developer page and put it into your SCSS-file. Then,\nadd `{}` and describe how you want to style the element. This could look like\nso.\n\n``` {.css filename=\"theme.scss\"}\n/*-- scss:rules --*/\n#title-block-header.quarto-title-block.default .quarto-title .title {\n  font-family: \"Oleo Script\", \"Libre Baskerville\", $headings-font-family;\n  font-size: $font-size-base * 2.5;\n}\n```\n\nHere I have chosen to use different fonts for blog titles (if possible) and make\nthe font larger. I tried to avoid hard-coding the font size with something like\n`14pt`. Instead, I have taken the Bootstrap variable `$font-size-base` and\nscaled it. Finally, notice that SCSS-rules - like the one we have just defined -\nneed to be written after `/*-- scss:rules --*/` in your SCSS-file.\n\nSo, now you have learned a way to style your blog. You can basically change\neverything you like this way. And you don't need to know much about HTML/CSS for\nthat. You just need some patience strolling through the code.\n\nOf course, you will need to know the keywords like `font-family`, `font-size`,\netc. But you will stumble across the most common keywords in the HTML code\nanyway. Alternatively, a quick web search can help. And if you want, you can\ntake a look at my [`theme.scss` file](../../theme.scss).\n\nThis file also includes a few `@media (min-width: ...px)` calls that styles the\nblog differently on small screens (depending on the amount of pixels). You can\nignore this part for now.\n\n### Light and dark modes\n\nAre you a fan of dark modes? Me too! Though, at the time of writing I haven't\ngotten around to add a dark mode to this blog. But the steps to include a dark\nmode are easy. You just have to modify your `_quarto.yml` file as follows.\n\n``` {.yaml filename=\"_quarto.yml\"}\nformat:\n  html:\n    theme: \n      light: theme.scss\n      dark: theme-dark.scss\n```\n\nThis will add a dark mode toggle to your navbar. And now you can style the dark\nmode in the same way as before by creating a new scss-file for it.\n\n## Build your own landing page\n\nMy own landing page is custom built and here I'll show you how you can do the\nsame. But there is absolutely no reason against [using one of the built-in\ntemplates](https://quarto.org/docs/websites/website-about.html) (especially if\nyou're just starting your blogging career).\n\nBuilding my landing page will require a little bit more knowledge about HTML and\nCSS. Don't be alarmed, though. You can easily follow along if you've understood\nhow to work with classes and IDs (as described earlier or [in my\nvideo](https://www.youtube.com/watch?v=ErRX8plZpQE)).\n\nFirst, we need to set up `index.qmd`. This file determines what your blog's\nlanding page looks like. Delete all content from this file and replace it with\n\n``` {.yaml filename=\"index.qmd\"}\n---\npage-layout: full\n---\n```\n\nSecond, set up a grid system. Quarto uses the [CSS-grid\nsystem](https://getbootstrap.com/docs/5.1/layout/css-grid/). We can make use of\nthat in `index.qmd` via\n\n``` {.css filename=\"index.qmd\"}\n::: {.grid}\nCONTENT\n:::\n```\n\nRecall that the dot (`.`) in CSS stands for class. So, the previous code means\nquarto will render your qmd-file into an html-file that contains a section (a\n`div` in HTML-speak) that is of class `grid`. We will fill this div with columns\nnext.\n\nAdding columns is done by adding more `div`s. In this case, these `div`s are of\nthe class `g-col-*`. Here, `*` describes how many columns the `div` should fill\n(out of 12 columns). The actual content is written with regular Markdown. This\ncould look like so:\n\n``` {.css filename=\"index.qmd\"}\n::: {.grid}\n\n::: {.g-col-6}\n![](profile2.jpg)\n:::\n\n::: {.g-col-6}\n# Hi, I'm Albert Rapp.\nI'm a mathematics PhD students with a passion for R, data visualization, Shiny and statistics/machine learning. On this blog, I share and teach what I learn.\n\nTo get started, you can check out my most popular content below. You can find me on [Twitter](https://twitter.com/rappa753) or\n[GitHub](https://github.com/AlbertRapp) and \n[YouTube](https://www.youtube.com/user/Alfrodo123). \nFeel free to reach out to me via [mail](mailto:blog@albert-rapp.de) and subscribe to my email newsletter.\n\n\n<iframe id=\"beehiiv-form\" src=\"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true\" data-test-id=\"beehiiv-embed\" frameborder=\"0\" scrolling=\"no\" style=\"margin: 0; border-radius: 0px !important; background-color: transparent; height: 75px\"></iframe>\n:::\n```\n\nThis code will create the following landing page.\n\n![](images/paste-79318471.png){fig-align=\"center\" width=\"80%\"}\n\n### Add reactivity\n\nOur new landing page will look decent on large screens. But we should test what\nit looks like on small screens too.\n\nHowever, there's no need to take out your phone. Use your browser and activate\nits responsive mode (`ctrl`+`shift`+`M` in Firefox). This way, you can see what\nyour website would look like on phones or tablets.\n\n![Mobile view of the landing page we've just\nbuilt.](images/paste-1E3D81FD.png){fig-align=\"center\" width=\"80%\"}\n\nIf you've checked the view on phones, then you may notice that splitting the\nscreen in two won't fly. In this case, it's better to put sections **below**\neach other. We can make that happen by adding `g-col-md-*` classes to our\nprevious divs (and making the other classes full-width).\n\n``` {.css filename=\"index.qmd\"}\n::: {.grid}\n\n::: {.g-col-12 .g-col-md-6}\n![](profile2.jpg)\n:::\n\n::: {.g-col-12 .g-col-md-6}\n# Hi, I'm Albert Rapp.\nI'm a mathematics PhD students with a passion for R, data visualization, Shiny and statistics/machine learning. On this blog, I share and teach what I learn.\n\nTo get started, you can check out my most popular content below. You can find me on [Twitter](https://twitter.com/rappa753) or\n[GitHub](https://github.com/AlbertRapp) and \n[YouTube](https://www.youtube.com/user/Alfrodo123). \nFeel free to reach out to me via [mail](mailto:blog@albert-rapp.de) and subscribe to my email newsletter.\n\n\n<iframe id=\"beehiiv-form\" src=\"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true\" data-test-id=\"beehiiv-embed\" frameborder=\"0\" scrolling=\"no\" style=\"margin: 0; border-radius: 0px !important; background-color: transparent; height: 75px\"></iframe>\n:::\n```\n\nHere, `.g-col-12 .g-col-md-6` means that the `div` will use 12 columns (full\nwidth) by default. But on screens of at least medium width (\\>=768px), the `div`\nwill only take 6 columns. Congrats, you've now used responsive design. 🥳\n\n![Use responsive design to make your landing page look good on small screens. I\nhope you're not sick of my face yet\n😆](images/paste-BA9A601E.png){fig-align=\"center\" width=\"80%\"}\n\nNext, we should use our landing page to highlight our best content. Think of\nthis as a getting started guide for your readers. Here, I want to use centered\ncolumns of width 5. And to ensure that the columns are centered let us offset\nthe first block by one column (on larger than medium screens).\n\nThis is accomplished by adding yet another class to the `div`, namely\n`g-start-md-*`. Here, `*`️ is the start column. And seeing this in action may\nlook like this:\n\n``` {.html filename=\"index.qmd\"}\n::: {.g-col-12 .g-col-md-5 .g-start-md-2}\n# Data Visualization\n\n- Blog post 1\n- Blog post 2\n- Blog post 3\n:::\n\n::: {.g-col-12 .g-col-md-5}\n# Stats/ML\n\n- This div...\n- ...required...\n- ...no offset (it's still in the first row)\n\n:::\n```\n\n![Output of previous code chunk. Notice that the first column doesn't start all\nthe way to the left.](images/paste-036A33EA.png){fig-align=\"center\" width=\"80%\"}\n\nFinally, you can always customize the appearance of a grid element by adding\nmore custom classes (with `.`) or IDs (with `#`). Afterwards, you can target\nthat class or ID in your SCSS file. This way, I aligned my bio with the bottom\nof the picture.\n\n::: panel-tabset\n## HTML Code\n\n``` {.css filename=\"index.qmd\"}\n::: {.g-col-12 .g-col-md-6 #about-me-text}\n![](profile2.jpg)\n:::\n```\n\n## Content of theme.scss\n\n``` {.css filename=\"theme.scss\"}\n#about-me-text {\n  align-items: end;\n  display: grid;\n}\n```\n:::\n\n## Make posts robust with {renv}\n\nImagine that you have written a really cool blog post. And not just any cool\nblog post. I mean a SUPER DUPER cool blog post. Did you imagine that? Good.\nThat's your future when you start a blog. But don't get too excited yet! Here's\nthe drama of this fairy tale.\n\nUnfortunately, your super cool blog post uses version `1.2.4.` of `{ggplot2}`.\nThis is unfortunate because right now we're at version `3.3.6`. And a lot has\nchanged since your blog post was rendered last time.\n\nWhat's worse is that you won't be able to render your blog anymore if you ever\nneed to re-render all blog posts. This can happen, for example, if you move your\nblog to a different format, e.g. Quarto.[^1]\n\n[^1]: Yes, this is exactly what happened to me. I was young and foolish.\n\nLuckily, it's possible to tell R which package versions it should use for your\nblog posts. To do so, you need to control the versions with\n[{renv}](https://rstudio.github.io/renv/articles/renv.html). This is a package\nlike any other package and you can install it with `install.packages('renv')`.\n\nOnce you have installed `{renv}`, you can use it within your blog project.\nActually, it is quite simple to set up. Here's how `{renv}`'s docs describe the\nworkflow.\n\n> 1.  Call [`renv::init()`](https://rstudio.github.io/renv/reference/init.html)\n>     to initialize a new project-local environment with a private R library,\n>\n> 2.  Work in the project as normal, installing and removing new R packages as\n>     they are needed in the project,\n>\n> 3.  Call\n>     [`renv::snapshot()`](https://rstudio.github.io/renv/reference/snapshot.html)\n>     to save the state of the project library to the lockfile (called\n>     `renv.lock`),\n>\n> 4.  Continue working on your project, installing and updating R packages as\n>     needed.\n>\n> 5.  Call\n>     [`renv::snapshot()`](https://rstudio.github.io/renv/reference/snapshot.html)\n>     again to save the state of your project library if your attempts to update\n>     R packages were successful, or call\n>     [`renv::restore()`](https://rstudio.github.io/renv/reference/restore.html)\n>     to revert to the previous state as encoded in the lockfile if your\n>     attempts to update packages introduced some new problems.\n\nSo, if you've just started your blog project, then `renv:init()` will set you up\nwith a clean slate. This means that whenever you want to use a package that you\nhave not used before **in this project**, you will need to install the package\nfor this project (via `install.packages()`). Yes, this is true even if you have\nused, say, `{ggplot2}` in other projects.\n\nIn case you're running into installation problems with `{renv}`, you'll need to\nchange your download method for new packages. Simply add the following line to\nyour `.Renviron` file. Either find this file on your computer manually or open\nit by calling `usethis::edit_r_environ()` (if necessary from a not\n`{renv}`-controlled project).\n\n``` r\n Sys.setenv(RENV_DOWNLOAD_FILE_METHOD = getOption(\"download.file.method\"))\n```\n\nWhenever you have installed or updated packages in this project, then call\n`renv::snapshot()`. This will save all package information **including version\nnumbers** into a so-called lock file `renv.lock` (which will appear in your\nprojects main directory). Now, here's what you need to do to make **each of your\nblog posts** robust against version changes.\n\n1.  After finishing anew blog post, call `renv::snapshot()`. This will update\n    your `renv.lock` file **of your blog project.**\n\n2.  Take this updated `renv.lock` file and copy it into the directory of your\n    newly finished blog post.\n\n3.  In your new blog post, add the following code chunk at the top of your blog\n    post's `qmd`-file (after the YAML header, of course).\n\n    ``` r\n    #| echo: false\n    #| results: 'hide'\n    renv::use(lockfile = \"renv.lock\")\n    ```\n\nThat's it. You have successfully saved your blog post from dying by version\nchange. Whenever your blog post needs to be re-rendered, this first code chunk\nwill instruct R to use the package versions that are defined in this post's\nlock-file.\n\nBut let me warn you that this is not a perfect solution. Your blog posts are\nstill not invincible. For example, `{renv}` does not prevent problems when you\nhave written your blog post on a Windows system and want to re-render it on\nUbuntu. Possibly, some packages (e.g. `{keyring}`) behave differently on a\ndifferent OS.\n\n## Cookies, analytics, extensions and more miscellaneous stuff\n\nThere are many, many more cool features that Quarto has in store for your blog.\nLet me briefly mention a few more gems.\n\n-   **Analytics:** You're probably curious about how much attention your blog\n    attracts. To find out, you can measure your website's traffic with [Google\n    analytics](https://analytics.google.com). Simply register with Google and\n    you will get a tracking ID. This ID can be added in your `_quarto.yml` file\n    via `google-analytics`. For more information, check out the [Quarto\n    docs](https://quarto.org/docs/websites/website-tools.html#google-analytics).\n\n-   **Cookie consent:** It is rude and more importantly illegal to track your\n    readers with cookies without their consent. So it is paramount that you ask\n    your readers for permission if you use cookies. This can be done via a\n    simple, yet ABSOLUTELY ANNOYING, pop-up window that asks for consent.\n    Activate this window via `cookie-consent: true` in `_quarto.yml`.\n\n-   **Social card:** A great place to share your blog posts is Twitter. But to\n    get the most out of your promo tweets, your links should probably generate a\n    [Twitter\n    card](https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards).\n    Once again, you can enable this feature in your `_quarto.yml` file. And for\n    custom styling of your Twitter card, please refer to the [Quarto\n    docs](https://quarto.org/docs/websites/website-tools.html#twitter-cards).\n    Note that it takes some time (days) until Twitter registers your changed\n    Twitter card information.\n\n-   **Extensions:** Quarto's functionality can be leveled up with\n    [Extensions](https://quarto.org/docs/extensions/). For example, the\n    `code-filename` extension helped me to include a file name at the top of\n    many of this post's code chunks. If you want to use the `code-filename`\n    extensions as well, then proceed as follows. Of course, this works with any\n    other extension as well.\n\n    1.  Make sure that your Quarto version is up-to-date. Extensions are a\n        fairly new feature.\n\n    2.  Install `code-filename` locally for your blog project: You will need to\n        open a terminal at your blog's working directory and execute\n\n        ``` bash\n        quarto install extension quarto-ext/code-filename\n        ```\n\n    3.  Notice that there is a new directory `_extensions` in your blog's\n        directory now. (This is not really a step that you have to do but still\n        it's nice to notice changes).\n\n    4.  Add the new extension to your `_quarto.yml` file to activate it.\n\n        ``` {.yaml filename=\"_quarto.yml\"}\n        filters:\n          - code-filename\n        ```\n\n    5.  Enjoy your new feature. You can use it like\n\n        ```` yaml\n        ``` {.yaml filename=_quarto.yml}\n        filters:\n            - code-filename\n        ```\n        ````\n\n-   **PDF Output:** On Twitter, I was asked if my guide can include some info on\n    Quarto's PDF output options. In this context, this reminds me that a reader\n    once emailed me and asked whether I can provide a PDF-file for one of my\n    blog posts. So, I guess, some people may be interested in having PDF- as\n    well as HTML-versions of your blog.\\\n    In principle, you could add an additional format to, say, your\n    `_metadata.yml` file. In my case, this could look like\n\n    ``` {.yaml filename=\"posts/_metadata.yml\"}\n    format:\n      html:\n        include-after-body: ../footer.html\n    pdf:\n      toc: true\n    ```\n\n    Unfortunately, I haven't found a button or shortcut to render **both**\n    outputs simultaneously in RStudio. But with the command line (which you can\n    use in RStudio), it is simple. You'll just have to call\n\n    ``` bash\n    quarto render --to all\n    ```\n\n    This will render all of your blog posts to both HTML and PDF. Now what's\n    cool is that a reader can easily access the PDF version by changing a post's\n    link e.g. from `site-url/post_XY.html` to `site-url/post_XY.pdf`.\\\n    Of course, all of that will only work if your blog posts contain static\n    elements that work in a PDF. Possibly, this can be cirumvented and [Quarto's\n    docs on book\n    formats](https://quarto.org/docs/books/book-output.html#format-options)\n    (it's a more pressing issue for books) may have some info on that.\n    Personally, I avoid PDFs in my blog.\n\n-   **Adding ressources:** Sometimes you want to add a few static materials to\n    your blog post. For example, I've included multiple `app.R` files in a [blog\n    post about Shiny](../06_shiny_app_learnings.html). In order to link to\n    these, they need to be included as a Ressource to the blog post.\\\n    In this case, all files were located in a sub-directory called `DummyApp`.\n    Thus, I could include all files in the YAML header via\n\n    ``` yaml\n    format:\n      html:\n        resources:\n          - DummyApp\n    ```\n\n    Then, I can link to the files via their path. The same trick works, when you\n    want to include an audio file to your blog post. Make sure that the audio\n    file, say `audio.mp3`, is in your post's directory and then add some html\n    magic like so:\n\n    ::: panel-tabset\n    ## HTML-code\n\n    ``` html\n    <figure>\n    <figcaption>Click to listen</figcaption>\n    <audio controls src=\"audio.mp3\">\n            Your browser does not support the\n            <code>audio</code> element.\n    </audio>\n    </figure>\n    ```\n\n    ## YAML-header\n\n    ``` yaml\n    format:\n      html:\n        resources:\n          - audio.mp3\n    ```\n    :::\n\n-   **Links from your old blog:** If you already had a blog, then you may wish\n    that your old hyperlinks continue to work. For example, I have linked to my\n    blog post about rounded rectangles in [this\n    tweet](https://twitter.com/rappa753/status/1521882068887777281). Back then,\n    my blog post lived at\n\n    ``` yaml\n    https://albert-rapp.de/post/2022-05-01-use-grobs-to-get-rounded-corners/\n    ```\n\n    Everything after `.de/` reflects the directory structure of my **old blog**.\n    But this Quarto blog has a different structure. Now, this blog post lives at\n\n    ``` yaml\n    https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles.html\n    ```\n\n    Therefore, the old link will not work anymore. Thankfully, we can save our\n    old link via\n    [redirects](https://quarto.org/docs/websites/website-navigation.html#redirects).\n    All we have to do is add an **alias** in the YAML header of the blog post\n    like so\n\n    ``` yaml\n    aliases: \n      # Move from post's directory to root via ../../../\n      # Then add structure from old blog\n      - ../../../post/2022-05-01-use-grobs-to-get-rounded-corners/index.html\n    ```\n\n-   **Hide sections:** Using the chunk option `code-fold` you can hide code in a\n    dropdown menu like this.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\"}\n    library(tidyverse)\n    ```\n    :::\n\n\n    If you take a look at the resulting HTML-code, you will notice that this is\n    really just a combination of two HTML-tags `<details>` and `<summary>`.\n    Thus, folding is not just restricted to code chunks. If you want to e.g.\n    fold an entire section, you can do it manually with HTML.\n    \n    \n    ``` {.html}\n    <details>\n    <summary> Appendix </summary>\n\n    ## Appendix \n    I can fill this with regular Markdown. This is **bold**. This is *italic*.\n\n    Also, code chunks work. \n  \n    ```{.r}\n    library(ggplot2)\n    mpg |>\n      ggplot(aes(hwy, cty)) +\n      geom_jitter()\n    #``` \n    (Remove # and . in {.r}. It's only here for the demo. \n    Without it, this is a nested code block.\n    And this does not render well.) \n    </details>\n      \n    ```\n  \n\n    <details>\n\n    <summary>Appendix</summary>\n\n    ## Appendix\n\n    I can fill this with regular Markdown. This is **bold**. This is *italic*.\n\n    Also, code chunks work.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(ggplot2)\n    mpg |>\n      ggplot(aes(hwy, cty)) +\n      geom_jitter()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](13_quarto_blog_writing_guide_files/figure-html/unnamed-chunk-3-1.png){width=672}\n    :::\n    :::\n\n\n    </details>\n\n## Publish your blog online\n\nMy preferred publisher is [Netlify](https://www.netlify.com/). It's really easy\nto set up to publish with them. So, let me describe how that works. Mainly, you\nhave two choices once you have registered with Netlify.\n\n1.  Give Netlify access to the GitHub repository that your blog lives in. Once\n    access is granted, Netlify will deploy the most recent version of your blog\n    whenever you push changes to your repository.\n2.  Alternatively, you can use the command line. To do so, open a new terminal\n    and set its working directory to your blog's working directory. Then, you\n    only need to call `quarto publish netlify` and follow the instructions on\n    the terminal.\n\nYou can use the latter method for publishing at other services as well. For more\ninformation, let me refer you to [Quarto's\ndocs](https://quarto.org/docs/output-formats/html-publishing.html). Also, let me\nmention that Netlify will give you a Netlify URL, e.g.\n`tourmaline-faloodeh-4b36ef.netlify.com`. However, I think it's advisable to buy\na custom domain and link it to the Netlify URL (Netlify provides help on that).\n\n## Writing tips\n\nI don't consider my writing particularly good and I am sure that I use a fair\nshare of imperfect grammar. But a small language barrier shouldn't stop me or\nyou from publishing a blog. And before I leave you, let me share a few pearls of\nwriting wisdom that I found helpful.\n\n-   **Consistency** **is key**: Blogging is like any other any new habit: It\n    takes time until it sticks. That's why it is really important that you try\n    to post something regularly. If you have trouble overcoming your weaker self\n    I can recommend the book [Atomic Habits by James\n    Clear](https://amzn.to/3aYm5NX). It contains TONS of great strategies to\n    make a new habit stick.\n\n-   **Perfectionism is the enemy:** One major obstacle that can stop you from\n    writing regularly is perfectionism. Don't worry if your blog post is\n    perfect, or original, or super exciting or whatever. It is maddingly easy to\n    waste hours \"polishing\" a blog post to perfection. So, if you catch yourself\n    polishing a lot. Then maybe think about just hitting publish.\n\n-   **Expect the indifference:** When you publish a blog post, you never know if\n    people will be excited about what you wrote. Chances are that they won't be.\n    In fact, if you just got started, then count on it! This may sound harsh but\n    it's actually great. Use this knowledge to counter your need for\n    perfectionism. This can help you to work on your consistency until\n    eventually people care about what you write.\n\n-   **Get feedback on your writing:** Nothing makes writing more boring than not\n    getting any feedback. I recommend that you advertise your posts on Rweekly\n    and Twitter. Depending on how people engage with your post (or not), you\n    will have feedback about how much your community cares about the topic you\n    chose. Eventually, you will hit on a topic that people care about. Then, it\n    can be incredibly fun to double down on this topic or engage in\n    conversations about it.\n\nFor more tips, you can check out [David\nPerell](https://twitter.com/david_perell)'s or [Dickie\nBush](https://twitter.com/dickiebush)'s work. I learned most of the above\nwriting tips from them.\n\n## Closing\n\nPhew! This is the longest and most in-depth guide that I ever wrote. And this\nwas also the scariest post I ever wrote. When I started on this Quarto endeavor\nalmost two months ago, I had literally ZERO knowledge about\n\n-   HTML/CSS\n\n-   Responsive design\n\n-   Version control with `{renv}`\n\nand many other small things I've learned since then. Thus, I see this guide as a\nculmination of everything I've learned and I am oddly proud about it.\n\nI hope that you enjoyed this guide and that it serves you well. Please reach out\nto me if you run into any trouble with what I wrote. I am more than happy to\nimprove my guide so that it can help more people.\n\nAnd don't forget to stay in touch via my\n[Newsletter](https://alberts-newsletter.beehiiv.com/subscribe),\n[Twitter](https://twitter.com/rappa753) or my [RSS\nfeed](https://albert-rapp.de/blog.xml). See you next time!\n",
    "supporting": [
      "13_quarto_blog_writing_guide_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}