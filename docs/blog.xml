<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Love Camille</title>
<link>https://lov3camille.top/blog.html</link>
<atom:link href="https://lov3camille.top/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Lov3Camille&#39;s personal Blog.</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Fri, 06 Jan 2023 16:00:00 GMT</lastBuildDate>
<item>
  <title>LeetCode 刷题记录 21 - 30</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/leetcode_21-30/index.html</link>
  <description><![CDATA[ 



<section id="合并两个有序链表" class="level2">
<h2 class="anchored" data-anchor-id="合并两个有序链表">21. 合并两个有序链表</h2>
<p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="kw" style="color: #003B4F;">struct</span> ListNode <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-2">    <span class="dt" style="color: #AD0000;">int</span> val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-3">    ListNode <span class="op" style="color: #5E5E5E;">*</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-4">    ListNode<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">nullptr</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb1-5">    ListNode<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span>x<span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">nullptr</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb1-6">    ListNode<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">,</span> ListNode <span class="op" style="color: #5E5E5E;">*</span>next<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span>x<span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span>next<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb1-8"> </span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb1-11">    ListNode<span class="op" style="color: #5E5E5E;">*</span> mergeTwoLists<span class="op" style="color: #5E5E5E;">(</span>ListNode<span class="op" style="color: #5E5E5E;">*</span> l1<span class="op" style="color: #5E5E5E;">,</span> ListNode<span class="op" style="color: #5E5E5E;">*</span> l2<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-12">        <span class="kw" style="color: #003B4F;">auto</span> dummy <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> ListNode<span class="op" style="color: #5E5E5E;">(-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">),</span> tail <span class="op" style="color: #5E5E5E;">=</span> dummy<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-13">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>l1 <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> l2<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-14">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>l1<span class="op" style="color: #5E5E5E;">-&gt;</span>val <span class="op" style="color: #5E5E5E;">&gt;</span> l2<span class="op" style="color: #5E5E5E;">-&gt;</span>val<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-15">                tail <span class="op" style="color: #5E5E5E;">=</span> tail<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> l2<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-16">                l2 <span class="op" style="color: #5E5E5E;">=</span> l2<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-17">            <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-18">                tail <span class="op" style="color: #5E5E5E;">=</span> tail<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> l1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-19">                l1 <span class="op" style="color: #5E5E5E;">=</span> l1<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-20">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-21">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>l1<span class="op" style="color: #5E5E5E;">)</span> tail<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> l1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>l2<span class="op" style="color: #5E5E5E;">)</span> tail<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> l2<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-24"></span>
<span id="cb1-25">        <span class="cf" style="color: #003B4F;">return</span> dummy<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-26">    <span class="op" style="color: #5E5E5E;">}</span>   </span>
<span id="cb1-27"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>


</section>

 ]]></description>
  <category>cpp</category>
  <category>algorithms</category>
  <category>LeetCode</category>
  <guid>https://lov3camille.top/posts/leetcode_21-30/index.html</guid>
  <pubDate>Fri, 06 Jan 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>LeetCode 刷题记录 11 - 20</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/leetcode_11-20/index.html</link>
  <description><![CDATA[ 



<section id="盛最多水的容器" class="level2">
<h2 class="anchored" data-anchor-id="盛最多水的容器">11. 盛最多水的容器</h2>
<p>给定一个长度为 n 的整数数组&nbsp;height&nbsp;。有&nbsp;n&nbsp;条垂线，第 i 条线的两个端点是&nbsp;(i, 0)&nbsp;和&nbsp;(i, height[i])&nbsp;。</p>
<p>找出其中的两条线，使得它们与&nbsp;x&nbsp;轴共同构成的容器可以容纳最多的水。</p>
<p>返回容器可以储存的最大水量。</p>
<p>说明：你不能倾斜容器。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb1-8">    <span class="dt" style="color: #AD0000;">int</span> maxArea<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> height<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-9">        <span class="dt" style="color: #AD0000;">int</span> res <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> j <span class="op" style="color: #5E5E5E;">=</span> height<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> j<span class="op" style="color: #5E5E5E;">;)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-11">            res <span class="op" style="color: #5E5E5E;">=</span> max<span class="op" style="color: #5E5E5E;">(</span>res<span class="op" style="color: #5E5E5E;">,</span> min<span class="op" style="color: #5E5E5E;">(</span>height<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">],</span> height<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">-</span> i<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb1-12">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>height<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;</span> height<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">])</span> j<span class="op" style="color: #5E5E5E;">--;</span></span>
<span id="cb1-13">            <span class="cf" style="color: #003B4F;">else</span> i<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb1-14">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-16">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-17"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="整数转罗马数字" class="level2">
<h2 class="anchored" data-anchor-id="整数转罗马数字">12. 整数转罗马数字</h2>
<p>罗马数字包含以下七种字符：&nbsp;I，&nbsp;V，&nbsp;X，&nbsp;L，C，D&nbsp;和&nbsp;M。</p>
<p>字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000 例如， 罗马数字 2 写做&nbsp;II&nbsp;，即为两个并列的 1。12 写做&nbsp;XII&nbsp;，即为&nbsp;X&nbsp;+&nbsp;II&nbsp;。 27 写做&nbsp;&nbsp;XXVII, 即为&nbsp;XX&nbsp;+&nbsp;V&nbsp;+&nbsp;II&nbsp;。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;IIII，而是&nbsp;IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;IX。这个特殊的规则只适用于以下六种情况：</p>
<p>I&nbsp;可以放在&nbsp;V&nbsp;(5) 和&nbsp;X&nbsp;(10) 的左边，来表示 4 和 9。 X&nbsp;可以放在&nbsp;L&nbsp;(50) 和&nbsp;C&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp; C&nbsp;可以放在&nbsp;D&nbsp;(500) 和&nbsp;M&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。 给你一个整数，将其转为罗马数字。</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;string&gt;</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb2-8">    string intToRoman<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> num<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-9">        <span class="dt" style="color: #AD0000;">int</span> values<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-10">            <span class="dv" style="color: #AD0000;">1000</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-11">            <span class="dv" style="color: #AD0000;">900</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">400</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">100</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-12">            <span class="dv" style="color: #AD0000;">90</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">40</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-13">            <span class="dv" style="color: #AD0000;">9</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-14">        <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb2-15"></span>
<span id="cb2-16">        string reps<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-17">           <span class="st" style="color: #20794D;">"M"</span><span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb2-18">           <span class="st" style="color: #20794D;">"CM"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"D"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"CD"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"C"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-19">           <span class="st" style="color: #20794D;">"XC"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"L"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"XL"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"X"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb2-20">           <span class="st" style="color: #20794D;">"IX"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"V"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"IV"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"I"</span></span>
<span id="cb2-21">        <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb2-22">        </span>
<span id="cb2-23">        string res <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-24">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">13</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-25">            <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>num <span class="op" style="color: #5E5E5E;">&gt;=</span> values<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-26">                num <span class="op" style="color: #5E5E5E;">-=</span> values<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb2-27">                res <span class="op" style="color: #5E5E5E;">+=</span> reps<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb2-28">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-29">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-30">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-31">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-32"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="罗马数字转整数" class="level2">
<h2 class="anchored" data-anchor-id="罗马数字转整数">13. 罗马数字转整数</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;unordered_map&gt;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-8">    <span class="dt" style="color: #AD0000;">int</span> romanToInt<span class="op" style="color: #5E5E5E;">(</span>string s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">        unordered_map<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> hash<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-10">        <span class="dt" style="color: #AD0000;">int</span> res <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-11">        hash<span class="op" style="color: #5E5E5E;">[</span><span class="ch" style="color: #20794D;">'I'</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> hash<span class="op" style="color: #5E5E5E;">[</span><span class="ch" style="color: #20794D;">'V'</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-12">        hash<span class="op" style="color: #5E5E5E;">[</span><span class="ch" style="color: #20794D;">'X'</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">,</span> hash<span class="op" style="color: #5E5E5E;">[</span><span class="ch" style="color: #20794D;">'L'</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-13">        hash<span class="op" style="color: #5E5E5E;">[</span><span class="ch" style="color: #20794D;">'C'</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span><span class="op" style="color: #5E5E5E;">,</span> hash<span class="op" style="color: #5E5E5E;">[</span><span class="ch" style="color: #20794D;">'D'</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-14">        hash<span class="op" style="color: #5E5E5E;">[</span><span class="ch" style="color: #20794D;">'M'</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1000</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-15"></span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-17">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> hash<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]]</span> <span class="op" style="color: #5E5E5E;">&lt;</span> hash<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">[</span>i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-18">                res <span class="op" style="color: #5E5E5E;">-=</span> hash<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]];</span></span>
<span id="cb3-19">            <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-20">                res <span class="op" style="color: #5E5E5E;">+=</span> hash<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]];</span></span>
<span id="cb3-21">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-22">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-23">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-24">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-25"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="最长公共前缀" class="level2">
<h2 class="anchored" data-anchor-id="最长公共前缀">14. 最长公共前缀</h2>
<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 ““。</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb4-8">    string longestCommonPrefix<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>string<span class="op" style="color: #5E5E5E;">&gt;&amp;</span> strs<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-9">        string res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>strs<span class="op" style="color: #5E5E5E;">.</span>empty<span class="op" style="color: #5E5E5E;">())</span> <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-13">            <span class="dt" style="color: #AD0000;">char</span> c <span class="op" style="color: #5E5E5E;">=</span> strs<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">][</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb4-14">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">auto</span> <span class="op" style="color: #5E5E5E;">&amp;</span>str <span class="op" style="color: #5E5E5E;">:</span> strs<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-15">                <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&gt;=</span> str<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">||</span> c <span class="op" style="color: #5E5E5E;">!=</span> str<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-16">                    <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-17">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-18">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-19">            res <span class="op" style="color: #5E5E5E;">+=</span> c<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-20">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-22"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="三数之和" class="level2">
<h2 class="anchored" data-anchor-id="三数之和">15. 三数之和</h2>
<p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请</p>
<p>你返回所有和为 0 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb5-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;algorithm&gt;</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb5-9">    vector<span class="op" style="color: #5E5E5E;">&lt;</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&gt;</span> threeSum<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> nums<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-10">        vector<span class="op" style="color: #5E5E5E;">&lt;</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&gt;</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-11">        sort<span class="op" style="color: #5E5E5E;">(</span>nums<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> nums<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">());</span></span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> nums<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-13">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> nums<span class="op" style="color: #5E5E5E;">[</span>i <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">])</span> <span class="cf" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-14">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">=</span> i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> k <span class="op" style="color: #5E5E5E;">=</span> nums<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> j <span class="op" style="color: #5E5E5E;">&lt;</span> k<span class="op" style="color: #5E5E5E;">;</span> j<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-15">                <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">&gt;</span> i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> nums<span class="op" style="color: #5E5E5E;">[</span>j <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">])</span> <span class="cf" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-16">                <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">&lt;</span> k <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>k <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> k<span class="op" style="color: #5E5E5E;">--;</span></span>
<span id="cb5-17">                <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-18">                    res<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">({</span>nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">],</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">],</span> nums<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]});</span></span>
<span id="cb5-19">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-20">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-21">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-22">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-23">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-24"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="最接近的三数之和" class="level2">
<h2 class="anchored" data-anchor-id="最接近的三数之和">16. 最接近的三数之和</h2>
<p>给你一个长度为 n 的整数数组&nbsp;nums&nbsp;和 一个目标值&nbsp;target。请你从 nums 中选出三个整数，使它们的和与&nbsp;target&nbsp;最接近。</p>
<p>返回这三个数的和。</p>
<p>假定每组输入只存在恰好一个解。</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;algorithm&gt;</span></span>
<span id="cb6-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb6-4"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb6-10">    <span class="dt" style="color: #AD0000;">int</span> threeSumClosest<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> nums<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> target<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-11">        sort<span class="op" style="color: #5E5E5E;">(</span>nums<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> nums<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">());</span></span>
<span id="cb6-12">        pair<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> res<span class="op" style="color: #5E5E5E;">(</span>INT_MAX<span class="op" style="color: #5E5E5E;">,</span> INT_MAX<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> nums<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-14">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> nums<span class="op" style="color: #5E5E5E;">[</span>i <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">])</span> <span class="cf" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-15">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">=</span> i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> k <span class="op" style="color: #5E5E5E;">=</span> nums<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> j <span class="op" style="color: #5E5E5E;">&lt;</span> k<span class="op" style="color: #5E5E5E;">;</span> j<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-16">                <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">&lt;</span> k <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>k <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> target<span class="op" style="color: #5E5E5E;">)</span> k<span class="op" style="color: #5E5E5E;">--;</span></span>
<span id="cb6-17">                <span class="dt" style="color: #AD0000;">int</span> s <span class="op" style="color: #5E5E5E;">=</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb6-18">                res <span class="op" style="color: #5E5E5E;">=</span> min<span class="op" style="color: #5E5E5E;">(</span>res<span class="op" style="color: #5E5E5E;">,</span> make_pair<span class="op" style="color: #5E5E5E;">(</span>abs<span class="op" style="color: #5E5E5E;">(</span>s <span class="op" style="color: #5E5E5E;">-</span> target<span class="op" style="color: #5E5E5E;">),</span> s<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb6-19">                <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">&lt;</span> k <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-20">                    s <span class="op" style="color: #5E5E5E;">=</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>k <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb6-21">                    res <span class="op" style="color: #5E5E5E;">=</span> min<span class="op" style="color: #5E5E5E;">(</span>res<span class="op" style="color: #5E5E5E;">,</span> make_pair<span class="op" style="color: #5E5E5E;">(</span>target <span class="op" style="color: #5E5E5E;">-</span> s<span class="op" style="color: #5E5E5E;">,</span> s<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb6-22">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-23">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-24">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-25">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">.</span>second<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-26">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-27"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="电话号码的字母组合" class="level2">
<h2 class="anchored" data-anchor-id="电话号码的字母组合">17. 电话号码的字母组合</h2>
<p>给定一个仅包含数字&nbsp;2-9&nbsp;的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p>
<p>给出数字到字母的映射与电话按键相同。注意 1 不对应任何字母。</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;algorithm&gt;</span></span>
<span id="cb7-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb7-9">    vector<span class="op" style="color: #5E5E5E;">&lt;</span>string<span class="op" style="color: #5E5E5E;">&gt;</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-10">    string ref<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-11">        <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"abc"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"def"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb7-12">        <span class="st" style="color: #20794D;">"ghi"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"jkl"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"mno"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb7-13">        <span class="st" style="color: #20794D;">"pqrs"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"tuv"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"wxyz"</span></span>
<span id="cb7-14">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb7-15"></span>
<span id="cb7-16">    vector<span class="op" style="color: #5E5E5E;">&lt;</span>string<span class="op" style="color: #5E5E5E;">&gt;</span> letterCombinations<span class="op" style="color: #5E5E5E;">(</span>string digits<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-17">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>digits<span class="op" style="color: #5E5E5E;">.</span>empty<span class="op" style="color: #5E5E5E;">())</span> <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-18">        dfs<span class="op" style="color: #5E5E5E;">(</span>digits<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-19">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-21"></span>
<span id="cb7-22">    <span class="dt" style="color: #AD0000;">void</span> dfs<span class="op" style="color: #5E5E5E;">(</span>string<span class="op" style="color: #5E5E5E;">&amp;</span> digits<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> len<span class="op" style="color: #5E5E5E;">,</span> string path<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-23">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>len <span class="op" style="color: #5E5E5E;">==</span> digits<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> res<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>path<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-24">        <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-25">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">auto</span><span class="op" style="color: #5E5E5E;">&amp;</span> c <span class="op" style="color: #5E5E5E;">:</span> ref<span class="op" style="color: #5E5E5E;">[</span>digits<span class="op" style="color: #5E5E5E;">[</span>len<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="ch" style="color: #20794D;">'0'</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-26">                dfs<span class="op" style="color: #5E5E5E;">(</span>digits<span class="op" style="color: #5E5E5E;">,</span> len <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> path <span class="op" style="color: #5E5E5E;">+</span> c<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-27">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-28">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-30"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="四数之和" class="level2">
<h2 class="anchored" data-anchor-id="四数之和">18. 四数之和</h2>
<p>给你一个由 n 个整数组成的数组&nbsp;nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组&nbsp;[nums[a], nums[b], nums[c], nums[d]]&nbsp;（若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<p>0 &lt;= a, b, c, d&nbsp;&lt; n a、b、c 和 d 互不相同 nums[a] + nums[b] + nums[c] + nums[d] == target 你可以按 任意顺序 返回答案 。</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb8-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;algorithm&gt;</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb8-9">    vector<span class="op" style="color: #5E5E5E;">&lt;</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&gt;</span> fourSum<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> nums<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> target<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-10">        sort<span class="op" style="color: #5E5E5E;">(</span>nums<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> nums<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">());</span></span>
<span id="cb8-11">        <span class="dt" style="color: #AD0000;">int</span> l <span class="op" style="color: #5E5E5E;">=</span> nums<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb8-12">        vector<span class="op" style="color: #5E5E5E;">&lt;</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&gt;</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-13">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> l<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-14">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> nums<span class="op" style="color: #5E5E5E;">[</span>i <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">])</span> <span class="cf" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-15">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">=</span> i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> j <span class="op" style="color: #5E5E5E;">&lt;</span> l<span class="op" style="color: #5E5E5E;">;</span> j<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-16">                <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">&gt;</span> i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> nums<span class="op" style="color: #5E5E5E;">[</span>j <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">])</span> <span class="cf" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-17">                <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> k <span class="op" style="color: #5E5E5E;">=</span> j <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> u <span class="op" style="color: #5E5E5E;">=</span> l <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> k <span class="op" style="color: #5E5E5E;">&lt;</span> u<span class="op" style="color: #5E5E5E;">;</span> k<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-18">                    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>k <span class="op" style="color: #5E5E5E;">&gt;</span> j <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> nums<span class="op" style="color: #5E5E5E;">[</span>k <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">])</span> <span class="cf" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-19">                    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>u <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&gt;</span> k <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>u <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> target<span class="op" style="color: #5E5E5E;">)</span> u<span class="op" style="color: #5E5E5E;">--;</span></span>
<span id="cb8-20">                    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> nums<span class="op" style="color: #5E5E5E;">[</span>u<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> target<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-21">                        res<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">({</span>nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">],</span> nums<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">],</span> nums<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">],</span> nums<span class="op" style="color: #5E5E5E;">[</span>u<span class="op" style="color: #5E5E5E;">]});</span></span>
<span id="cb8-22">                    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-23">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-24">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-25">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-26">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-27">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-28"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="删除链表的倒数第-n-个结点" class="level2">
<h2 class="anchored" data-anchor-id="删除链表的倒数第-n-个结点">19. 删除链表的倒数第 N 个结点</h2>
<p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb9-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb9-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;algorithm&gt;</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="kw" style="color: #003B4F;">struct</span> ListNode <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-8">    <span class="dt" style="color: #AD0000;">int</span> val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-9">    ListNode <span class="op" style="color: #5E5E5E;">*</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-10">    ListNode<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">nullptr</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb9-11">    ListNode<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span>x<span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">nullptr</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb9-12">    ListNode<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">,</span> ListNode <span class="op" style="color: #5E5E5E;">*</span>next<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span>x<span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span>next<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb9-13"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb9-14"> </span>
<span id="cb9-15"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-16"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb9-17">    ListNode<span class="op" style="color: #5E5E5E;">*</span> removeNthFromEnd<span class="op" style="color: #5E5E5E;">(</span>ListNode<span class="op" style="color: #5E5E5E;">*</span> head<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> n<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-18">        <span class="kw" style="color: #003B4F;">auto</span> dummy <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> ListNode<span class="op" style="color: #5E5E5E;">(-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-19">        dummy<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> head<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-20">        </span>
<span id="cb9-21">        <span class="dt" style="color: #AD0000;">int</span> k <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-22">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">auto</span> p <span class="op" style="color: #5E5E5E;">=</span> dummy<span class="op" style="color: #5E5E5E;">;</span> p<span class="op" style="color: #5E5E5E;">;</span> p <span class="op" style="color: #5E5E5E;">=</span> p<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">)</span> k<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb9-23"></span>
<span id="cb9-24">        <span class="kw" style="color: #003B4F;">auto</span> p <span class="op" style="color: #5E5E5E;">=</span> dummy<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-25">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> k <span class="op" style="color: #5E5E5E;">-</span> n <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> p <span class="op" style="color: #5E5E5E;">=</span> p<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-26">        p<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> p<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-27"></span>
<span id="cb9-28">        <span class="cf" style="color: #003B4F;">return</span> dummy<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span> </span>
<span id="cb9-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-30"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="有效的括号" class="level2">
<h2 class="anchored" data-anchor-id="有效的括号">20. 有效的括号</h2>
<p>给定一个只包括 ‘(’，‘)’，‘{’，‘}’，‘[’，’]’&nbsp;的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 每个右括号都有一个对应的相同类型的左括号.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;string&gt;</span></span>
<span id="cb10-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;stack&gt;</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb10-8">    <span class="dt" style="color: #AD0000;">bool</span> isValid<span class="op" style="color: #5E5E5E;">(</span>string s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-9">        stack<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">&gt;</span> stk<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-10"></span>
<span id="cb10-11">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">auto</span><span class="op" style="color: #5E5E5E;">&amp;</span> c <span class="op" style="color: #5E5E5E;">:</span> s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-12">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>c <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'('</span> <span class="op" style="color: #5E5E5E;">||</span> c <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'{'</span> <span class="op" style="color: #5E5E5E;">||</span> c <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'['</span><span class="op" style="color: #5E5E5E;">)</span> stk<span class="op" style="color: #5E5E5E;">.</span>push<span class="op" style="color: #5E5E5E;">(</span>c<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-13">            <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-14">                <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>stk<span class="op" style="color: #5E5E5E;">.</span>empty<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> abs<span class="op" style="color: #5E5E5E;">(</span>c <span class="op" style="color: #5E5E5E;">-</span> stk<span class="op" style="color: #5E5E5E;">.</span>top<span class="op" style="color: #5E5E5E;">())</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> stk<span class="op" style="color: #5E5E5E;">.</span>pop<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-15">                <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">return</span> <span class="kw" style="color: #003B4F;">false</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-16">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-17">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-18">        <span class="cf" style="color: #003B4F;">return</span> stk<span class="op" style="color: #5E5E5E;">.</span>empty<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-19">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-20"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>


</section>

 ]]></description>
  <category>cpp</category>
  <category>algorithms</category>
  <category>LeetCode</category>
  <guid>https://lov3camille.top/posts/leetcode_11-20/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>&lt;克拉拉与太阳&gt;读后感</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/klara_and_the_sun/index.html</link>
  <description><![CDATA[ 



<section id="写在之前的话" class="level2">
<h2 class="anchored" data-anchor-id="写在之前的话">写在之前的话</h2>
<p>很久没写过读后感了，上次写应该还是在高中，从小学到高中读过很多书和期刊，也正是这些书塑造了我的一部分人格，所以我必须感谢这些书，以及给予我阅读条件的爸妈、外婆、老师。</p>
<p>关于《克拉拉与太阳》这本书，从买回来到读完，花了快一年，深圳买来，上海读完，期间也换了工作，经历了似乎发生了很多事又似乎什么都没发生的2022年。</p>
<p>至于我为什么花了一年才读完，相信现代人很能理解，因为手机和电脑已经占据了我们的工作与生活，重新拿起纸质书本就不容易。但仔细一想，其实每天读一些也能很快读完，说到底还是自己懒，但毕竟这是这几年第一本完整读完的纸质书，值得纪念一下。</p>
</section>
<section id="什么是克拉拉" class="level2">
<h2 class="anchored" data-anchor-id="什么是克拉拉">什么是克拉拉</h2>
<p>克拉拉是一个专为陪伴儿童而设计的太阳能人工智能机器人，具有极高的观察、推理与共情能力。在石黑一雄的采访中，他有提到很关注甚至担忧人工智能的发展，但我个人认为人类要理解<a href="https://yoshuabengio.org/research/">产生智力的机制</a>这一关键因素才有可能生产出有共情能力的机器人，而我们离这一步还有很长的路要走。</p>
<p>那么显然在书中人类社会已经具备了生产这类机器人的能力，并且还在不断升级，因为克拉拉并不是最新型号的那一批。而且从书的结尾也不难发现，这已经成了一条流水线，从生产到投入商店到折旧回收，已经不足为奇。还有一个很重要的点是这些机器人只会一心一意地为主人着想，百分之百利他。这一点从克拉拉宁可损失自己的机油（类似于人类献血、献器官）也要实现一个并没有证实对克拉拉的病情有帮助的可能可以看出。</p>
<p>于是回到书中卡帕尔迪先生和乔西一家所争执的点：<em>人工智能机器人真的可以替代人类吗？</em>这其实也是作者给读者提出的一个问题，我本人的回答是不可以，译者的后记中有一句话我觉得特别好，这里摘抄出来：<em>正是由于自私的欲望与升华的渴望并存，人类的心中才会充满了矛盾、彷徨与痛苦；没有了自私那下坠的重力，一切崇高、向上的人性也就虚无缥缈得失去了分量。</em> 而后来卡帕尔迪又去找克里西，想要对她做逆向工程来安抚社会上对人工智能表示担忧的人们，这说明卡帕尔迪自认为人工智能依然是可编程、可推导的，那这和他所说的人工智能可以替代人类是不是矛盾了呢？是不是说明卡帕尔迪内心其实也不觉得可以用一个机器人代替人类，也许只是想赚钱罢了。</p>
</section>
<section id="什么是太阳" class="level2">
<h2 class="anchored" data-anchor-id="什么是太阳">什么是太阳</h2>
<p>回到这本书上，我是在一个沐浴着午后的阳光的图书馆里读完的这本书，同时身边可能还充斥着很多新冠阳性病人，那么这本书里的太阳是什么呢？</p>
<p>天真的克拉拉（人工智能机器人）相信太阳有神奇的力量，可以治愈疾病，而实际上乔西也确实在沐浴阳光后渐渐好转，这奠定了这是一本童话的基础，因为众所周知太阳并不能治愈疾病。然而对于克拉拉来说， 太阳可以为其提供能量，所以对她来说太阳就是她心中的上帝，类似于人类社会中基督教的上帝，或者佛教的如来等。所以当我们去寺庙或者在胸口画十字架的时候，我们是否也很天真呢？</p>
<p>当然，除了物理意义上的太阳，还有一个很重要的点，那就是<em>爱</em>， 不管是克拉拉之于乔西，抑或里克之于乔西，克里西之于乔西，都是<em>爱</em>，一种如暖阳般温暖我们却又看不见摸不着的东西。</p>
<p>正是因为这些爱，才有了最后完美的结局。这让我想起了诺兰的《星际穿越》，一部完美地诠释了什么叫做“<em>爱</em>可以穿越时空”的电影。</p>
</section>
<section id="关于结局" class="level2">
<h2 class="anchored" data-anchor-id="关于结局">关于结局</h2>
<p>我是一个喜欢好的结局但又不希望好的作品就此陷入窠臼的人，这不是出于自认为能看透一切的自负或是受“喜剧的内核是悲剧”之类言论的影响。因为我始终认为好的作品，书或者电影，是需要留给读者和观众一定的想象空间的，类似于“留白”。</p>
<p>而这个结局，的确让我想到了很多，并不局限于本书。首先是参考石黑一雄的女儿所说，这不是一本可以给孩子看的童话，它太黑暗了，于是我想到了一个大四的时候玩的游戏：《Fran Bow》，也是一个不管从画面还是故事上都十分黑暗的一款游戏，玩家们对这游戏的结局的解读也是各色各样，有人觉得整个过程都是Fran幻想出来的，有人觉得最后Fran确实去到了一个理想的世界，但就如游戏最后那句话：</p>
<blockquote class="blockquote">
<p><em>“I still don’t know many things…”</em></p>
</blockquote>
<blockquote class="blockquote">
<p><em>“But one thing I do know…”</em></p>
</blockquote>
<blockquote class="blockquote">
<p><em>“That between guilt and fear…”</em></p>
</blockquote>
<blockquote class="blockquote">
<p><em>“I choose happiness…”</em></p>
</blockquote>
<p>是的，你可以选择一个开心的结局，这没有对错。</p>
<p>所以我也更愿意相信克拉拉陪着乔西度过了童年，圆满完成了自己的使命，在自己的最后时刻幸福地回想着曾经的点点滴滴，这不也是我们作为人类所希望的吗？</p>


</section>

 ]]></description>
  <category>reading</category>
  <guid>https://lov3camille.top/posts/klara_and_the_sun/index.html</guid>
  <pubDate>Sat, 17 Dec 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>LeetCode 周赛记录</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/leetcode_weekly_competition/index.html</link>
  <description><![CDATA[ 



<section id="第324场周赛" class="level2">
<h2 class="anchored" data-anchor-id="第324场周赛">第324场周赛</h2>
<section id="统计相似字符串对的数目" class="level3">
<h3 class="anchored" data-anchor-id="统计相似字符串对的数目">统计相似字符串对的数目</h3>
<p>给你一个下标从 0 开始的字符串数组 words 。</p>
<p>如果两个字符串由相同的字符组成，则认为这两个字符串 相似 。</p>
<p>例如，“abca” 和 “cba” 相似，因为它们都由字符 ‘a’、‘b’、‘c’ 组成。 然而，“abacba” 和 “bcfd” 不相似，因为它们不是相同字符组成的。 请你找出满足字符串&nbsp;words[i] 和 words[j] 相似的下标对 (i, j) ，并返回下标对的数目，其中 0 &lt;= i &lt; j &lt;= word.length - 1 。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;unordered_map&gt;</span></span>
<span id="cb1-4"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;algorithm&gt;</span></span>
<span id="cb1-5"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb1-11">    <span class="dt" style="color: #AD0000;">int</span> similarPairs<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span>string<span class="op" style="color: #5E5E5E;">&gt;&amp;</span> words<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-12">        <span class="dt" style="color: #AD0000;">int</span> n <span class="op" style="color: #5E5E5E;">=</span> words<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb1-13">        <span class="dt" style="color: #AD0000;">int</span> ans <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-14">        unordered_map<span class="op" style="color: #5E5E5E;">&lt;</span>string<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> mp<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-16">            string s <span class="op" style="color: #5E5E5E;">=</span> words<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb1-17">            sort<span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> s<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">());</span></span>
<span id="cb1-18">            s<span class="op" style="color: #5E5E5E;">.</span>erase<span class="op" style="color: #5E5E5E;">(</span>unique<span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> s<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">()),</span> s<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">());</span></span>
<span id="cb1-19">            ans <span class="op" style="color: #5E5E5E;">+=</span> mp<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb1-20">            mp<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">]++;</span></span>
<span id="cb1-21">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;">return</span> ans<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-23">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-24"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="使用质因数之和替换后可以取到的最小值" class="level3">
<h3 class="anchored" data-anchor-id="使用质因数之和替换后可以取到的最小值">使用质因数之和替换后可以取到的最小值</h3>
<p>给你一个正整数 n 。</p>
<p>请你将 n 的值替换为 n 的 质因数 之和，重复这一过程。</p>
<p>注意，如果 n 能够被某个质因数多次整除，则在求和时，应当包含这个质因数同样次数。 返回 n 可以取到的最小值。</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span><span class="pp" style="color: #AD0000;">     </span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;algorithm&gt;</span><span class="pp" style="color: #AD0000;">    </span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb2-8">    <span class="co" style="color: #5E5E5E;">// you need to prove that it is a monotonically decreasing function.</span></span>
<span id="cb2-9">    <span class="dt" style="color: #AD0000;">int</span> work<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> n<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-10">        <span class="dt" style="color: #AD0000;">int</span> res <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-11"></span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">*</span> i <span class="op" style="color: #5E5E5E;">&lt;=</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-13">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>n <span class="op" style="color: #5E5E5E;">%</span> i <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-14">                <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>n <span class="op" style="color: #5E5E5E;">%</span> i <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> n <span class="op" style="color: #5E5E5E;">/=</span> i<span class="op" style="color: #5E5E5E;">,</span> res <span class="op" style="color: #5E5E5E;">+=</span> i<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-15">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-16">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>n <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> res <span class="op" style="color: #5E5E5E;">+=</span> n<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-19">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-20"></span>
<span id="cb2-21">    <span class="dt" style="color: #AD0000;">int</span> smallestValue<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> n<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-22">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-23">            <span class="dt" style="color: #AD0000;">int</span> next <span class="op" style="color: #5E5E5E;">=</span> work<span class="op" style="color: #5E5E5E;">(</span>n<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-24">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>next <span class="op" style="color: #5E5E5E;">==</span> n<span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-25">            n <span class="op" style="color: #5E5E5E;">=</span> next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-26">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-27">        <span class="cf" style="color: #003B4F;">return</span> n<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-28">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-29"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>cpp</category>
  <category>algorithms</category>
  <category>LeetCode</category>
  <guid>https://lov3camille.top/posts/leetcode_weekly_competition/index.html</guid>
  <pubDate>Sat, 17 Dec 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>LeetCode 刷题记录 1 - 10</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/leetcode_1-10/index.html</link>
  <description><![CDATA[ 



<section id="两数之和" class="level2">
<h2 class="anchored" data-anchor-id="两数之和">1. 两数之和</h2>
<p>给定一个整数数组 nums&nbsp;和一个整数目标值 target，请你在该数组中找出 和为目标值 target&nbsp; 的那&nbsp;两个&nbsp;整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;unordered_map&gt;</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb1-9">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> twoSum<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> nums<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> target<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-10">        unordered_map<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> heap<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;=</span> nums<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-12">            <span class="dt" style="color: #AD0000;">int</span> r <span class="op" style="color: #5E5E5E;">=</span> target <span class="op" style="color: #5E5E5E;">-</span> nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb1-13">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>heap<span class="op" style="color: #5E5E5E;">.</span>count<span class="op" style="color: #5E5E5E;">(</span>r<span class="op" style="color: #5E5E5E;">))</span> <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">{</span>heap<span class="op" style="color: #5E5E5E;">[</span>r<span class="op" style="color: #5E5E5E;">],</span> i<span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb1-14">            heap<span class="op" style="color: #5E5E5E;">[</span>nums<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]]</span> <span class="op" style="color: #5E5E5E;">=</span> i<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-15">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">{};</span></span>
<span id="cb1-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="两数相加" class="level2">
<h2 class="anchored" data-anchor-id="两数相加">2. 两数相加</h2>
<p>给你两个&nbsp;非空 的链表，表示两个非负的整数。它们每位数字都是按照&nbsp;逆序&nbsp;的方式存储的，并且每个节点只能存储&nbsp;一位&nbsp;数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0&nbsp;开头。</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">//  Definition for singly-linked list.</span></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;">struct</span> ListNode <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-7">    <span class="dt" style="color: #AD0000;">int</span> val<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-8">    ListNode <span class="op" style="color: #5E5E5E;">*</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-9">    ListNode<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">nullptr</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb2-10">    ListNode<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span>x<span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">nullptr</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb2-11">    ListNode<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">,</span> ListNode <span class="op" style="color: #5E5E5E;">*</span>next<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">:</span> val<span class="op" style="color: #5E5E5E;">(</span>x<span class="op" style="color: #5E5E5E;">),</span> next<span class="op" style="color: #5E5E5E;">(</span>next<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{}</span></span>
<span id="cb2-12"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb2-16">    ListNode<span class="op" style="color: #5E5E5E;">*</span> addTwoNumbers<span class="op" style="color: #5E5E5E;">(</span>ListNode<span class="op" style="color: #5E5E5E;">*</span> l1<span class="op" style="color: #5E5E5E;">,</span> ListNode<span class="op" style="color: #5E5E5E;">*</span> l2<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-17">        <span class="kw" style="color: #003B4F;">auto</span> dummy <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> ListNode<span class="op" style="color: #5E5E5E;">(-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">),</span> cur <span class="op" style="color: #5E5E5E;">=</span> dummy<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-18">        <span class="dt" style="color: #AD0000;">int</span> t <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-19">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>l1 <span class="op" style="color: #5E5E5E;">||</span> l2 <span class="op" style="color: #5E5E5E;">||</span> t<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-20">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>l1<span class="op" style="color: #5E5E5E;">)</span> t <span class="op" style="color: #5E5E5E;">+=</span> l1<span class="op" style="color: #5E5E5E;">-&gt;</span>val<span class="op" style="color: #5E5E5E;">,</span> l1 <span class="op" style="color: #5E5E5E;">=</span> l1<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-21">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>l2<span class="op" style="color: #5E5E5E;">)</span> t <span class="op" style="color: #5E5E5E;">+=</span> l2<span class="op" style="color: #5E5E5E;">-&gt;</span>val<span class="op" style="color: #5E5E5E;">,</span> l2 <span class="op" style="color: #5E5E5E;">=</span> l2<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-22">            cur<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> ListNode<span class="op" style="color: #5E5E5E;">(</span>t <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-23">            cur <span class="op" style="color: #5E5E5E;">=</span> cur<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-24">            t <span class="op" style="color: #5E5E5E;">/=</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-25">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-26">        <span class="cf" style="color: #003B4F;">return</span> dummy<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-27">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-28"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="无重复字符的最长字串" class="level2">
<h2 class="anchored" data-anchor-id="无重复字符的最长字串">3. 无重复字符的最长字串</h2>
<p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;unordered_map&gt;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb3-8">    <span class="dt" style="color: #AD0000;">int</span> lengthOfLongestSubstring<span class="op" style="color: #5E5E5E;">(</span>string s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">        unordered_map<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> heap<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-10">        <span class="dt" style="color: #AD0000;">int</span> res <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-11">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> j <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-12">            heap<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]]++;</span></span>
<span id="cb3-13">            <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>heap<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]]</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> heap<span class="op" style="color: #5E5E5E;">[</span>s<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">++]]--;</span></span>
<span id="cb3-14">            res <span class="op" style="color: #5E5E5E;">=</span> max<span class="op" style="color: #5E5E5E;">(</span>res<span class="op" style="color: #5E5E5E;">,</span> i <span class="op" style="color: #5E5E5E;">-</span> j <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-15">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="寻找两个正序数组的中位数" class="level2">
<h2 class="anchored" data-anchor-id="寻找两个正序数组的中位数">4. 寻找两个正序数组的中位数</h2>
<p>给定两个大小分别为 m 和 n 的正序（从小到大）数组&nbsp;nums1 和&nbsp;nums2。请你找出并返回这两个正序数组的 中位数 。</p>
<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb4-8">    <span class="dt" style="color: #AD0000;">double</span> findMedianSortedArrays<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> nums1<span class="op" style="color: #5E5E5E;">,</span> vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> nums2<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-9">        <span class="dt" style="color: #AD0000;">int</span> total <span class="op" style="color: #5E5E5E;">=</span> nums1<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">+</span> nums2<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>total <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-11">            <span class="dt" style="color: #AD0000;">int</span> left <span class="op" style="color: #5E5E5E;">=</span> findKthNumber<span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> nums2<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> total <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb4-12">            <span class="dt" style="color: #AD0000;">int</span> right <span class="op" style="color: #5E5E5E;">=</span> findKthNumber<span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> nums2<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> total <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb4-13">            <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">(</span>left <span class="op" style="color: #5E5E5E;">+</span> right<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">2.0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-14">        <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-15">            <span class="cf" style="color: #003B4F;">return</span> findKthNumber<span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> nums2<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> total <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb4-16">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-18"></span>
<span id="cb4-19">    <span class="dt" style="color: #AD0000;">int</span> findKthNumber<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> nums1<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> i<span class="op" style="color: #5E5E5E;">,</span> vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span> nums2<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> j<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> k<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-20">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">((</span>nums1<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> i<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">(</span>nums2<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> j<span class="op" style="color: #5E5E5E;">))</span> <span class="cf" style="color: #003B4F;">return</span> findKthNumber<span class="op" style="color: #5E5E5E;">(</span>nums2<span class="op" style="color: #5E5E5E;">,</span> j<span class="op" style="color: #5E5E5E;">,</span> nums1<span class="op" style="color: #5E5E5E;">,</span> i<span class="op" style="color: #5E5E5E;">,</span> k<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb4-21">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">==</span> i<span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> nums2<span class="op" style="color: #5E5E5E;">[</span>j <span class="op" style="color: #5E5E5E;">+</span> k <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>k <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> min<span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">],</span> nums2<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb4-23">        <span class="dt" style="color: #AD0000;">int</span> si <span class="op" style="color: #5E5E5E;">=</span> min<span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">+</span> k <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())),</span> sj <span class="op" style="color: #5E5E5E;">=</span> j <span class="op" style="color: #5E5E5E;">+</span> k <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-24">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">[</span>si <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;</span> nums2<span class="op" style="color: #5E5E5E;">[</span>sj <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-25">            <span class="cf" style="color: #003B4F;">return</span> findKthNumber<span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">,</span> i<span class="op" style="color: #5E5E5E;">,</span> nums2<span class="op" style="color: #5E5E5E;">,</span> sj<span class="op" style="color: #5E5E5E;">,</span> k <span class="op" style="color: #5E5E5E;">-</span> k  <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb4-26">        <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-27">            <span class="cf" style="color: #003B4F;">return</span> findKthNumber<span class="op" style="color: #5E5E5E;">(</span>nums1<span class="op" style="color: #5E5E5E;">,</span> si<span class="op" style="color: #5E5E5E;">,</span> nums2<span class="op" style="color: #5E5E5E;">,</span> j<span class="op" style="color: #5E5E5E;">,</span> k <span class="op" style="color: #5E5E5E;">-</span> <span class="op" style="color: #5E5E5E;">(</span>si <span class="op" style="color: #5E5E5E;">-</span> i<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb4-28">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-30"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="最长回文子串" class="level2">
<h2 class="anchored" data-anchor-id="最长回文子串">5. 最长回文子串</h2>
<p>给你一个字符串 s，找到 s 中最长的回文子串。</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb5-7">    string longestPalindrome<span class="op" style="color: #5E5E5E;">(</span>string s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-8">        string res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-10">            <span class="dt" style="color: #AD0000;">int</span> l <span class="op" style="color: #5E5E5E;">=</span> i <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> r <span class="op" style="color: #5E5E5E;">=</span> i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// odd</span></span>
<span id="cb5-11">            <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> r <span class="op" style="color: #5E5E5E;">&lt;=</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> s<span class="op" style="color: #5E5E5E;">[</span>l<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> s<span class="op" style="color: #5E5E5E;">[</span>r<span class="op" style="color: #5E5E5E;">])</span> l<span class="op" style="color: #5E5E5E;">--,</span> r<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb5-12">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>res<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&lt;</span> r <span class="op" style="color: #5E5E5E;">-</span> l <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> res <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">.</span>substr<span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> r <span class="op" style="color: #5E5E5E;">-</span> l <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-13"></span>
<span id="cb5-14">            l <span class="op" style="color: #5E5E5E;">=</span> i<span class="op" style="color: #5E5E5E;">,</span> r <span class="op" style="color: #5E5E5E;">=</span> i <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// even</span></span>
<span id="cb5-15">            <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> r <span class="op" style="color: #5E5E5E;">&lt;=</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> s<span class="op" style="color: #5E5E5E;">[</span>l<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> s<span class="op" style="color: #5E5E5E;">[</span>r<span class="op" style="color: #5E5E5E;">])</span> l<span class="op" style="color: #5E5E5E;">--,</span> r<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb5-16">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>res<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&lt;</span> r <span class="op" style="color: #5E5E5E;">-</span> l <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> res <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">.</span>substr<span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> r <span class="op" style="color: #5E5E5E;">-</span> l <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-17">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-18">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-19">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-20"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="z字形变换" class="level2">
<h2 class="anchored" data-anchor-id="z字形变换">6. Z字形变换</h2>
<p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb6-7">    string convert<span class="op" style="color: #5E5E5E;">(</span>string s<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> numRows<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-8">        string res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-9">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>numRows <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> s<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> numRows<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-12">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">||</span> i <span class="op" style="color: #5E5E5E;">==</span> numRows <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-13">                <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">=</span> i<span class="op" style="color: #5E5E5E;">;</span> j <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> j <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> numRows <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-14">                    res <span class="op" style="color: #5E5E5E;">+=</span> s<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb6-15">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-16">            <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-17">                <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">=</span> i<span class="op" style="color: #5E5E5E;">,</span> k <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> numRows <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> i<span class="op" style="color: #5E5E5E;">;</span> j <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">||</span> k <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> j <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> numRows <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> k <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> numRows <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-18">                    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> res <span class="op" style="color: #5E5E5E;">+=</span> s<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb6-19">                    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>k <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> res <span class="op" style="color: #5E5E5E;">+=</span> s<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb6-20">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-21">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-22">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;">return</span> res<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-24">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-25"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="整数反转" class="level2">
<h2 class="anchored" data-anchor-id="整数反转">7. 整数反转</h2>
<p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围&nbsp;[−231,&nbsp; 231&nbsp;− 1] ，就返回 0。</p>
<p>假设环境不允许存储 64 位整数（有符号或无符号）。</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb7-8">    <span class="dt" style="color: #AD0000;">int</span> reverse<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-9">        <span class="dt" style="color: #AD0000;">int</span> r <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-10">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-11">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>r <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> r <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">(</span>INT_MAX <span class="op" style="color: #5E5E5E;">-</span> x <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-12">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>r <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> r <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">(</span>INT_MIN <span class="op" style="color: #5E5E5E;">-</span> x <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-13">            r <span class="op" style="color: #5E5E5E;">=</span> r <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> x <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-14">            x <span class="op" style="color: #5E5E5E;">/=</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-15">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;">return</span> r<span class="op" style="color: #5E5E5E;">;</span> </span>
<span id="cb7-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-18"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="字符串转换整数-atoi" class="level2">
<h2 class="anchored" data-anchor-id="字符串转换整数-atoi">8. 字符串转换整数 (atoi)</h2>
<p>请你来实现一个&nbsp;myAtoi(string s)&nbsp;函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</p>
<p>函数&nbsp;myAtoi(string s) 的算法如下：</p>
<p>读入字符串并丢弃无用的前导空格 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。 将前面步骤读入的这些数字转换为整数（即，“123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。 如果整数数超过 32 位有符号整数范围 [−231,&nbsp; 231&nbsp;− 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231&nbsp;− 1 的整数应该被固定为 231&nbsp;− 1 。 返回整数作为最终结果。 注意：</p>
<p>本题中的空白字符只包括空格字符 ’ ’ 。 除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb8-8">    <span class="dt" style="color: #AD0000;">int</span> myAtoi<span class="op" style="color: #5E5E5E;">(</span>string s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-9">        <span class="dt" style="color: #AD0000;">int</span> k <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-10">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>k <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-11">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">' '</span><span class="op" style="color: #5E5E5E;">)</span> k<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb8-12">            <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">break</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-13">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-14">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>k <span class="op" style="color: #5E5E5E;">==</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> </span>
<span id="cb8-15"></span>
<span id="cb8-16">        <span class="dt" style="color: #AD0000;">int</span> minus <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-17">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'-'</span><span class="op" style="color: #5E5E5E;">)</span> minus <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> k<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb8-18">        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'+'</span><span class="op" style="color: #5E5E5E;">)</span> k<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb8-19"></span>
<span id="cb8-20">        <span class="dt" style="color: #AD0000;">int</span> res <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-21">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>k <span class="op" style="color: #5E5E5E;">&lt;</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> s<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="ch" style="color: #20794D;">'0'</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> s<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="ch" style="color: #20794D;">'9'</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-22">            <span class="dt" style="color: #AD0000;">int</span> x <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="ch" style="color: #20794D;">'0'</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-23">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>minus <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> res <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">(</span>INT_MAX <span class="op" style="color: #5E5E5E;">-</span> x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> INT_MAX<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-24">            <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>minus <span class="op" style="color: #5E5E5E;">==</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;">-</span>res <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">(</span>INT_MIN <span class="op" style="color: #5E5E5E;">+</span> x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> INT_MIN<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-25">            <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>minus <span class="op" style="color: #5E5E5E;">==</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;">-</span>res <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">-</span> x <span class="op" style="color: #5E5E5E;">==</span> INT_MIN<span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> INT_MIN<span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// different from above</span></span>
<span id="cb8-26">            res <span class="op" style="color: #5E5E5E;">=</span> res <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-27">            k<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb8-28">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-29">        <span class="cf" style="color: #003B4F;">return</span> res <span class="op" style="color: #5E5E5E;">*</span> minus<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-30">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-31"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="回文数" class="level2">
<h2 class="anchored" data-anchor-id="回文数">9. 回文数</h2>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb9-7">    <span class="dt" style="color: #AD0000;">bool</span> isPalindrome<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-8">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-9"></span>
<span id="cb9-10">        <span class="dt" style="color: #AD0000;">int</span> y <span class="op" style="color: #5E5E5E;">=</span> x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-11">        <span class="dt" style="color: #AD0000;">long</span> <span class="dt" style="color: #AD0000;">long</span> res <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-12">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>x<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-13">            res <span class="op" style="color: #5E5E5E;">=</span> res <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> x <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-14">            x <span class="op" style="color: #5E5E5E;">/=</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-15">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-16">        <span class="cf" style="color: #003B4F;">return</span> res <span class="op" style="color: #5E5E5E;">==</span> y<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-17">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-18"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>
</section>
<section id="正则表达式匹配" class="level2">
<h2 class="anchored" data-anchor-id="正则表达式匹配">10. 正则表达式匹配</h2>
<p>给你一个字符串&nbsp;s&nbsp;和一个字符规律&nbsp;p，请你来实现一个支持 ‘.’&nbsp;和&nbsp;’*’&nbsp;的正则表达式匹配。</p>
<p>‘.’ 匹配任意单个字符 ’*’ 匹配零个或多个前面的那一个元素 所谓匹配，是要涵盖&nbsp;整个&nbsp;字符串&nbsp;s的，而不是部分字符串。</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb10-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="kw" style="color: #003B4F;">class</span> Solution <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb10-8">    <span class="dt" style="color: #AD0000;">bool</span> isMatch<span class="op" style="color: #5E5E5E;">(</span>string s<span class="op" style="color: #5E5E5E;">,</span> string p<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-9">        <span class="dt" style="color: #AD0000;">int</span> n <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">(),</span> m <span class="op" style="color: #5E5E5E;">=</span> p<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb10-10">        s <span class="op" style="color: #5E5E5E;">=</span> <span class="ch" style="color: #20794D;">' '</span> <span class="op" style="color: #5E5E5E;">+</span> s<span class="op" style="color: #5E5E5E;">,</span> p <span class="op" style="color: #5E5E5E;">=</span> <span class="ch" style="color: #20794D;">' '</span> <span class="op" style="color: #5E5E5E;">+</span> p<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-11">        vector<span class="op" style="color: #5E5E5E;">&lt;</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">bool</span><span class="op" style="color: #5E5E5E;">&gt;&gt;</span> f<span class="op" style="color: #5E5E5E;">(</span>n <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">bool</span><span class="op" style="color: #5E5E5E;">&gt;(</span>m <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb10-12">        f<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">][</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-13"></span>
<span id="cb10-14">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;=</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-15">            <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> j <span class="op" style="color: #5E5E5E;">&lt;=</span> m<span class="op" style="color: #5E5E5E;">;</span> j<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-16">                <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> m <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> p<span class="op" style="color: #5E5E5E;">[</span>j <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'*'</span><span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">continue</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-17">                <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> p<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="ch" style="color: #20794D;">'*'</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-18">                    f<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">][</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> f<span class="op" style="color: #5E5E5E;">[</span>i <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">][</span>j <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> p<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">||</span> p<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'.'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-19">                <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>p<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'*'</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb10-20">                    f<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">][</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> f<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">][</span>j <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">||</span> i <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> f<span class="op" style="color: #5E5E5E;">[</span>i <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">][</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> p<span class="op" style="color: #5E5E5E;">[</span>j <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">||</span> p<span class="op" style="color: #5E5E5E;">[</span>j <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'.'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb10-21">                <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-22">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-23">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-24">        <span class="cf" style="color: #003B4F;">return</span> f<span class="op" style="color: #5E5E5E;">[</span>n<span class="op" style="color: #5E5E5E;">][</span>m<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb10-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb10-26"><span class="op" style="color: #5E5E5E;">};</span></span></code></pre></div>


</section>

 ]]></description>
  <category>cpp</category>
  <category>algorithms</category>
  <category>LeetCode</category>
  <guid>https://lov3camille.top/posts/leetcode_1-10/index.html</guid>
  <pubDate>Sun, 04 Dec 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>DRX夺冠有感</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/league_of_legends_s12/index.html</link>
  <description><![CDATA[ 



<section id="s12" class="level1">
<h1>S12</h1>
<p>关于最后总决赛，我不知道为什么大部分人都希望SKT夺冠，希望Faker重回巅峰，偏偏我希望DRX夺冠，因为我昨天看比赛时候的心情和2017年S7一样, 就像我在第一篇博客里讲的：</p>
<blockquote class="blockquote">
<p><em>“所以我觉得我的2017年过的并不失败，大概我心中住了一个Ambition吧.”</em></p>
</blockquote>
<section id="deft" class="level2">
<h2 class="anchored" data-anchor-id="deft">Deft</h2>
<p>他和Faker同为麻浦高中的学生，同一年打职业，却在十年里辗转了七支队伍，未曾夺得一冠。</p>
<p>Deft曾经也在EDG打过，正好那天的解说席上明凯也在，不知道同为追梦人，也同是队友，他心里是什么想法。</p>
<p>或许他已经释然了，一辈子拿不到冠军其实才是常态，至少努力过就没什么遗憾了。</p>
<p>赛后采访时Deft的一段话我觉得值得记录下来：</p>
<blockquote class="blockquote">
<p><em>“我唯一擅长的只有英雄联盟，如果我不能在我最擅长的事情上取得成功，那我根本不知道我的人生还有什么意义。”</em></p>
</blockquote>


</section>
</section>

 ]]></description>
  <category>life</category>
  <guid>https://lov3camille.top/posts/league_of_legends_s12/index.html</guid>
  <pubDate>Sun, 06 Nov 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>基础算法模板</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/basic_algorithms/index.html</link>
  <description><![CDATA[ 



<section id="快速排序" class="level1">
<h1>快速排序</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">int</span> N <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1e6</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="dt" style="color: #AD0000;">int</span> n<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-8"><span class="dt" style="color: #AD0000;">int</span> q<span class="op" style="color: #5E5E5E;">[</span>N<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="dt" style="color: #AD0000;">void</span> quick_sort<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> q<span class="op" style="color: #5E5E5E;">[],</span> <span class="dt" style="color: #AD0000;">int</span> l<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> r<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">&gt;=</span> r<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">    <span class="dt" style="color: #AD0000;">int</span> x <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">[</span>l<span class="op" style="color: #5E5E5E;">],</span> i <span class="op" style="color: #5E5E5E;">=</span> l <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> j <span class="op" style="color: #5E5E5E;">=</span> r <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-16"></span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&lt;</span> j<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;">do</span> i<span class="op" style="color: #5E5E5E;">++;</span> <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&lt;</span> x<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;">do</span> j<span class="op" style="color: #5E5E5E;">--;</span> <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;</span> x<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&lt;</span> j<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-21">            swap<span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">],</span> q<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb1-22">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-23">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-24"></span>
<span id="cb1-25">    quick_sort<span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">,</span> l<span class="op" style="color: #5E5E5E;">,</span> j<span class="op" style="color: #5E5E5E;">);</span> </span>
<span id="cb1-26">    quick_sort<span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">,</span> j <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> r<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-27"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-30">    scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>n<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-31"></span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-33">        scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb1-34">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb1-35"></span>
<span id="cb1-36">    quick_sort<span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> n <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-37"></span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> j <span class="op" style="color: #5E5E5E;">&lt;</span> n<span class="op" style="color: #5E5E5E;">;</span> j<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-39">        printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> q<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb1-40">    <span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb1-41"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="归并排序" class="level1">
<h1>归并排序</h1>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">int</span> N <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1e6</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="dt" style="color: #AD0000;">int</span> n<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-8"><span class="dt" style="color: #AD0000;">int</span> q<span class="op" style="color: #5E5E5E;">[</span>N<span class="op" style="color: #5E5E5E;">],</span> tmp<span class="op" style="color: #5E5E5E;">[</span>N<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="dt" style="color: #AD0000;">void</span> merge_sort<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> q<span class="op" style="color: #5E5E5E;">[],</span> <span class="dt" style="color: #AD0000;">int</span> l<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> r<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">&gt;=</span> r<span class="op" style="color: #5E5E5E;">)</span> <span class="cf" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="dt" style="color: #AD0000;">int</span> mid <span class="op" style="color: #5E5E5E;">=</span> l <span class="op" style="color: #5E5E5E;">+</span> r <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-14"></span>
<span id="cb2-15">    merge_sort<span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">,</span> l<span class="op" style="color: #5E5E5E;">,</span> mid<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-16">    merge_sort<span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">,</span> mid <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> r<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">    <span class="dt" style="color: #AD0000;">int</span> k <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> i <span class="op" style="color: #5E5E5E;">=</span> l<span class="op" style="color: #5E5E5E;">,</span> j <span class="op" style="color: #5E5E5E;">=</span> mid <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&lt;=</span> mid <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> j <span class="op" style="color: #5E5E5E;">&lt;=</span> r<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-20">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> q<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">])</span> tmp<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">++]</span> <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">++];</span></span>
<span id="cb2-21">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;</span> q<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">])</span> tmp<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">++]</span> <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">++];</span></span>
<span id="cb2-22">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&lt;=</span> mid<span class="op" style="color: #5E5E5E;">)</span> tmp<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">++]</span> <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">++];</span></span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>j <span class="op" style="color: #5E5E5E;">&lt;=</span> r<span class="op" style="color: #5E5E5E;">)</span> tmp<span class="op" style="color: #5E5E5E;">[</span>k<span class="op" style="color: #5E5E5E;">++]</span> <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">++];</span></span>
<span id="cb2-25"></span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">=</span> l<span class="op" style="color: #5E5E5E;">,</span> j <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;=</span> r<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++,</span> j<span class="op" style="color: #5E5E5E;">++)</span> q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> tmp<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb2-27"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-30">    scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>n<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-31">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb2-32"></span>
<span id="cb2-33">    merge_sort<span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> n <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-34"></span>
<span id="cb2-35">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> j <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> j <span class="op" style="color: #5E5E5E;">&lt;</span> n<span class="op" style="color: #5E5E5E;">;</span> j<span class="op" style="color: #5E5E5E;">++)</span> printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> q<span class="op" style="color: #5E5E5E;">[</span>j<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb2-36"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="二分算法" class="level1">
<h1>二分算法</h1>
<section id="整数二分" class="level2">
<h2 class="anchored" data-anchor-id="整数二分">整数二分</h2>
<p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。</p>
<p>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。</p>
<p>如果数组中不存在该元素，则返回 -1 -1。</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">int</span> N <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100000</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="dt" style="color: #AD0000;">int</span> n<span class="op" style="color: #5E5E5E;">,</span> m<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-8"><span class="dt" style="color: #AD0000;">int</span> q<span class="op" style="color: #5E5E5E;">[</span>N<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">    scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>n<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>m<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-12"></span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>q<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>m<span class="op" style="color: #5E5E5E;">--)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-16">        <span class="dt" style="color: #AD0000;">int</span> x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-17">        scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>x<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-18"></span>
<span id="cb3-19">        <span class="dt" style="color: #AD0000;">int</span> l <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> r <span class="op" style="color: #5E5E5E;">=</span> n <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">&lt;</span> r<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-21">            <span class="dt" style="color: #AD0000;">int</span> mid <span class="op" style="color: #5E5E5E;">=</span> l <span class="op" style="color: #5E5E5E;">+</span> r <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-22">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">&lt;=</span> q<span class="op" style="color: #5E5E5E;">[</span>mid<span class="op" style="color: #5E5E5E;">])</span> r <span class="op" style="color: #5E5E5E;">=</span> mid<span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// fetch the left border</span></span>
<span id="cb3-23">            <span class="cf" style="color: #003B4F;">else</span> l <span class="op" style="color: #5E5E5E;">=</span> mid <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> </span>
<span id="cb3-24">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-25">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">[</span>l<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">!=</span> x<span class="op" style="color: #5E5E5E;">)</span> cout <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> <span class="st" style="color: #20794D;">"-1 -1"</span> <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-26">        <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-27">            cout <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> l <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> <span class="st" style="color: #20794D;">" "</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-28"></span>
<span id="cb3-29">            l <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> r <span class="op" style="color: #5E5E5E;">=</span> n <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-30">            <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">&lt;</span> r<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-31">                <span class="dt" style="color: #AD0000;">int</span> mid <span class="op" style="color: #5E5E5E;">=</span> l <span class="op" style="color: #5E5E5E;">+</span> r <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-32">                <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>x <span class="op" style="color: #5E5E5E;">&gt;=</span> q<span class="op" style="color: #5E5E5E;">[</span>mid<span class="op" style="color: #5E5E5E;">])</span> l <span class="op" style="color: #5E5E5E;">=</span> mid<span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// fetch the right border</span></span>
<span id="cb3-33">                <span class="cf" style="color: #003B4F;">else</span> r <span class="op" style="color: #5E5E5E;">=</span> mid <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-34">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-35">            cout <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> l <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-36">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-37">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-38"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="浮点数二分" class="level2">
<h2 class="anchored" data-anchor-id="浮点数二分">浮点数二分</h2>
<p>求一个数的平方根。</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-6">    <span class="dt" style="color: #AD0000;">double</span> x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-7">    cin <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">    <span class="dt" style="color: #AD0000;">double</span> l <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> r <span class="op" style="color: #5E5E5E;">=</span> x<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>r <span class="op" style="color: #5E5E5E;">-</span> l <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">1e-8</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-12">        <span class="dt" style="color: #AD0000;">double</span> mid <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">(</span>l <span class="op" style="color: #5E5E5E;">+</span> r<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-13">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>mid <span class="op" style="color: #5E5E5E;">*</span> mid <span class="op" style="color: #5E5E5E;">&gt;</span> x<span class="op" style="color: #5E5E5E;">)</span> r <span class="op" style="color: #5E5E5E;">=</span> mid<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;">else</span> l <span class="op" style="color: #5E5E5E;">=</span> mid<span class="op" style="color: #5E5E5E;">;</span> </span>
<span id="cb4-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-16"></span>
<span id="cb4-17">    printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%f\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> l<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb4-18"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
<section id="高精度加减乘除法" class="level1">
<h1>高精度加减乘除法</h1>
<section id="加法" class="level2">
<h2 class="anchored" data-anchor-id="加法">加法</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">int</span> N <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1e6</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-7"></span>
<span id="cb5-8">vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> add<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&amp;</span>A<span class="op" style="color: #5E5E5E;">,</span> vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&amp;</span>B<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-9">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> C<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-10">    </span>
<span id="cb5-11">    <span class="dt" style="color: #AD0000;">int</span> t <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">||</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> B<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&lt;</span> A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> t <span class="op" style="color: #5E5E5E;">+=</span> A<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb5-15">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&lt;</span> B<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> t <span class="op" style="color: #5E5E5E;">+=</span> B<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb5-16">        C<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>t <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-17">        t <span class="op" style="color: #5E5E5E;">=</span> t <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-18">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>t<span class="op" style="color: #5E5E5E;">)</span> C<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>t<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;">return</span> C<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-21"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-22"></span>
<span id="cb5-23"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-24">    string a<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-25">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> A<span class="op" style="color: #5E5E5E;">,</span> B<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-26">    cin <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> a <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-27"></span>
<span id="cb5-28">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> a<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> A<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="ch" style="color: #20794D;">'0'</span><span class="op" style="color: #5E5E5E;">);</span> <span class="co" style="color: #5E5E5E;">// convert char to int</span></span>
<span id="cb5-29">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> b<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> B<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>b<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="ch" style="color: #20794D;">'0'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-30"></span>
<span id="cb5-31">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> C <span class="op" style="color: #5E5E5E;">=</span> add<span class="op" style="color: #5E5E5E;">(</span>A<span class="op" style="color: #5E5E5E;">,</span> B<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-32"></span>
<span id="cb5-33">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> C<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> C<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb5-34"></span>
<span id="cb5-35">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-36"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="减法" class="level2">
<h2 class="anchored" data-anchor-id="减法">减法</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">int</span> N <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1e6</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;">// compare A and B</span></span>
<span id="cb6-9"><span class="dt" style="color: #AD0000;">bool</span> cmp<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&amp;</span>A<span class="op" style="color: #5E5E5E;">,</span> vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&amp;</span>B<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">!=</span> B<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> <span class="cf" style="color: #003B4F;">return</span> A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&gt;</span> B<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb6-11">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-12">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>A<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">!=</span> B<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">])</span> <span class="cf" style="color: #003B4F;">return</span> A<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">&gt;</span> B<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb6-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;">return</span> <span class="kw" style="color: #003B4F;">true</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-15"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-16"></span>
<span id="cb6-17">vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> sub<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&amp;</span>A<span class="op" style="color: #5E5E5E;">,</span> vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&amp;</span>B<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-18">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> C<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> t <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-20">        t <span class="op" style="color: #5E5E5E;">=</span> A<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> t<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-21">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&lt;</span> B<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> t <span class="op" style="color: #5E5E5E;">-=</span> B<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb6-22">        C<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">((</span>t <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>t <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> t <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-24">        <span class="cf" style="color: #003B4F;">else</span> t <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-25">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-26">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>C<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> C<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> C<span class="op" style="color: #5E5E5E;">.</span>pop_back<span class="op" style="color: #5E5E5E;">();</span> <span class="co" style="color: #5E5E5E;">// remember to delete redundant zero</span></span>
<span id="cb6-27">    <span class="cf" style="color: #003B4F;">return</span> C<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-28"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-29"></span>
<span id="cb6-30"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-31">    string a<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-32">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> A<span class="op" style="color: #5E5E5E;">,</span> B<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-33">    cin <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> a <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-34"></span>
<span id="cb6-35">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> a<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> A<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="ch" style="color: #20794D;">'0'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-36">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> b<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> B<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>b<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="ch" style="color: #20794D;">'0'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-37"></span>
<span id="cb6-38">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>cmp<span class="op" style="color: #5E5E5E;">(</span>A<span class="op" style="color: #5E5E5E;">,</span> B<span class="op" style="color: #5E5E5E;">))</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-39">        <span class="kw" style="color: #003B4F;">auto</span> C <span class="op" style="color: #5E5E5E;">=</span> sub<span class="op" style="color: #5E5E5E;">(</span>A<span class="op" style="color: #5E5E5E;">,</span> B<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-40">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> C<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> C<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb6-41">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-42">        <span class="kw" style="color: #003B4F;">auto</span> C <span class="op" style="color: #5E5E5E;">=</span> sub<span class="op" style="color: #5E5E5E;">(</span>B<span class="op" style="color: #5E5E5E;">,</span> A<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-43">        printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"-"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-44">        <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> C<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> C<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb6-45">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-46"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="乘法" class="level2">
<h2 class="anchored" data-anchor-id="乘法">乘法</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> mul<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&amp;</span>A<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> b<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-7">    <span class="dt" style="color: #AD0000;">int</span> t <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-8">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> C<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">||</span> t<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-10">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">&lt;</span> A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">())</span> t <span class="op" style="color: #5E5E5E;">+=</span> A<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">*</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-11">        C<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>t <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-12">        t <span class="op" style="color: #5E5E5E;">/=</span> <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-13">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-14">    <span class="cf" style="color: #003B4F;">return</span> C<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-15"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-18">    string a<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-19">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> A<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-20">    <span class="dt" style="color: #AD0000;">int</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-21"></span>
<span id="cb7-22">    cin <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> a <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-23"></span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> a<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> A<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="ch" style="color: #20794D;">'0'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-25"></span>
<span id="cb7-26">    <span class="kw" style="color: #003B4F;">auto</span> C <span class="op" style="color: #5E5E5E;">=</span> mul<span class="op" style="color: #5E5E5E;">(</span>A<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb7-27"></span>
<span id="cb7-28">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>C<span class="op" style="color: #5E5E5E;">[</span>C<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> cout <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-29"></span>
<span id="cb7-30">    <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> C<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> C<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb7-31"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="除法" class="level2">
<h2 class="anchored" data-anchor-id="除法">除法</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;vector&gt;</span></span>
<span id="cb8-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;algorithm&gt;</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-6"></span>
<span id="cb8-7">vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> div<span class="op" style="color: #5E5E5E;">(</span>vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> <span class="op" style="color: #5E5E5E;">&amp;</span>A<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> b<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span> <span class="op" style="color: #5E5E5E;">&amp;</span>r<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-8">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> C<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-9">    r <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-10"></span>
<span id="cb8-11">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> A<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">();</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-12">        r <span class="op" style="color: #5E5E5E;">=</span> r <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> A<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb8-13">        C<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>r <span class="op" style="color: #5E5E5E;">/</span> b<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-14">        r <span class="op" style="color: #5E5E5E;">%=</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-16"></span>
<span id="cb8-17">    reverse<span class="op" style="color: #5E5E5E;">(</span>C<span class="op" style="color: #5E5E5E;">.</span>begin<span class="op" style="color: #5E5E5E;">(),</span> C<span class="op" style="color: #5E5E5E;">.</span>end<span class="op" style="color: #5E5E5E;">());</span></span>
<span id="cb8-18"></span>
<span id="cb8-19">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>C<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> C<span class="op" style="color: #5E5E5E;">.</span>back<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> C<span class="op" style="color: #5E5E5E;">.</span>pop_back<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb8-20"></span>
<span id="cb8-21">    <span class="cf" style="color: #003B4F;">return</span> C<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-22"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-23"></span>
<span id="cb8-24"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-25">    string a<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-26">    <span class="dt" style="color: #AD0000;">int</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-27">    </span>
<span id="cb8-28">    cin <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> a <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> b<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-29"></span>
<span id="cb8-30">    vector<span class="op" style="color: #5E5E5E;">&lt;</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">&gt;</span> A<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-31">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> a<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> A<span class="op" style="color: #5E5E5E;">.</span>push_back<span class="op" style="color: #5E5E5E;">(</span>a<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="ch" style="color: #20794D;">'0'</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-32"></span>
<span id="cb8-33">    <span class="dt" style="color: #AD0000;">int</span> r<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-34">    <span class="kw" style="color: #003B4F;">auto</span> C <span class="op" style="color: #5E5E5E;">=</span> div<span class="op" style="color: #5E5E5E;">(</span>A<span class="op" style="color: #5E5E5E;">,</span> b<span class="op" style="color: #5E5E5E;">,</span> r<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb8-35"></span>
<span id="cb8-36">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> C<span class="op" style="color: #5E5E5E;">.</span>size<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">--)</span> printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> C<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb8-37"></span>
<span id="cb8-38">    cout <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> endl <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> r <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-39"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
</section>
<section id="前缀和" class="level1">
<h1>前缀和</h1>
<p>输入一个长度为 n 的整数序列。</p>
<p>接下来再输入 m 个询问，每个询问输入一对 l,r。</p>
<p>对于每个询问，输出原序列中从第 l 个数到第 r 个数的和。</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;iostream&gt;</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;">using</span> <span class="kw" style="color: #003B4F;">namespace</span> std<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">int</span> N <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100010</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="dt" style="color: #AD0000;">int</span> a<span class="op" style="color: #5E5E5E;">[</span>N<span class="op" style="color: #5E5E5E;">],</span> s<span class="op" style="color: #5E5E5E;">[</span>N<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-10">    <span class="dt" style="color: #AD0000;">int</span> n<span class="op" style="color: #5E5E5E;">,</span> m<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-11">    scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>n<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>m<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-12">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;=</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>a<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb9-13"></span>
<span id="cb9-14">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">int</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;=</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++)</span> s<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">[</span>i <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">+</span> a<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">];</span></span>
<span id="cb9-15"></span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;">while</span><span class="op" style="color: #5E5E5E;">(</span>m<span class="op" style="color: #5E5E5E;">--)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb9-17">        <span class="dt" style="color: #AD0000;">int</span> l<span class="op" style="color: #5E5E5E;">,</span> r<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-18">        scanf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d%d</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>l<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>r<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb9-19">        printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> s<span class="op" style="color: #5E5E5E;">[</span>r<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">-</span> s<span class="op" style="color: #5E5E5E;">[</span>l <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb9-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb9-21"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>


</section>

 ]]></description>
  <category>cpp</category>
  <category>algorithms</category>
  <guid>https://lov3camille.top/posts/basic_algorithms/index.html</guid>
  <pubDate>Fri, 04 Nov 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>CMU 15-213 Lab0</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/cmu_15-213_lab0/index.html</link>
  <description><![CDATA[ 



<section id="概述" class="level1">
<h1>概述</h1>
<p>利用C语言实现一个队列的基本功能，包括：</p>
<ul>
<li>创建队列</li>
<li>销毁队列</li>
<li>头部入队</li>
<li>尾部入队</li>
<li>头部出队</li>
<li>获取队列长度</li>
<li>反转队列</li>
</ul>
<p>核心在于每次对队列操作前都要考虑是否为空的情况，保证代码的鲁棒性。</p>
<section id="头文件" class="level2">
<h2 class="anchored" data-anchor-id="头文件">头文件</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;stdbool.h&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;stddef.h&gt;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">/* element struct in queue */</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">typedef</span> <span class="kw" style="color: #003B4F;">struct</span> list_ele <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>value<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;">struct</span> list_ele <span class="op" style="color: #5E5E5E;">*</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;">}</span> list_ele_t<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">typedef</span> <span class="kw" style="color: #003B4F;">struct</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-11">    list_ele_t <span class="op" style="color: #5E5E5E;">*</span>head<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-12">    list_ele_t <span class="op" style="color: #5E5E5E;">*</span>tail<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-13">    <span class="dt" style="color: #AD0000;">int</span> size<span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// use the above two variable to record the size of the queue to avoid traversal</span></span>
<span id="cb1-14"><span class="op" style="color: #5E5E5E;">}</span> queue_t<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;">/* Create empty queue. */</span></span>
<span id="cb1-17">queue_t <span class="op" style="color: #5E5E5E;">*</span>queue_new<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">void</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;">/* Free ALL storage used by queue. */</span></span>
<span id="cb1-20"><span class="dt" style="color: #AD0000;">void</span> queue_free<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;">/* Attempt to insert element at head of queue. */</span></span>
<span id="cb1-23"><span class="dt" style="color: #AD0000;">bool</span> queue_insert_head<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>s<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;">/* Attempt to insert element at tail of queue. */</span></span>
<span id="cb1-26"><span class="dt" style="color: #AD0000;">bool</span> queue_insert_tail<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>s<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;">/* Attempt to remove element from head of queue. */</span></span>
<span id="cb1-29"><span class="dt" style="color: #AD0000;">bool</span> queue_remove_head<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>sp<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">size_t</span> bufsize<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;">/* Return number of elements in queue. */</span></span>
<span id="cb1-32"><span class="dt" style="color: #AD0000;">size_t</span> queue_size<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;">/* Reverse elements in queue */</span></span>
<span id="cb1-35"><span class="dt" style="color: #AD0000;">void</span> queue_reverse<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">);</span></span></code></pre></div>
<p>可以看到，在源文件的基础上，新增了尾节点和队列大小两个属性，当然也可以不加，但如果没有这两个变量，计算队列大小或者进行尾部入队操作的时间复杂度就不是常量了，而是线性增长的。</p>
<p>下面我们具体看每个函数的实现。</p>
</section>
<section id="创建队列" class="level2">
<h2 class="anchored" data-anchor-id="创建队列">创建队列</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">/**</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@brief</span><span class="co" style="color: #5E5E5E;"> Allocates a new queue</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@return</span><span class="co" style="color: #5E5E5E;"> The new queue, or NULL if memory allocation failed</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb2-5">queue_t <span class="op" style="color: #5E5E5E;">*</span>queue_new<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">void</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-6">    queue_t <span class="op" style="color: #5E5E5E;">*</span>q <span class="op" style="color: #5E5E5E;">=</span> malloc<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span>queue_t<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;">/* What if malloc returned NULL? */</span></span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-9">        <span class="cf" style="color: #003B4F;">return</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-10">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-11">        q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-12">        q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-13">        q<span class="op" style="color: #5E5E5E;">-&gt;</span>size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;">return</span> q<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-15">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb2-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>这一步没什么问题，主要就是分配队列空间并初始化队列的各个属性。</p>
</section>
<section id="销毁队列" class="level2">
<h2 class="anchored" data-anchor-id="销毁队列">销毁队列</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">/**</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@brief</span><span class="co" style="color: #5E5E5E;"> Frees all memory used by a queue</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;"> </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">q</span><span class="co" style="color: #5E5E5E;"> The queue to free</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb3-5"><span class="dt" style="color: #AD0000;">void</span> queue_free<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;">/* How about freeing the list elements and the strings? */</span></span>
<span id="cb3-7">    <span class="co" style="color: #5E5E5E;">/* Free queue structure */</span></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-11">        list_ele_t <span class="op" style="color: #5E5E5E;">*</span>tmp<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">!=</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-13">            tmp <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>head<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-14">            q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>head<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-15">            free<span class="op" style="color: #5E5E5E;">(</span>tmp<span class="op" style="color: #5E5E5E;">-&gt;</span>value<span class="op" style="color: #5E5E5E;">);</span> <span class="co" style="color: #5E5E5E;">// free element's value</span></span>
<span id="cb3-16">            free<span class="op" style="color: #5E5E5E;">(</span>tmp<span class="op" style="color: #5E5E5E;">)</span> <span class="co" style="color: #5E5E5E;">// free element itself</span></span>
<span id="cb3-17">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-18">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-19">    free<span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">);</span> <span class="co" style="color: #5E5E5E;">// free queue</span></span>
<span id="cb3-20"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>如上所述，判断完队列是否为空，还需要判断队列的属性是否为空。</p>
</section>
<section id="头部入队" class="level2">
<h2 class="anchored" data-anchor-id="头部入队">头部入队</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">/**</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@brief</span><span class="co" style="color: #5E5E5E;"> Attempts to insert an element at head of a queue</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"> * This function explicitly allocates space to create a copy of `s`.</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"> * The inserted element points to a copy of `s`, instead of `s` itself.</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;"> </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">q</span><span class="co" style="color: #5E5E5E;"> The queue to insert into</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;"> </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">s</span><span class="co" style="color: #5E5E5E;"> String to be copied and inserted into the queue</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@return</span><span class="co" style="color: #5E5E5E;"> true if insertion was successful</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@return</span><span class="co" style="color: #5E5E5E;"> false if q is NULL, or memory allocation failed</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb4-13"><span class="dt" style="color: #AD0000;">bool</span> queue_insert_head<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-14">    list_ele_t <span class="op" style="color: #5E5E5E;">*</span>newh<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;">/* What should you do if the q is NULL? */</span></span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-17">        <span class="cf" style="color: #003B4F;">return</span> false<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-18">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-19">    <span class="co" style="color: #5E5E5E;">/* Don't forget to allocate space for the string and copy it */</span></span>
<span id="cb4-20">    <span class="co" style="color: #5E5E5E;">/* What if either call to malloc returns NULL? */</span></span>
<span id="cb4-21">    newh <span class="op" style="color: #5E5E5E;">=</span> malloc<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span>list_ele_t<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>newh <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-23">        <span class="cf" style="color: #003B4F;">return</span> false<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-24">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-25">        newh<span class="op" style="color: #5E5E5E;">-&gt;</span>value <span class="op" style="color: #5E5E5E;">=</span> malloc<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>strlen<span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb4-26">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>newh<span class="op" style="color: #5E5E5E;">-&gt;</span>value <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-27">            free<span class="op" style="color: #5E5E5E;">(</span>newh<span class="op" style="color: #5E5E5E;">);</span> <span class="co" style="color: #5E5E5E;">// must free the space if malloc failed</span></span>
<span id="cb4-28">            <span class="cf" style="color: #003B4F;">return</span> false<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-29">        <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-30">            strcpy<span class="op" style="color: #5E5E5E;">(</span>newh<span class="op" style="color: #5E5E5E;">-&gt;</span>value<span class="op" style="color: #5E5E5E;">,</span> s<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb4-31">            newh<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>head<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-32">            q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">=</span> newh<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-33"></span>
<span id="cb4-34">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb4-35">                q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail <span class="op" style="color: #5E5E5E;">=</span> newh<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-36">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-37">            <span class="op" style="color: #5E5E5E;">++</span>q<span class="op" style="color: #5E5E5E;">-&gt;</span>size<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-38">            <span class="cf" style="color: #003B4F;">return</span> true<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-39">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-40">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb4-41"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>除了判断队列及队列元素是否为空，还要判断<code>malloc()</code>是否成功， 正常来讲，内存分配成功的话，会返回一个可以指向任意类型的指针，但该指针必须通过<code>free()</code>或者<code>realloc()</code>回收。 如果分配失败了，会返回一个空指针，我们需要对其进行判断。</p>
</section>
<section id="尾部入队" class="level2">
<h2 class="anchored" data-anchor-id="尾部入队">尾部入队</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">/**</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@brief</span><span class="co" style="color: #5E5E5E;"> Attempts to insert an element at tail of a queue</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;"> * This function explicitly allocates space to create a copy of `s`.</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;"> * The inserted element points to a copy of `s`, instead of `s` itself.</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;"> </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">q</span><span class="co" style="color: #5E5E5E;"> The queue to insert into</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;"> </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">s</span><span class="co" style="color: #5E5E5E;"> String to be copied and inserted into the queue</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@return</span><span class="co" style="color: #5E5E5E;"> true if insertion was successful</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@return</span><span class="co" style="color: #5E5E5E;"> false if q is NULL, or memory allocation failed</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb5-13"><span class="dt" style="color: #AD0000;">bool</span> queue_insert_tail<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">const</span> <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;">/* You need to write the complete code for this function */</span></span>
<span id="cb5-15">    <span class="co" style="color: #5E5E5E;">/* Remember: It should operate in O(1) time */</span></span>
<span id="cb5-16">    list_ele_t <span class="op" style="color: #5E5E5E;">*</span>newt<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;">/* What should you do if the q is NULL? */</span></span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-19">        <span class="cf" style="color: #003B4F;">return</span> false<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-20">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;">/* Don't forget to allocate space for the string and copy it */</span></span>
<span id="cb5-22">    <span class="co" style="color: #5E5E5E;">/* What if either call to malloc returns NULL? */</span></span>
<span id="cb5-23">    newt <span class="op" style="color: #5E5E5E;">=</span> malloc<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span>list_ele_t<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>newt <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-25">        <span class="cf" style="color: #003B4F;">return</span> false<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-26">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-27">        newt<span class="op" style="color: #5E5E5E;">-&gt;</span>value <span class="op" style="color: #5E5E5E;">=</span> malloc<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">(</span>strlen<span class="op" style="color: #5E5E5E;">(</span>s<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb5-28">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>newt<span class="op" style="color: #5E5E5E;">-&gt;</span>value <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-29">            free<span class="op" style="color: #5E5E5E;">(</span>newt<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-30">            <span class="cf" style="color: #003B4F;">return</span> false<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-31">        <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-32">            strcpy<span class="op" style="color: #5E5E5E;">(</span>newt<span class="op" style="color: #5E5E5E;">-&gt;</span>value<span class="op" style="color: #5E5E5E;">,</span> s<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb5-33">            newt<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-34"></span>
<span id="cb5-35">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail <span class="op" style="color: #5E5E5E;">!=</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-36">                q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> newt<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-37">                q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail <span class="op" style="color: #5E5E5E;">=</span> newt<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-38">            <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb5-39">                q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">=</span> newt<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-40">                q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail <span class="op" style="color: #5E5E5E;">=</span> newt<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-41">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-42">            <span class="op" style="color: #5E5E5E;">++</span>q<span class="op" style="color: #5E5E5E;">-&gt;</span>size<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-43">            <span class="cf" style="color: #003B4F;">return</span> true<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-44">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-45">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb5-46"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>这一步和头部入队类似，不同点在于需要对尾节点是否存在进行判断，而头部入队时是不需要判断头节点是否存在的，因为必然要进行重新分配且不需要对其执行查找下一个节点的操作。</p>
</section>
<section id="头部出队" class="level2">
<h2 class="anchored" data-anchor-id="头部出队">头部出队</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">/**</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@brief</span><span class="co" style="color: #5E5E5E;"> Attempts to remove an element from head of a queue</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;"> * If removal succeeds, this function frees all memory used by the</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;"> * removed list element and its string value before returning.</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;"> * If removal succeeds and `buf` is non-NULL, this function copies up to</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;"> * `bufsize - 1` characters from the removed string into `buf`, and writes</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;"> * a null terminator '</span><span class="an" style="color: #5E5E5E;">\0'</span><span class="co" style="color: #5E5E5E;"> after the copied string.</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;">  </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">q</span><span class="co" style="color: #5E5E5E;">       The queue to remove from</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[out]</span><span class="co" style="color: #5E5E5E;"> </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">buf</span><span class="co" style="color: #5E5E5E;">     Output buffer to write a string value into</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;">  </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">bufsize</span><span class="co" style="color: #5E5E5E;"> Size of the buffer `buf` points to</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@return</span><span class="co" style="color: #5E5E5E;"> true if removal succeeded</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@return</span><span class="co" style="color: #5E5E5E;"> false if q is NULL or empty</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb6-18"><span class="dt" style="color: #AD0000;">bool</span> queue_remove_head<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>buf<span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">size_t</span> bufsize<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-20">        <span class="cf" style="color: #003B4F;">return</span> false<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-21">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-22">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;">return</span> false<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-24">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-25">        list_ele_t <span class="op" style="color: #5E5E5E;">*</span>temp <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>head<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-26">        q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>head<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-27">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>buf <span class="op" style="color: #5E5E5E;">!=</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb6-28">            strncpy<span class="op" style="color: #5E5E5E;">(</span>buf<span class="op" style="color: #5E5E5E;">,</span> temp<span class="op" style="color: #5E5E5E;">-&gt;</span>value<span class="op" style="color: #5E5E5E;">,</span> bufsize <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-29">            buf<span class="op" style="color: #5E5E5E;">[</span>bufsize <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="ch" style="color: #20794D;">'\0'</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-30">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-31">        free<span class="op" style="color: #5E5E5E;">(</span>temp<span class="op" style="color: #5E5E5E;">-&gt;</span>value<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-32">        free<span class="op" style="color: #5E5E5E;">(</span>temp<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb6-33">        <span class="op" style="color: #5E5E5E;">--</span>q<span class="op" style="color: #5E5E5E;">-&gt;</span>size<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-34">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb6-35">    <span class="cf" style="color: #003B4F;">return</span> true<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-36"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>这里注意一下<code>strncpy</code>的用法就好了，要保证<code>buf</code>是C-Style的字符数组。</p>
</section>
<section id="获取队列长度" class="level2">
<h2 class="anchored" data-anchor-id="获取队列长度">获取队列长度</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">/**</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@brief</span><span class="co" style="color: #5E5E5E;"> Returns the number of elements in a queue</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"> * This function runs in O(1) time.</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;"> </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">q</span><span class="co" style="color: #5E5E5E;"> The queue to examine</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@return</span><span class="co" style="color: #5E5E5E;"> the number of elements in the queue, or</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;"> *         0 if q is NULL or empty</span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb7-11"><span class="dt" style="color: #AD0000;">size_t</span> queue_size<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;">/* You need to write the code for this function */</span></span>
<span id="cb7-13">    <span class="co" style="color: #5E5E5E;">/* Remember: It should operate in O(1) time */</span></span>
<span id="cb7-14">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-15">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-16">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb7-17">        <span class="cf" style="color: #003B4F;">return</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>size<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-18">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb7-19"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>这没什么好说的，在前面执行入队、出队的时候不要忘记修改<code>size</code>的值就可以，这里只需要直接返回，而不需要通过遍历队列的方式去计算。</p>
</section>
<section id="反转队列" class="level2">
<h2 class="anchored" data-anchor-id="反转队列">反转队列</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">/**</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@brief</span><span class="co" style="color: #5E5E5E;"> Reverse the elements in a queue</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"> * This function does not allocate or free any list elements, i.e. it does</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;"> * not call malloc or free, including inside helper functions. Instead, it</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;"> * rearranges the existing elements of the queue.</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"> *</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;"> * </span><span class="an" style="color: #5E5E5E;">@param[in]</span><span class="co" style="color: #5E5E5E;"> </span><span class="cv" style="color: #5E5E5E;
font-style: italic;">q</span><span class="co" style="color: #5E5E5E;"> The queue to reverse</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb8-10"><span class="dt" style="color: #AD0000;">void</span> queue_reverse<span class="op" style="color: #5E5E5E;">(</span>queue_t <span class="op" style="color: #5E5E5E;">*</span>q<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;">/* You need to write the code for this function */</span></span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>q <span class="op" style="color: #5E5E5E;">==</span> NULL <span class="op" style="color: #5E5E5E;">||</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-13">        <span class="cf" style="color: #003B4F;">return</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-14">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-15">        list_ele_t <span class="op" style="color: #5E5E5E;">*</span>oldHead <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>head<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-16">        list_ele_t <span class="op" style="color: #5E5E5E;">*</span>oldTail <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">        list_ele_t <span class="op" style="color: #5E5E5E;">*</span>temp <span class="op" style="color: #5E5E5E;">=</span> q<span class="op" style="color: #5E5E5E;">-&gt;</span>head<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-19">        list_ele_t <span class="op" style="color: #5E5E5E;">*</span>prev <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-20">        list_ele_t <span class="op" style="color: #5E5E5E;">*</span>next <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-21">        <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>temp <span class="op" style="color: #5E5E5E;">!=</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb8-22">            next <span class="op" style="color: #5E5E5E;">=</span> temp<span class="op" style="color: #5E5E5E;">-&gt;</span>next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-23">            temp<span class="op" style="color: #5E5E5E;">-&gt;</span>next <span class="op" style="color: #5E5E5E;">=</span> prev<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-24">            prev <span class="op" style="color: #5E5E5E;">=</span> temp<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-25">            temp <span class="op" style="color: #5E5E5E;">=</span> next<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-26">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-27">        q<span class="op" style="color: #5E5E5E;">-&gt;</span>head <span class="op" style="color: #5E5E5E;">=</span> oldTail<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-28">        q<span class="op" style="color: #5E5E5E;">-&gt;</span>tail <span class="op" style="color: #5E5E5E;">=</span> oldHead<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb8-30"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>经典的反转链表，这里就不赘述了。</p>
</section>
<section id="测试" class="level2">
<h2 class="anchored" data-anchor-id="测试">测试</h2>
<p>一共是提供了十五组测试用例，满分一百，包括了对各个函数及其性能的测试(测试尾部入队10000个元素)，还有鲁棒性测试（释放空队列的空间，从空队列中移除头部元素等），还是比较全面的。</p>


</section>
</section>

 ]]></description>
  <category>c</category>
  <category>cmu_15_213</category>
  <guid>https://lov3camille.top/posts/cmu_15-213_lab0/index.html</guid>
  <pubDate>Mon, 10 Oct 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>实现一个简易的C++ String类</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/camille_string/index.html</link>
  <description><![CDATA[ 



<section id="概述" class="level1">
<h1>概述</h1>
<p>实现String类的核心就是重写构造器和重载运算符.</p>
<section id="头文件" class="level2">
<h2 class="anchored" data-anchor-id="头文件">头文件</h2>
<p>我们需要定义的有：</p>
<ul>
<li>Original Constructor</li>
<li>Copy Constructor</li>
<li>Move Constructor</li>
<li>Copy Assignment</li>
<li>Move Assignment</li>
<li>Destructor</li>
<li>Indexer</li>
<li>Equal/NotEqual Operator</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;">#ifndef CAMILLE_STRING_H</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;">#define CAMILLE_STRING_H</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// using char to store</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">class</span> String <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-6">  <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> str<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;">public</span><span class="op" style="color: #5E5E5E;">:</span></span>
<span id="cb1-9">  String<span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> s <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-10">  String<span class="op" style="color: #5E5E5E;">(</span><span class="at" style="color: #657422;">const</span> String<span class="op" style="color: #5E5E5E;">&amp;);</span> <span class="co" style="color: #5E5E5E;">// copy constructor</span></span>
<span id="cb1-11">  String<span class="op" style="color: #5E5E5E;">&amp;</span> <span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">=(</span><span class="at" style="color: #657422;">const</span> String<span class="op" style="color: #5E5E5E;">&amp;);</span> <span class="co" style="color: #5E5E5E;">// copy assignment</span></span>
<span id="cb1-12">  String<span class="op" style="color: #5E5E5E;">(</span>String <span class="op" style="color: #5E5E5E;">&amp;&amp;)</span> <span class="kw" style="color: #003B4F;">noexcept</span> <span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// move constructor</span></span>
<span id="cb1-13">  String<span class="op" style="color: #5E5E5E;">&amp;</span> <span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">=(</span>String<span class="op" style="color: #5E5E5E;">&amp;&amp;)</span> <span class="kw" style="color: #003B4F;">noexcept</span> <span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// move assignment</span></span>
<span id="cb1-14">  <span class="op" style="color: #5E5E5E;">~</span>String<span class="op" style="color: #5E5E5E;">();</span> <span class="co" style="color: #5E5E5E;">// destructor</span></span>
<span id="cb1-15">  <span class="kw" style="color: #003B4F;">operator</span> <span class="at" style="color: #657422;">const</span> <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb1-16">  String <span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">+(</span><span class="at" style="color: #657422;">const</span> String<span class="op" style="color: #5E5E5E;">&amp;);</span></span>
<span id="cb1-17">  String <span class="op" style="color: #5E5E5E;">&amp;</span><span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">+=(</span><span class="at" style="color: #657422;">const</span> String<span class="op" style="color: #5E5E5E;">&amp;);</span></span>
<span id="cb1-18">  <span class="dt" style="color: #AD0000;">char</span> <span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">[](</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">)</span> <span class="at" style="color: #657422;">const</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-19">  <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">&amp;</span><span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">[](</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-20">  String <span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">()(</span><span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dt" style="color: #AD0000;">int</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb1-21">  <span class="dt" style="color: #AD0000;">bool</span> <span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">==(</span><span class="at" style="color: #657422;">const</span> String<span class="op" style="color: #5E5E5E;">&amp;);</span></span>
<span id="cb1-22">  <span class="dt" style="color: #AD0000;">bool</span> <span class="kw" style="color: #003B4F;">operator</span><span class="op" style="color: #5E5E5E;">!=(</span><span class="at" style="color: #657422;">const</span> String<span class="op" style="color: #5E5E5E;">&amp;);</span></span>
<span id="cb1-23"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="pp" style="color: #AD0000;">#endif</span></span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>cpp</category>
  <guid>https://lov3camille.top/posts/camille_string/index.html</guid>
  <pubDate>Fri, 23 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>实现一个简易Shell</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/camille_shell/index.html</link>
  <description><![CDATA[ 



<section id="概述" class="level1">
<h1>概述</h1>
<p>根据Stephen Brennan的Tutorial实现的一个简易的Shell.</p>
<section id="一个shell的生命周期" class="level2">
<h2 class="anchored" data-anchor-id="一个shell的生命周期">一个Shell的生命周期</h2>
<p>一个Shell的生命周期包括三个基本部分：</p>
<ul>
<li>初始化： Shell读取并执行配置文件；</li>
<li>转译： Shell读取标准输入（交互式输入或者文件）并执行；<br>
</li>
<li>终止： 命令执行完毕，Shell执行结束命令，释放内存并终止；</li>
</ul>
<p>因此， 我们可以得到主函数的基本结构：</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-2">  ls_loop<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;">return</span> EXIT_SUCCESS<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="shell中的基本循环" class="level2">
<h2 class="anchored" data-anchor-id="shell中的基本循环">Shell中的基本循环</h2>
<p>循环分三步： - 读： 读取标准输入的指令； - 解析： 将输入的命令字符串分割成程序和参数； - 执行： 运行解析好的命令。</p>
<p>这样我们可以得到循环体内的基本逻辑：</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="dt" style="color: #AD0000;">void</span> lsh_loop<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">void</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-3">  <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>line<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-4">  <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">**</span>args<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-5">  <span class="dt" style="color: #AD0000;">int</span> status<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">  <span class="cf" style="color: #003B4F;">do</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-8">    printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"&gt; "</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-9">    line <span class="op" style="color: #5E5E5E;">=</span> lsh_read_line<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb2-10">    args <span class="op" style="color: #5E5E5E;">=</span> lsh_split_line<span class="op" style="color: #5E5E5E;">(</span>line<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-11">    status <span class="op" style="color: #5E5E5E;">=</span> lsh_execute<span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    free<span class="op" style="color: #5E5E5E;">(</span>line<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-14">    free<span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-15">  <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>status<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb2-16"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
</section>
<section id="内置命令" class="level2">
<h2 class="anchored" data-anchor-id="内置命令">内置命令</h2>
<p>为什么需要内置命令呢？以<code>cd</code>命令为例，它的作用是改变目录，那么如果Shell将该命令交给子进程去执行，那么 就只能改变子进程的目录，对于用户来说等于什么都没做，这显然不是我们想要的结果。所以需要将此类命令作为内置命令实现。</p>
</section>
<section id="完整实现" class="level2">
<h2 class="anchored" data-anchor-id="完整实现">完整实现</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;stdio.h&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;stdlib.h&gt;</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;string.h&gt;</span></span>
<span id="cb3-4"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;unistd.h&gt;</span></span>
<span id="cb3-5"><span class="pp" style="color: #AD0000;">#include </span><span class="im" style="color: #00769E;">&lt;sys/wait.h&gt;</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="pp" style="color: #AD0000;">#define LSH_RL_BUF_SIZE 1024</span></span>
<span id="cb3-8"><span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>lsh_read_line_old<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">void</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-9">  <span class="dt" style="color: #AD0000;">int</span> buf_size <span class="op" style="color: #5E5E5E;">=</span> LSH_RL_BUF_SIZE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-10">  <span class="dt" style="color: #AD0000;">int</span> position <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-11">  <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>buffer <span class="op" style="color: #5E5E5E;">=</span> malloc<span class="op" style="color: #5E5E5E;">(</span><span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">*</span> buf_size<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-12">  <span class="dt" style="color: #AD0000;">int</span> c<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">  <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>buffer<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-15">    fprintf<span class="op" style="color: #5E5E5E;">(</span>stderr<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"lsh: allocation error</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-16">    exit<span class="op" style="color: #5E5E5E;">(</span>EXIT_FAILURE<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-17">  <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-18"></span>
<span id="cb3-19">  <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;">// Read a character</span></span>
<span id="cb3-21">    c <span class="op" style="color: #5E5E5E;">=</span> getchar<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">    <span class="co" style="color: #5E5E5E;">// if we hit EOF, replace it with a null character and return</span></span>
<span id="cb3-24">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>c <span class="op" style="color: #5E5E5E;">==</span> EOF <span class="op" style="color: #5E5E5E;">||</span> c <span class="op" style="color: #5E5E5E;">==</span> <span class="ch" style="color: #20794D;">'\n'</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-25">        buffer<span class="op" style="color: #5E5E5E;">[</span>position<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="ch" style="color: #20794D;">'\0'</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-26">        <span class="cf" style="color: #003B4F;">return</span> buffer<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-27">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-28">        buffer<span class="op" style="color: #5E5E5E;">[</span>position<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> c<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-29">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-30">    position<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb3-31"></span>
<span id="cb3-32">    <span class="co" style="color: #5E5E5E;">// if we have exceeded the buffer, reallocate</span></span>
<span id="cb3-33">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>position <span class="op" style="color: #5E5E5E;">&gt;=</span> buf_size<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-34">        buf_size <span class="op" style="color: #5E5E5E;">+=</span> LSH_RL_BUF_SIZE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-35">        buffer <span class="op" style="color: #5E5E5E;">=</span> realloc<span class="op" style="color: #5E5E5E;">(</span>buffer<span class="op" style="color: #5E5E5E;">,</span> buf_size<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-36">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>buffer<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-37">            fprintf<span class="op" style="color: #5E5E5E;">(</span>stderr<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"lsh: allocation error</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-38">            exit<span class="op" style="color: #5E5E5E;">(</span>EXIT_FAILURE<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-39">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-40">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-41">  <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-42"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-43"></span>
<span id="cb3-44"><span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>lsh_read_line_new<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">void</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-45">    <span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> line <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-46">    <span class="dt" style="color: #AD0000;">ssize_t</span> buf_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;">// have getline allocate a buffer for us</span></span>
<span id="cb3-47"></span>
<span id="cb3-48">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>getline<span class="op" style="color: #5E5E5E;">(&amp;</span>line<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>buf_size<span class="op" style="color: #5E5E5E;">,</span> stdin<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-49">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>feof<span class="op" style="color: #5E5E5E;">(</span>stdin<span class="op" style="color: #5E5E5E;">))</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-50">            exit<span class="op" style="color: #5E5E5E;">(</span>EXIT_SUCCESS<span class="op" style="color: #5E5E5E;">);</span> <span class="co" style="color: #5E5E5E;">// we received an EOF</span></span>
<span id="cb3-51">        <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-52">            perror<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"readline"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-53">            exit<span class="op" style="color: #5E5E5E;">(</span>EXIT_FAILURE<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-54">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-55">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-56">    <span class="cf" style="color: #003B4F;">return</span> line<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-57"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-58"></span>
<span id="cb3-59"><span class="pp" style="color: #AD0000;">#define LSH_TOK_BUF_SIZE 64</span></span>
<span id="cb3-60"><span class="pp" style="color: #AD0000;">#define LSH_TOK_DELIM " \t\r\n\a"</span></span>
<span id="cb3-61"><span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">**</span>lsh_split_line<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>line<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-62">    <span class="dt" style="color: #AD0000;">int</span> buf_size <span class="op" style="color: #5E5E5E;">=</span> LSH_TOK_BUF_SIZE<span class="op" style="color: #5E5E5E;">,</span> position <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-63">    <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">**</span>tokens <span class="op" style="color: #5E5E5E;">=</span> malloc<span class="op" style="color: #5E5E5E;">(</span>buf_size <span class="op" style="color: #5E5E5E;">*</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*));</span></span>
<span id="cb3-64">    <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>token<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-65"></span>
<span id="cb3-66">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>tokens<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-67">        fprintf<span class="op" style="color: #5E5E5E;">(</span>stderr<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"lsh: allocation error</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-68">        exit<span class="op" style="color: #5E5E5E;">(</span>EXIT_FAILURE<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-69">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-70"></span>
<span id="cb3-71">    token <span class="op" style="color: #5E5E5E;">=</span> strtok<span class="op" style="color: #5E5E5E;">(</span>line<span class="op" style="color: #5E5E5E;">,</span> LSH_TOK_DELIM<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-72">    <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>token <span class="op" style="color: #5E5E5E;">!=</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-73">        tokens<span class="op" style="color: #5E5E5E;">[</span>position<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> token<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-74">        position<span class="op" style="color: #5E5E5E;">++;</span></span>
<span id="cb3-75"></span>
<span id="cb3-76">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>position <span class="op" style="color: #5E5E5E;">&gt;=</span> buf_size<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-77">            buf_size <span class="op" style="color: #5E5E5E;">+=</span> LSH_RL_BUF_SIZE<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-78">            tokens <span class="op" style="color: #5E5E5E;">=</span> realloc<span class="op" style="color: #5E5E5E;">(</span>tokens<span class="op" style="color: #5E5E5E;">,</span> buf_size <span class="op" style="color: #5E5E5E;">*</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*));</span></span>
<span id="cb3-79">            <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(!</span>tokens<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-80">                fprintf<span class="op" style="color: #5E5E5E;">(</span>stderr<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"lsh: allocation error</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-81">                exit<span class="op" style="color: #5E5E5E;">(</span>EXIT_FAILURE<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-82">            <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-83">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-84"></span>
<span id="cb3-85">        token <span class="op" style="color: #5E5E5E;">=</span> strtok<span class="op" style="color: #5E5E5E;">(</span>NULL<span class="op" style="color: #5E5E5E;">,</span> LSH_TOK_DELIM<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-86">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-87">    tokens<span class="op" style="color: #5E5E5E;">[</span>position<span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">=</span> NULL<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-88">    <span class="cf" style="color: #003B4F;">return</span> tokens<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-89"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-90"></span>
<span id="cb3-91"><span class="dt" style="color: #AD0000;">int</span> lsh_launch<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">**</span> args<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-92">    pid_t pid<span class="op" style="color: #5E5E5E;">,</span> wpid<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-93">    <span class="dt" style="color: #AD0000;">int</span> status<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-94"></span>
<span id="cb3-95">    pid <span class="op" style="color: #5E5E5E;">=</span> fork<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb3-96">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>pid <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-97">        <span class="co" style="color: #5E5E5E;">// Child process</span></span>
<span id="cb3-98">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>execvp<span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">],</span> args<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-99">            perror<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"lsh child process execute error!"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-100">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-101">        exit<span class="op" style="color: #5E5E5E;">(</span>EXIT_FAILURE<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-102">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>pid <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-103">        <span class="co" style="color: #5E5E5E;">// Error in forking</span></span>
<span id="cb3-104">        perror<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"lsh fork error!"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-105">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-106">        <span class="co" style="color: #5E5E5E;">// Parent process</span></span>
<span id="cb3-107">        <span class="cf" style="color: #003B4F;">do</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-108">            wpid <span class="op" style="color: #5E5E5E;">=</span> waitpid<span class="op" style="color: #5E5E5E;">(</span>pid<span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">&amp;</span>status<span class="op" style="color: #5E5E5E;">,</span> WUNTRACED<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-109">        <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(!</span>WIFEXITED<span class="op" style="color: #5E5E5E;">(</span>status<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;">!</span>WIFSIGNALED<span class="op" style="color: #5E5E5E;">(</span>status<span class="op" style="color: #5E5E5E;">));</span></span>
<span id="cb3-110">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-111">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-112"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-113"></span>
<span id="cb3-114"><span class="co" style="color: #5E5E5E;">/*</span></span>
<span id="cb3-115"><span class="co" style="color: #5E5E5E;"> * Function declaration for builtin shell commands:</span></span>
<span id="cb3-116"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb3-117"><span class="dt" style="color: #AD0000;">int</span> lsh_cd<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">**</span>args<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-118"><span class="dt" style="color: #AD0000;">int</span> lsh_help<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">**</span>args<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-119"><span class="dt" style="color: #AD0000;">int</span> lsh_exit<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">**</span>args<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-120"></span>
<span id="cb3-121"><span class="co" style="color: #5E5E5E;">/*</span></span>
<span id="cb3-122"><span class="co" style="color: #5E5E5E;"> * List of builtin commands, followed by their corresponding functions.</span></span>
<span id="cb3-123"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb3-124"><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*</span> builtin_str<span class="op" style="color: #5E5E5E;">[]</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-125">        <span class="st" style="color: #20794D;">"cd"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-126">        <span class="st" style="color: #20794D;">"help"</span><span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-127">        <span class="st" style="color: #20794D;">"exit"</span></span>
<span id="cb3-128"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb3-129"></span>
<span id="cb3-130"><span class="dt" style="color: #AD0000;">int</span> <span class="op" style="color: #5E5E5E;">(*</span>builtin_func<span class="op" style="color: #5E5E5E;">[])</span> <span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">**)</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-131">        <span class="op" style="color: #5E5E5E;">&amp;</span>lsh_cd<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-132">        <span class="op" style="color: #5E5E5E;">&amp;</span>lsh_help<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb3-133">        <span class="op" style="color: #5E5E5E;">&amp;</span>lsh_exit</span>
<span id="cb3-134"><span class="op" style="color: #5E5E5E;">};</span></span>
<span id="cb3-135"></span>
<span id="cb3-136"><span class="dt" style="color: #AD0000;">int</span> lsh_num_builtins<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-137">    <span class="cf" style="color: #003B4F;">return</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span>builtin_str<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="kw" style="color: #003B4F;">sizeof</span><span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">*);</span></span>
<span id="cb3-138"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-139"></span>
<span id="cb3-140"><span class="co" style="color: #5E5E5E;">/*</span></span>
<span id="cb3-141"><span class="co" style="color: #5E5E5E;"> * Builtin function implementation</span></span>
<span id="cb3-142"><span class="co" style="color: #5E5E5E;"> */</span></span>
<span id="cb3-143"><span class="dt" style="color: #AD0000;">int</span> lsh_cd<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">**</span> args<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-144">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-145">        fprintf<span class="op" style="color: #5E5E5E;">(</span>stderr<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"lsh: expected argument to </span><span class="sc" style="color: #5E5E5E;">\"</span><span class="st" style="color: #20794D;">cd</span><span class="sc" style="color: #5E5E5E;">\"\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-146">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">else</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-147">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>chdir<span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-148">            perror<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"lsh change directory error!"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-149">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-150">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-151">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-152"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-153"></span>
<span id="cb3-154"><span class="dt" style="color: #AD0000;">int</span> lsh_help<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">**</span> args<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-155">    <span class="dt" style="color: #AD0000;">int</span> i<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-156">    printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"LSH from scratch</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-157">    printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Type program names and arguments, and hit enter.</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-158">    printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"The following are built in:</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-159"></span>
<span id="cb3-160">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> lsh_num_builtins<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-161">        printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">" %s</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">,</span> builtin_str<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">]);</span></span>
<span id="cb3-162">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-163"></span>
<span id="cb3-164">    printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Use the man command for information and other programs.</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-165">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-166"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-167"></span>
<span id="cb3-168"><span class="dt" style="color: #AD0000;">int</span> lsh_exit<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span><span class="op" style="color: #5E5E5E;">**</span> args<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-169">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-170"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-171"></span>
<span id="cb3-172"><span class="dt" style="color: #AD0000;">int</span> lsh_execute<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">**</span>args<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-173">    <span class="dt" style="color: #AD0000;">int</span> i<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-174">    <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">]</span> <span class="op" style="color: #5E5E5E;">==</span> NULL<span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-175">        <span class="co" style="color: #5E5E5E;">// An empty command was entered.</span></span>
<span id="cb3-176">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-177">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-178">    <span class="co" style="color: #5E5E5E;">// Find the matched builtin command and execute it</span></span>
<span id="cb3-179">    <span class="cf" style="color: #003B4F;">for</span> <span class="op" style="color: #5E5E5E;">(</span>i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> lsh_num_builtins<span class="op" style="color: #5E5E5E;">();</span> i<span class="op" style="color: #5E5E5E;">++)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-180">        <span class="cf" style="color: #003B4F;">if</span> <span class="op" style="color: #5E5E5E;">(</span>strcmp<span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">],</span> builtin_str<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">])</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-181">            <span class="cf" style="color: #003B4F;">return</span> <span class="op" style="color: #5E5E5E;">(*</span>builtin_func<span class="op" style="color: #5E5E5E;">[</span>i<span class="op" style="color: #5E5E5E;">])(</span>args<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-182">        <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-183">    <span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-184">    <span class="cf" style="color: #003B4F;">return</span> lsh_launch<span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-185"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-186"></span>
<span id="cb3-187"><span class="dt" style="color: #AD0000;">void</span> ls_loop<span class="op" style="color: #5E5E5E;">(</span><span class="dt" style="color: #AD0000;">void</span><span class="op" style="color: #5E5E5E;">)</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-188">    <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">*</span>line<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-189">    <span class="dt" style="color: #AD0000;">char</span> <span class="op" style="color: #5E5E5E;">**</span>args<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-190">    <span class="dt" style="color: #AD0000;">int</span> status<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-191"></span>
<span id="cb3-192">    <span class="cf" style="color: #003B4F;">do</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-193">        printf<span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"&gt; "</span><span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-194">        line <span class="op" style="color: #5E5E5E;">=</span> lsh_read_line_new<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb3-195">        args <span class="op" style="color: #5E5E5E;">=</span> lsh_split_line<span class="op" style="color: #5E5E5E;">(</span>line<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-196">        status <span class="op" style="color: #5E5E5E;">=</span> lsh_execute<span class="op" style="color: #5E5E5E;">(</span>args<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-197">    <span class="op" style="color: #5E5E5E;">}</span> <span class="cf" style="color: #003B4F;">while</span> <span class="op" style="color: #5E5E5E;">(</span>status<span class="op" style="color: #5E5E5E;">);</span></span>
<span id="cb3-198"><span class="op" style="color: #5E5E5E;">}</span></span>
<span id="cb3-199"></span>
<span id="cb3-200"><span class="dt" style="color: #AD0000;">int</span> main<span class="op" style="color: #5E5E5E;">()</span> <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb3-201">  ls_loop<span class="op" style="color: #5E5E5E;">();</span></span>
<span id="cb3-202">  <span class="cf" style="color: #003B4F;">return</span> EXIT_SUCCESS<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb3-203"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>c</category>
  <guid>https://lov3camille.top/posts/camille_shell/index.html</guid>
  <pubDate>Sun, 11 Sep 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>这几年</title>
  <dc:creator>lov3camille</dc:creator>
  <link>https://lov3camille.top/posts/new_beginnings/index.html</link>
  <description><![CDATA[ 



<blockquote class="blockquote">
<p><em>“有个阴天，没有下雨，但我到公司后还是和前台借了一把伞，过了几天准备下楼还伞的时候，外面却下起了大雨，而那天很多人都没伞。”</em></p>
</blockquote>
<section id="流水账" class="level2">
<h2 class="anchored" data-anchor-id="流水账">流水账</h2>
<p>2020年初拿到港中文offer，从上一家公司离职后，一直踌躇满志，找了很多关于如何学习计算机的资料，想着自己终于可以做自己喜欢的事情了。于是在闵行租了一个小屋子， 天天闷在里面学习、打游戏、抽烟、睡懒觉，日复一日。</p>
<p>过了几个月，去了西安和女朋友呆一起，本来以为过不了多久就去香港了，结果疫情严重，全部改为网课，就这样一边上网课，一边试了下秋招，结果一律过不了初面。终于发现，学校教的和工作需要的其实并不完全一致。但不管怎样，虽说是上网课，也和几个同学相谈甚欢，学到了不少。</p>
<p>就这样，直到十二月份，我才开始看一些培训班的视频，开着两倍速，不知道比刚开始抱着《JAVA核心技术》一个字一个字啃要快多少倍。很快，十二月底，拿到了腾讯的实习和华为的留学生秋招offer。</p>
<p>在腾讯实习了几个月之后又去了阿里实习，后来秋招又拿了一些offer，最后在2021年底正式入职腾讯。</p>
<p>再后来，从今年4月初开始，日子一直不好过，为了避免被裁或是为了缓解老板的焦虑，我们表演式加班，一天又一天。结果6月27号还是通知我被裁了，可笑的是，第二天又被通知有应届生保护政策留下了（事实上我早就想走了），最后经过一番协商，也给了些赔偿。现在发这篇博客的时候离我离职日期正好还剩一周。</p>
</section>
<section id="慎" class="level2">
<h2 class="anchored" data-anchor-id="慎">慎</h2>
<p>我平时爱玩英雄联盟，也感谢腾讯每个月业务体验福利让我这个穷b摇身一变成了皮肤狗。但我现在爱玩这个游戏和刚开始玩它的理由已经有了很大不同。刚开始是因为大家都玩，军校里也没啥别的娱乐方式，去游戏里杀人排解烦闷罢了。现在我倒是会研究各个英雄的台词。虽说也是人编出来的，但多少给我点启发。</p>
<p>就比如暮光之眼-慎，他有几句台词：</p>
<blockquote class="blockquote">
<p><em>“Tread carefully（要步步为营）”</em></p>
</blockquote>
<blockquote class="blockquote">
<p><em>“A demonstration of superior judgement（您果然深思熟虑）”</em></p>
</blockquote>
<p>从去年实习开始，我就骑驴找马，再后来拒秋招offer的时候，我给的理由都是我去读博了，事实上我确实有考虑读博。然后今年四月份的某个加班到十点的晚上，我在回家的路上突然就决定去要回我去年的offer。</p>
<p>无奈过程令人煎熬，一直到通知被裁后两周才最终敲定，这三个月滋味真不好受。但有时候想想我那装精神病三个月，期间一次没碰过电子产品的军校同学，大概也有异曲同工之妙吧。</p>
<p>现在回想起来，慎这个英雄大概真的影响到了我，要时刻保持谨慎，要有全局思维。而我做这些决定的时候，并没有想太多，大概就类似于游戏里的<strong>肌肉记忆</strong>吧。</p>
</section>
<section id="ambition" class="level2">
<h2 class="anchored" data-anchor-id="ambition">Ambition</h2>
<p>为什么会突然想到Ambition这个选手呢？因为我2017年退伍，病床上看S7的比赛，看EDG一万经济被翻盘，看EDG的粉丝在赛场外哭到呕吐。而那一年Ambition打败Faker，拿下了S7的冠军，我却考研失败。</p>
<p>但回顾Ambition的职业生涯，2012年以中单成名，2013年被Faker单杀，开始走下坡路，那一年正好我进入科大。</p>
<p>所以我觉得我的2017年过的并不失败，大概我心中住了一个Ambition吧。</p>
</section>
<section id="朋友" class="level2">
<h2 class="anchored" data-anchor-id="朋友">朋友</h2>
<p>我有几个同学，平时喜欢一起玩英雄联盟，喜欢四黑然后在快赢的时候点投降，喜欢一起住电竞酒店，喜欢抽着烟漫步在凌晨的淮海中路被人问要不要代驾（其实是需要代练），喜欢在KTV听渣威的《童话镇》、阿杰的《像我这样的人》、阿煊的《夏日寒风》却没钱点酒，喜欢找女陪玩结果发现大部分除了发嗲别的啥都不会。</p>
<p>就这样过了几年，直到大家都没力气通宵，没力气抽烟，直到唯一一个打的很好的女陪玩也弃游了，直到大家都有了女朋友甚至老婆。</p>
<p>我们最近一次共同经历的事已经不是英雄联盟了，居然是部队问我们要那多发的两个月津贴，大伙都不想给，于是支付了一杯奶茶钱当律师费，然后心满意足地发现自己当老赖的想法得到了律师的认可。</p>
<p>但我还是会每天上游戏玩个一两把，看着右边黑乎乎的好友栏，看着只有一个亮起的ID，那个人叫“还在等她说晚安”。</p>
</section>
<section id="工作" class="level2">
<h2 class="anchored" data-anchor-id="工作">工作</h2>
<p>算上实习，算上陆院那几个月，也工作了快四年了，期间兜兜转转，从南昌到上海，从上海到深圳，现在又回到上海，我一直嘲笑老婆工作不稳定，老是出差，但她都在同一个地方工作五年了，我却换了五个地方。</p>
</section>
<section id="未来" class="level2">
<h2 class="anchored" data-anchor-id="未来">未来</h2>
<p>最近在重读古龙，后面计划写些读后感，希望能赚点钱买纸质书而不是网上下盗版，希望家里房子顺利盖好，希望家人和朋友身体健康、工作顺利。</p>


</section>

 ]]></description>
  <category>life</category>
  <guid>https://lov3camille.top/posts/new_beginnings/index.html</guid>
  <pubDate>Sun, 03 Jul 2022 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
